[INFO ] 2020-02-02T19:44:23,635Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194422.303/custom-cordapp_1_4_71da3f17-62a1-46d0-9d93-c577d5cbbd38.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T19:44:24,015Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194422.303/custom-cordapp_1_4_71da3f17-62a1-46d0-9d93-c577d5cbbd38.jar {}
[INFO ] 2020-02-02T19:44:24,183Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T19:44:26,354Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:44:26,379Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:44:28,997Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:44:29,078Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 20A89689B82966B19F1FB766442AA78D2242CBC7CF0DF0989019F2F392F32BED. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.0/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:69) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:44:29,099Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:44:29,099Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 20A89689B82966B19F1FB766442AA78D2242CBC7CF0DF0989019F2F392F32BED. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.0/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:69) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:44:29,157Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:44:29,174Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:44:30,297Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:44:30,301Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T19:45:04,570Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194503.711/custom-cordapp_1_4_29c7456e-97e8-4709-a6aa-21d6351475da.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T19:45:04,661Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194503.711/custom-cordapp_1_4_29c7456e-97e8-4709-a6aa-21d6351475da.jar {}
[INFO ] 2020-02-02T19:45:04,803Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-02T19:45:14,455Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194513.592/custom-cordapp_1_4_0c83ddab-f201-4244-99af-3d1a2c06ced3.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T19:45:14,576Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194513.592/custom-cordapp_1_4_0c83ddab-f201-4244-99af-3d1a2c06ced3.jar {}
[INFO ] 2020-02-02T19:45:14,694Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T19:45:16,556Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:16,560Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:16,583Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:16,583Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:17,876Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:17,878Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:45:17,898Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction C592AB83D9A21D7225EB8036879F900C2B449343FCFE3F378100EEC0CBB8B410. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Registro deve retornar uma saída.
	at bootcamp.TokenContract.verify(TokenContract.java:24) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:45:17,903Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:17,906Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:45:17,906Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction C592AB83D9A21D7225EB8036879F900C2B449343FCFE3F378100EEC0CBB8B410. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Registro deve retornar uma saída.
	at bootcamp.TokenContract.verify(TokenContract.java:24) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:45:17,958Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:17,991Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:19,124Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:19,134Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T19:45:25,920Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194525.120/custom-cordapp_1_4_324df545-927d-4f17-b673-9458b7d51d1f.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T19:45:26,018Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194525.120/custom-cordapp_1_4_324df545-927d-4f17-b673-9458b7d51d1f.jar {}
[INFO ] 2020-02-02T19:45:26,152Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T19:45:27,903Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:27,930Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:29,107Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:45:29,143Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction EF83D5BA9F971F53BDCD44135FDAEDAA3DFB2F41C8DA97626CBD7EB565A3B468. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Deve conter um comando.
	at bootcamp.TokenContract.verify(TokenContract.java:29) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:45:29,156Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:45:29,156Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction EF83D5BA9F971F53BDCD44135FDAEDAA3DFB2F41C8DA97626CBD7EB565A3B468. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Deve conter um comando.
	at bootcamp.TokenContract.verify(TokenContract.java:29) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:45:29,228Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:29,256Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:30,336Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:30,342Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T19:45:42,889Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194542.069/custom-cordapp_1_4_5a01faba-6cb2-4f24-8419-9f0d614965f7.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T19:45:43,004Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194542.069/custom-cordapp_1_4_5a01faba-6cb2-4f24-8419-9f0d614965f7.jar {}
[INFO ] 2020-02-02T19:45:43,128Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T19:45:44,760Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:44,785Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:45,920Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:45,923Z [Test worker] internal.Verifier.warnOnce - State of class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled in TransactionState with bootcamp.TokenContract.  For details see: https://docs.corda.net/api-contract-constraints.html#contract-state-agreement {}
[ERROR] 2020-02-02T19:45:45,924Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 44BBC4CB7405AEE9C2F523E4384E6EB6B070816E7DDD02002EFDCEBE4CB18948. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output deve ser um tokenstatefalse
	at bootcamp.TokenContract.verify(TokenContract.java:32) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:45:45,928Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:45:45,929Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 44BBC4CB7405AEE9C2F523E4384E6EB6B070816E7DDD02002EFDCEBE4CB18948. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output deve ser um tokenstatefalse
	at bootcamp.TokenContract.verify(TokenContract.java:32) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:45:45,971Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:45,985Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:46,981Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:47,000Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T19:45:54,121Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194553.358/custom-cordapp_1_4_f2eab8df-781a-4f66-aeb1-f85626613f30.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T19:45:54,218Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194553.358/custom-cordapp_1_4_f2eab8df-781a-4f66-aeb1-f85626613f30.jar {}
[INFO ] 2020-02-02T19:45:54,335Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T19:45:55,972Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:55,997Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:57,244Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:45:57,267Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 394DE3A5FC790BB715F88F6244D947BCC25DD533BA3C6987B1CBB512D0F81DF2. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:45:57,278Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:45:57,279Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 394DE3A5FC790BB715F88F6244D947BCC25DD533BA3C6987B1CBB512D0F81DF2. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:45:57,321Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:57,334Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:58,199Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:45:58,200Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 7FEC6A3530486CEF806E39C68327B9F7FE6AAFE137BF9BE16D736502B508A239. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:45:58,203Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:45:58,203Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 7FEC6A3530486CEF806E39C68327B9F7FE6AAFE137BF9BE16D736502B508A239. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:37) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:45:58,253Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:58,282Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:59,136Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:59,142Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:59,160Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:59,169Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:59,795Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:45:59,798Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T19:46:10,283Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194609.535/custom-cordapp_1_4_6a5215e1-8363-4351-9313-2efa3e4e83c7.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T19:46:10,372Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-194609.535/custom-cordapp_1_4_6a5215e1-8363-4351-9313-2efa3e4e83c7.jar {}
[INFO ] 2020-02-02T19:46:10,505Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T19:46:12,316Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:46:12,354Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:46:13,601Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:46:13,618Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction FBBA100C111E9CD974EB29A2793B7B0451A4D0A65DA216B05A74640495C61781. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.0/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:69) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:46:13,633Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T19:46:13,634Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction FBBA100C111E9CD974EB29A2793B7B0451A4D0A65DA216B05A74640495C61781. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.0/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:69) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T19:46:13,688Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:46:13,714Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:46:14,735Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:46:14,744Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T19:55:40,383Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-195539.612/custom-cordapp_1_4_5ce342cc-2d11-47ab-bc94-8a68f3edc7ca.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T19:55:40,474Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-195539.612/custom-cordapp_1_4_5ce342cc-2d11-47ab-bc94-8a68f3edc7ca.jar {}
[INFO ] 2020-02-02T19:55:40,606Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T19:55:42,228Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:55:42,257Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:55:43,459Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T19:55:43,482Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T20:04:10,147Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-200409.357/custom-cordapp_1_4_5f2e39f9-2933-455d-ac98-a0f6bb2d0520.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T20:04:10,240Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-200409.357/custom-cordapp_1_4_5f2e39f9-2933-455d-ac98-a0f6bb2d0520.jar {}
[INFO ] 2020-02-02T20:04:10,369Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T20:04:12,249Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:04:12,314Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:04:13,604Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:04:13,622Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 7B1118D3FC155B035E95AD0AAE3CF6B8456BCC859DA5914B1024C6FEB4754578. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:04:13,632Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:04:13,632Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 7B1118D3FC155B035E95AD0AAE3CF6B8456BCC859DA5914B1024C6FEB4754578. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:04:13,677Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:04:13,703Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:04:14,796Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:04:14,796Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction FAD041C3284E6EDD60E2AA1F92192E277ADAC8B60D2A5A78A93DD8456668AA2F. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:04:14,799Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:04:14,800Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction FAD041C3284E6EDD60E2AA1F92192E277ADAC8B60D2A5A78A93DD8456668AA2F. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:04:14,848Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:04:14,862Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:04:15,837Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:04:15,837Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 07CAA3E4CEAF4E640C29F2E8C8B1C304ED9858C014F7D1C264C20EBE40BD90FF. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:04:15,842Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:04:15,842Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 07CAA3E4CEAF4E640C29F2E8C8B1C304ED9858C014F7D1C264C20EBE40BD90FF. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[INFO ] 2020-02-02T20:05:19,030Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-200518.210/custom-cordapp_1_4_1045f29a-e7f2-491e-a324-83f4d3ffe55c.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T20:05:19,128Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-200518.210/custom-cordapp_1_4_1045f29a-e7f2-491e-a324-83f4d3ffe55c.jar {}
[INFO ] 2020-02-02T20:05:19,295Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T20:05:21,015Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:05:21,039Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:05:22,261Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:05:22,279Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 589114637E992A8D0A362FDFAAF16A1904D702EE543225A177ED1CBA7DC942E1. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:05:22,299Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:05:22,299Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 589114637E992A8D0A362FDFAAF16A1904D702EE543225A177ED1CBA7DC942E1. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:05:22,353Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:05:22,379Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:05:23,329Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:05:23,335Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 5A836EB7E935F85800A6AB4AC5C3897B901A679E2A0D8FBF601C9E4254949091. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:05:23,347Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:05:23,347Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 5A836EB7E935F85800A6AB4AC5C3897B901A679E2A0D8FBF601C9E4254949091. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:05:23,390Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:05:23,421Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:05:24,280Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:05:24,281Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 9AB89B09127B3D5B9607962ADACEA9F2AF8C677F039297A423C28F5222D909C0. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:05:24,290Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:05:24,291Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 9AB89B09127B3D5B9607962ADACEA9F2AF8C677F039297A423C28F5222D909C0. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[INFO ] 2020-02-02T20:08:08,480Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-200807.719/custom-cordapp_1_4_052ba1df-f668-47a1-962d-303875202359.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T20:08:08,607Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-200807.719/custom-cordapp_1_4_052ba1df-f668-47a1-962d-303875202359.jar {}
[INFO ] 2020-02-02T20:08:08,729Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T20:08:10,376Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:08:10,402Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:08:11,565Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:08:11,585Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction B829C16DF5C19DDE3003341C8DD56B7630C1DA9D821E9383CED11DDE12DFFDE1. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:08:11,596Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:08:11,597Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction B829C16DF5C19DDE3003341C8DD56B7630C1DA9D821E9383CED11DDE12DFFDE1. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:08:11,649Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:08:11,676Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:08:12,672Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:08:12,672Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 1CD15066DF186874515BE1944DF7BA6A9F42209D7F7FCE25DDABED3781A7387B. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:08:12,676Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:08:12,676Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 1CD15066DF186874515BE1944DF7BA6A9F42209D7F7FCE25DDABED3781A7387B. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:08:12,718Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:08:12,729Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:08:13,812Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:08:13,812Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F1CCCE41B47763C3B7786D75410982066C39A70710DDDFD0165D950C5A28A6E4. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:08:13,816Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:08:13,817Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F1CCCE41B47763C3B7786D75410982066C39A70710DDDFD0165D950C5A28A6E4. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[INFO ] 2020-02-02T20:13:07,226Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-201306.415/custom-cordapp_1_4_6c96c09e-8eb7-48f9-b4b6-3a2b5e06f700.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T20:13:07,329Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-201306.415/custom-cordapp_1_4_6c96c09e-8eb7-48f9-b4b6-3a2b5e06f700.jar {}
[INFO ] 2020-02-02T20:13:07,444Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T20:13:09,092Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:09,120Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:10,299Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:10,319Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 534236682D8A5C4C2D5596546E54B85EEC784CF052363353AC1D21078D7CA708. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:13:10,327Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:10,328Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 534236682D8A5C4C2D5596546E54B85EEC784CF052363353AC1D21078D7CA708. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:13:10,353Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:10,366Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:11,420Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:11,420Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 05E06A5C368B2C1BE63B1843761DBD04861414985D59CF5652B43615EC973AE1. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:13:11,427Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:11,428Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 05E06A5C368B2C1BE63B1843761DBD04861414985D59CF5652B43615EC973AE1. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:13:11,482Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:11,495Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:12,289Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:12,291Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction BEA5516DF1144EAFC9C466C56255F1AFB8C003507743932D95AD8B78F4EEC991. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:13:12,308Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:12,309Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction BEA5516DF1144EAFC9C466C56255F1AFB8C003507743932D95AD8B78F4EEC991. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[INFO ] 2020-02-02T20:13:47,042Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-201346.270/custom-cordapp_1_4_bb20b71b-ff9f-46ec-8f43-a206cdb6b0de.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T20:13:47,145Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-201346.270/custom-cordapp_1_4_bb20b71b-ff9f-46ec-8f43-a206cdb6b0de.jar {}
[INFO ] 2020-02-02T20:13:47,248Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T20:13:48,854Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:48,879Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:49,966Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:49,984Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction BD22CEBDF35A329BB4538208E4F1028D504071DEB4F70C3E9E297D5A5869E6A4. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:13:49,988Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:49,988Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction BD22CEBDF35A329BB4538208E4F1028D504071DEB4F70C3E9E297D5A5869E6A4. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:13:50,046Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:50,059Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:50,971Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:50,972Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction BC6D71EEED7ABB658E3FBE60FCB76DE8263EF53528247F6AF18465F07BC4F55E. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:13:50,975Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:50,975Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction BC6D71EEED7ABB658E3FBE60FCB76DE8263EF53528247F6AF18465F07BC4F55E. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:13:51,035Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:51,060Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:13:52,266Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:52,267Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction BB11002AA61976513796BC6B89E59F001EA2E8E884E2A9110F6B6E21360CBE21. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:13:52,279Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:13:52,279Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction BB11002AA61976513796BC6B89E59F001EA2E8E884E2A9110F6B6E21360CBE21. [errorCode=e55izw, moreInformationAt=https://errors.corda.net/OS/4.0/e55izw] {}
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[?:1.8.0_242]
	at java.util.ArrayList.get(ArrayList.java:433) ~[?:1.8.0_242]
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[INFO ] 2020-02-02T20:15:36,334Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-201535.504/custom-cordapp_1_4_710b25fe-e2e6-4a86-8b42-1522505aa964.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T20:15:36,444Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-201535.504/custom-cordapp_1_4_710b25fe-e2e6-4a86-8b42-1522505aa964.jar {}
[INFO ] 2020-02-02T20:15:36,579Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T20:15:38,232Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:38,257Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:39,450Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:15:39,467Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 5983C621D326054B94DE26DD0909153F3B10A09051051ED2CA0B36577B5D493A. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter um assinante.
	at bootcamp.TokenContract.verify(TokenContract.java:57) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:15:39,472Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:15:39,472Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 5983C621D326054B94DE26DD0909153F3B10A09051051ED2CA0B36577B5D493A. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter um assinante.
	at bootcamp.TokenContract.verify(TokenContract.java:57) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:15:39,531Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:39,560Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:40,599Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:15:40,599Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 80CAFE7535C01C504C467A42C7CFA9A56CDCF661BAE721CDF612AE82EABC65B1. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter um assinante.
	at bootcamp.TokenContract.verify(TokenContract.java:57) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:15:40,602Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T20:15:40,602Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 80CAFE7535C01C504C467A42C7CFA9A56CDCF661BAE721CDF612AE82EABC65B1. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter um assinante.
	at bootcamp.TokenContract.verify(TokenContract.java:57) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T20:15:40,645Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:40,670Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:41,388Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:41,393Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:41,415Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:41,427Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:42,222Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T20:15:42,226Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:03:18,216Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210317.105/custom-cordapp_1_4_f2fbed4f-0d26-4e60-a751-33289afdaf2c.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:03:18,429Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210317.105/custom-cordapp_1_4_f2fbed4f-0d26-4e60-a751-33289afdaf2c.jar {}
[INFO ] 2020-02-02T21:03:18,619Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-02T21:03:28,308Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210327.535/custom-cordapp_1_4_cad0fde7-15d6-4b16-8d7b-c4b307938a8b.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:03:28,402Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210327.535/custom-cordapp_1_4_cad0fde7-15d6-4b16-8d7b-c4b307938a8b.jar {}
[INFO ] 2020-02-02T21:03:28,542Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:03:30,572Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:30,606Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:31,855Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:03:31,872Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction AF6DBF695F6E4B301AF469C5FBE6C2F82158395E85CEF8CE97D4AC3317FB744C. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:03:31,877Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:03:31,878Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction AF6DBF695F6E4B301AF469C5FBE6C2F82158395E85CEF8CE97D4AC3317FB744C. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:03:31,932Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:31,961Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:32,933Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:03:32,934Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction D34763B95522D605893D99FFA2D07BB59C2C81069B7F771DD4C8C95E83ADA1BE. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:03:32,937Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:03:32,938Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction D34763B95522D605893D99FFA2D07BB59C2C81069B7F771DD4C8C95E83ADA1BE. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:03:33,197Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:33,230Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:33,961Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:33,966Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:33,987Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:33,999Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:34,571Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:03:34,574Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:05:30,970Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:05:31,071Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar {}
[INFO ] 2020-02-02T21:05:31,228Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:05:32,977Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:32,980Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:33,002Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:33,002Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:34,248Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:34,257Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:34,276Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 059D7AD68C6E60F8F60A33F49324038DA55D9528137248B9D57FD976FE31AE7A. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Registro deve retornar uma saída.
	at bootcamp.TokenContract.verify(TokenContract.java:25) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:34,284Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:34,286Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:34,286Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 059D7AD68C6E60F8F60A33F49324038DA55D9528137248B9D57FD976FE31AE7A. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Registro deve retornar uma saída.
	at bootcamp.TokenContract.verify(TokenContract.java:25) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:34,325Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:34,343Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:35,282Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:35,286Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:05:35,301Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:05:35,303Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar {}
[INFO ] 2020-02-02T21:05:35,320Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:05:35,363Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:35,376Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:36,264Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:36,264Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 71652BBBA1863F195EE0C6076FE3899BE19BCB5B5C2D99C3413F2704BC7063BA. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:36,267Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:36,267Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 71652BBBA1863F195EE0C6076FE3899BE19BCB5B5C2D99C3413F2704BC7063BA. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:36,293Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:36,301Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:37,386Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:37,390Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction CF309346EFC4F71F0D11C97FA26BBA13FE52783653EA5DD99A611A116E4959CC. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:37,399Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:37,399Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction CF309346EFC4F71F0D11C97FA26BBA13FE52783653EA5DD99A611A116E4959CC. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:37,441Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:37,466Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:38,119Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:38,122Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:38,140Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:38,150Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:38,696Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:38,699Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:05:38,711Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:05:38,711Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar {}
[INFO ] 2020-02-02T21:05:38,750Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-02T21:05:38,850Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:05:38,854Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar {}
[INFO ] 2020-02-02T21:05:38,866Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:05:38,914Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:38,925Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:39,471Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:39,471Z [Test worker] internal.Verifier.warnOnce - State of class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled in TransactionState with bootcamp.TokenContract.  For details see: https://docs.corda.net/api-contract-constraints.html#contract-state-agreement {}
[ERROR] 2020-02-02T21:05:39,471Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 18F416F916921F21C26ADFB1751112F3BA2CCA4C4BEA3EF1A655CD5BFC007F61. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output deve ser um tokenstate
	at bootcamp.TokenContract.verify(TokenContract.java:38) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:39,474Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:39,475Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 18F416F916921F21C26ADFB1751112F3BA2CCA4C4BEA3EF1A655CD5BFC007F61. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output deve ser um tokenstate
	at bootcamp.TokenContract.verify(TokenContract.java:38) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:39,495Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:39,503Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:40,104Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:40,107Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:05:40,122Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:05:40,122Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar {}
[INFO ] 2020-02-02T21:05:40,145Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:05:40,172Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:40,181Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:40,891Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:40,891Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 52444DE1E3400876D2DFDD4A4484501FD4302D5A5D2612F9E6072B4A257E5631. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: comando deve ser um Issue
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:40,894Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:40,894Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 52444DE1E3400876D2DFDD4A4484501FD4302D5A5D2612F9E6072B4A257E5631. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: comando deve ser um Issue
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:40,934Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:40,958Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:41,502Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:41,505Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:05:41,516Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:05:41,518Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar {}
[INFO ] 2020-02-02T21:05:41,534Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:05:41,626Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:41,640Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:42,193Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:42,193Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction B7D31ADF9F1B7A52B5C3FFC91AC3EF51911D41E6EA5D0ECEA8A10831664B7FB7. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Deve conter um comando.
	at bootcamp.TokenContract.verify(TokenContract.java:27) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:42,198Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:42,198Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction B7D31ADF9F1B7A52B5C3FFC91AC3EF51911D41E6EA5D0ECEA8A10831664B7FB7. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Deve conter um comando.
	at bootcamp.TokenContract.verify(TokenContract.java:27) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:42,234Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:42,243Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:42,860Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:42,867Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:05:42,878Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:05:42,878Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar {}
[INFO ] 2020-02-02T21:05:42,900Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:05:42,936Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:42,943Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:43,480Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:43,481Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction C6891431C38B4580A15B5D1F9D62BC4B37901DAEA9546E401827AE09F23BE70C. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:43,484Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:43,484Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction C6891431C38B4580A15B5D1F9D62BC4B37901DAEA9546E401827AE09F23BE70C. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:43,499Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:43,505Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:44,048Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:44,048Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 33B6FD2174D482BE79590900574930C750EB94B30ECBA0D01D4FD9B2C33D2D30. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:44,051Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:44,051Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 33B6FD2174D482BE79590900574930C750EB94B30ECBA0D01D4FD9B2C33D2D30. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:44,068Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:44,074Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:44,636Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:44,638Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:44,651Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:44,657Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:45,199Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:45,201Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:05:45,212Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:05:45,212Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210530.163/custom-cordapp_1_4_e0a724e0-8330-4c26-aba5-72003b1ffe75.jar {}
[INFO ] 2020-02-02T21:05:45,229Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:05:45,261Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:45,263Z [Test worker] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[WARN ] 2020-02-02T21:05:45,845Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:45,845Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction CC90CAB802D391F65BC019650B390619938BE909F4F7DCB35C790B1059E8D1C5. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: comando deve ser um Issue
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter.recordTransactionWithTransactionMap(TestDSL.kt:257) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction(TestDSL.kt:295) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.input(TransactionDSLInterpreter.kt:150) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:31) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:45,850Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:45,852Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:45,860Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:45,861Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:45,864Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:45,864Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 4980FCCED97732FFE04520F96ED68B0D8BAFCD83752EE8E9251FD1ABDAAB6E59. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Registro nao deve ter inputs.
	at bootcamp.TokenContract.verify(TokenContract.java:23) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:45,865Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:45,867Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:45,869Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:05:45,869Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 4980FCCED97732FFE04520F96ED68B0D8BAFCD83752EE8E9251FD1ABDAAB6E59. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Registro nao deve ter inputs.
	at bootcamp.TokenContract.verify(TokenContract.java:23) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:05:45,886Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:45,896Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:46,463Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:46,466Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:05:56,886Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:05:56,973Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar {}
[INFO ] 2020-02-02T21:05:57,120Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:05:58,748Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:58,751Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:58,774Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:05:58,775Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:00,013Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:00,018Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:00,037Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction B640217BDD71FBD2CFABDE2C1069FF3A7028FF54AD7424B296D93A9A683D029C. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Registro deve retornar uma saída.
	at bootcamp.TokenContract.verify(TokenContract.java:25) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:00,056Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:00,064Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:00,064Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction B640217BDD71FBD2CFABDE2C1069FF3A7028FF54AD7424B296D93A9A683D029C. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Registro deve retornar uma saída.
	at bootcamp.TokenContract.verify(TokenContract.java:25) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:00,094Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:00,122Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:00,928Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:00,932Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:06:00,948Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:06:00,948Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar {}
[INFO ] 2020-02-02T21:06:00,972Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:06:01,010Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:01,025Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:01,864Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:01,866Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 17C15432375709649D8BC42DBBF58824251E561D321EF60D4253B12207E1ED04. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:01,870Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:01,870Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 17C15432375709649D8BC42DBBF58824251E561D321EF60D4253B12207E1ED04. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:01,904Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:01,917Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:02,943Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:02,943Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction DC99E2BB6BD673D9B1D87C08A69A6240520121FD8FDEFDA33D20138BFF7FD774. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:02,956Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:02,956Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction DC99E2BB6BD673D9B1D87C08A69A6240520121FD8FDEFDA33D20138BFF7FD774. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:02,995Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:03,013Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:03,627Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:03,631Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:03,648Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:03,658Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:04,224Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:04,227Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:06:04,246Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:06:04,247Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar {}
[INFO ] 2020-02-02T21:06:04,274Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-02T21:06:04,317Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:06:04,317Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar {}
[INFO ] 2020-02-02T21:06:04,340Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:06:04,380Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:04,387Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:04,950Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:04,950Z [Test worker] internal.Verifier.warnOnce - State of class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled in TransactionState with bootcamp.TokenContract.  For details see: https://docs.corda.net/api-contract-constraints.html#contract-state-agreement {}
[ERROR] 2020-02-02T21:06:04,951Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 807881B9CE9964D7E5D48C462AC5BFC86C849DAE177DA8BCDE814EB0B308C92F. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output deve ser um tokenstate
	at bootcamp.TokenContract.verify(TokenContract.java:38) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:04,955Z [Test worker] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:04,955Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 807881B9CE9964D7E5D48C462AC5BFC86C849DAE177DA8BCDE814EB0B308C92F. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output deve ser um tokenstate
	at bootcamp.TokenContract.verify(TokenContract.java:38) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:04,982Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:04,996Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:05,562Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:05,567Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:06:05,578Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:06:05,579Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar {}
[INFO ] 2020-02-02T21:06:05,598Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:06:05,638Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:05,647Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:06,185Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:06,185Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 65D255F45C991776935ECB29C6F8A039AAE09CE0A58CCBB33B9332DD4640905E. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: comando deve ser um Issue
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:06,188Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:06,188Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 65D255F45C991776935ECB29C6F8A039AAE09CE0A58CCBB33B9332DD4640905E. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: comando deve ser um Issue
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:06,216Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:06,235Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:06,915Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:06,917Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:06:06,928Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:06:06,928Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar {}
[INFO ] 2020-02-02T21:06:06,939Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:06:06,970Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:06,977Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:07,498Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:07,498Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction C601E61B26DAC4668B5D9A38B4EDB41D2A1BBDA812B73E78EC15E8C1D82BA627. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Deve conter um comando.
	at bootcamp.TokenContract.verify(TokenContract.java:27) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:07,502Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:07,502Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction C601E61B26DAC4668B5D9A38B4EDB41D2A1BBDA812B73E78EC15E8C1D82BA627. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Deve conter um comando.
	at bootcamp.TokenContract.verify(TokenContract.java:27) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:07,527Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:07,533Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:08,139Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:08,141Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:06:08,151Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:06:08,151Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar {}
[INFO ] 2020-02-02T21:06:08,166Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:06:08,194Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:08,200Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:08,727Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:08,728Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 460BDF8D9383E756B02E886272BF891C04142EEC24D89ECD70001324241D2F58. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:08,730Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:08,730Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 460BDF8D9383E756B02E886272BF891C04142EEC24D89ECD70001324241D2F58. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:08,761Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:08,773Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:09,298Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:09,299Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F5A10D0998C4155DEE41EFF6BD2181983138F3694249FDFAD8116452A7D2A4AC. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:09,301Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:09,301Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F5A10D0998C4155DEE41EFF6BD2181983138F3694249FDFAD8116452A7D2A4AC. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: output nao deve ser 0 ou negativo: 
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:09,315Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:09,321Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:09,946Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:09,950Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:09,971Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:09,978Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:10,690Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:10,698Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-02T21:06:10,717Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar, rootPackageName=null) {}
[INFO ] 2020-02-02T21:06:10,726Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/generated-custom-cordapps/20200202-210556.158/custom-cordapp_1_4_5f4c95f2-24b3-4774-8b44-b266ca351fd3.jar {}
[INFO ] 2020-02-02T21:06:10,759Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-02T21:06:10,811Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:10,813Z [Test worker] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[WARN ] 2020-02-02T21:06:11,452Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:11,452Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F4CFB2704DEAB257B64FF676D6434E859C93FB015C5B1FBB4A83D2B30EF34592. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: comando deve ser um Issue
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter.recordTransactionWithTransactionMap(TestDSL.kt:257) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction(TestDSL.kt:295) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.input(TransactionDSLInterpreter.kt:150) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:31) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:11,455Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:11,457Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:11,465Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:11,482Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:11,485Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:11,485Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 5AFE4D9AEA02BF8F34C14D4921BD6E30601CA7ACB3EA06232504C1E8AD282F1A. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Registro nao deve ter inputs.
	at bootcamp.TokenContract.verify(TokenContract.java:23) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:11,487Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:11,488Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:11,491Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-02-02T21:06:11,491Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 5AFE4D9AEA02BF8F34C14D4921BD6E30601CA7ACB3EA06232504C1E8AD282F1A. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Registro nao deve ter inputs.
	at bootcamp.TokenContract.verify(TokenContract.java:23) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_242]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
[WARN ] 2020-02-02T21:06:11,513Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:11,518Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:12,102Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-02-02T21:06:12,104Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-02-03T00:30:38,387Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T00:30:41,796Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003033.741/nodes/0/cordapps] {}
[INFO ] 2020-02-03T00:30:41,800Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003033.741/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:41,820Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003033.741/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:41,893Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:42,399Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:42,454Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:42,454Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:42,455Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:42,580Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:33.568Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:46,399Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:46,401Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003033.741/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:46,402Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:46,403Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:46,444Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:46,448Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:48,134Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:48,656Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:48,701Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:48,716Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:48,716Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:48,948Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:48,956Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:48,956Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689848956) {}
[INFO ] 2020-02-03T00:30:48,960Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:49,087Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689848956) {}
[INFO ] 2020-02-03T00:30:49,136Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:49,155Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689848956) {}
[INFO ] 2020-02-03T00:30:49,184Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:49,233Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:49,237Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T00:30:49,239Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T00:30:49,550Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689848956) {}
[INFO ] 2020-02-03T00:30:49,567Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689848956) {}
[INFO ] 2020-02-03T00:30:49,568Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:49,568Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689848956) {}
[INFO ] 2020-02-03T00:30:49,568Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:49,571Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003033.741/nodes/1/cordapps] {}
[INFO ] 2020-02-03T00:30:49,571Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003033.741/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:49,571Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003033.741/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:49,616Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:49,621Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:49,648Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:49,648Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:49,648Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:49,653Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:33.568Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:50,103Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:50,105Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003033.741/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:50,105Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:50,106Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:50,108Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:50,108Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:50,174Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:50,183Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:50,185Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:50,185Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:30:50,200Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:50,200Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:50,289Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:50,315Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:50,315Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689850315) {}
[INFO ] 2020-02-03T00:30:50,318Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:50,325Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689850315) {}
[INFO ] 2020-02-03T00:30:50,332Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:50,342Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689850315) {}
[INFO ] 2020-02-03T00:30:50,346Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:50,378Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:50,386Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689850315) {}
[INFO ] 2020-02-03T00:30:50,389Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689848956) {}
[INFO ] 2020-02-03T00:30:50,390Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:50,404Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689850315) {}
[INFO ] 2020-02-03T00:30:50,405Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:50,414Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689850315) {}
[INFO ] 2020-02-03T00:30:50,415Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:50,415Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689850315) {}
[INFO ] 2020-02-03T00:30:50,415Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:50,416Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003033.741/nodes/2/cordapps] {}
[INFO ] 2020-02-03T00:30:50,416Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003033.741/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:50,417Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003033.741/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:50,441Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:50,447Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:50,468Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:50,468Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:50,468Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:50,471Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:33.568Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:50,782Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:50,784Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003033.741/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:50,784Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:50,785Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:50,786Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:50,786Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:50,846Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:50,852Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:50,854Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:50,854Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:30:50,866Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:50,866Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:50,966Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:50,970Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:50,970Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689850970) {}
[INFO ] 2020-02-03T00:30:50,972Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:50,978Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689850970) {}
[INFO ] 2020-02-03T00:30:50,984Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:50,986Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689850970) {}
[INFO ] 2020-02-03T00:30:50,996Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:51,037Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:51,044Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689850970) {}
[INFO ] 2020-02-03T00:30:51,051Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689848956) {}
[INFO ] 2020-02-03T00:30:51,052Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:51,060Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689850970) {}
[INFO ] 2020-02-03T00:30:51,063Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:51,072Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689850315) {}
[INFO ] 2020-02-03T00:30:51,073Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:51,081Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689850970) {}
[INFO ] 2020-02-03T00:30:51,083Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:51,093Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689850970) {}
[INFO ] 2020-02-03T00:30:51,093Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:51,093Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689850970) {}
[INFO ] 2020-02-03T00:30:51,093Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:51,274Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=621907cf-42ad-4cc6-bfa7-ae1aa0e2c610, invocation_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, invocation_timestamp=2020-02-03T00:30:51.115Z, origin=Only For Testing, session_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, session_timestamp=2020-02-03T00:30:51.115Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:51,281Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, timestamp: 2020-02-03T00:30:51.115Z, entityType: Invocation, sessionId=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, timestamp: 2020-02-03T00:30:51.115Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=07D1CD47544F9C1A6D8E88ED1C5EAA734AE72BAFE42BB1DD7928645F30C0AC1A), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@ef6f5c3, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=3fc1dc93-ec23-4f92-bbb5-ae680986549f) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=621907cf-42ad-4cc6-bfa7-ae1aa0e2c610, invocation_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, invocation_timestamp=2020-02-03T00:30:51.115Z, origin=Only For Testing, session_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, session_timestamp=2020-02-03T00:30:51.115Z, thread-id=104}
[INFO ] 2020-02-03T00:30:51,283Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=621907cf-42ad-4cc6-bfa7-ae1aa0e2c610, invocation_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, invocation_timestamp=2020-02-03T00:30:51.115Z, origin=Only For Testing, session_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, session_timestamp=2020-02-03T00:30:51.115Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:51,283Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=621907cf-42ad-4cc6-bfa7-ae1aa0e2c610, invocation_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, invocation_timestamp=2020-02-03T00:30:51.115Z, origin=Only For Testing, session_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, session_timestamp=2020-02-03T00:30:51.115Z, thread-id=104}
[WARN ] 2020-02-03T00:30:51,299Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] errored, dumping all transitions:

 --- Transition of flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] ---
  Timestamp: 2020-02-03T00:30:51.264Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[621907cf-42ad-4cc6-bfa7-ae1aa0e2c610], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, timestamp: 2020-02-03T00:30:51.115Z, entityType: Invocation, sessionId=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, timestamp: 2020-02-03T00:30:51.115Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=07D1CD47544F9C1A6D8E88ED1C5EAA734AE72BAFE42BB1DD7928645F30C0AC1A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@e54089c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@e54089c])
    SignalFlowHasStarted(flowId=[621907cf-42ad-4cc6-bfa7-ae1aa0e2c610])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@e54089c]
    []


 --- Transition of flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] ---
  Timestamp: 2020-02-03T00:30:51.285Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4199300836348864362, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] ---
  Timestamp: 2020-02-03T00:30:51.290Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] ---
  Timestamp: 2020-02-03T00:30:51.292Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=621907cf-42ad-4cc6-bfa7-ae1aa0e2c610, invocation_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, invocation_timestamp=2020-02-03T00:30:51.115Z, origin=Only For Testing, session_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, session_timestamp=2020-02-03T00:30:51.115Z, thread-id=104}
[WARN ] 2020-02-03T00:30:51,299Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=621907cf-42ad-4cc6-bfa7-ae1aa0e2c610, invocation_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, invocation_timestamp=2020-02-03T00:30:51.115Z, origin=Only For Testing, session_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, session_timestamp=2020-02-03T00:30:51.115Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T00:30:51,301Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=621907cf-42ad-4cc6-bfa7-ae1aa0e2c610, invocation_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, invocation_timestamp=2020-02-03T00:30:51.115Z, origin=Only For Testing, session_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, session_timestamp=2020-02-03T00:30:51.115Z, thread-id=104}
[WARN ] 2020-02-03T00:30:51,349Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] errored, dumping all transitions:

 --- Transition of flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] ---
  Timestamp: 2020-02-03T00:30:51.264Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[621907cf-42ad-4cc6-bfa7-ae1aa0e2c610], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, timestamp: 2020-02-03T00:30:51.115Z, entityType: Invocation, sessionId=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, timestamp: 2020-02-03T00:30:51.115Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=07D1CD47544F9C1A6D8E88ED1C5EAA734AE72BAFE42BB1DD7928645F30C0AC1A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@e54089c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@e54089c])
    SignalFlowHasStarted(flowId=[621907cf-42ad-4cc6-bfa7-ae1aa0e2c610])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@e54089c]
    []


 --- Transition of flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] ---
  Timestamp: 2020-02-03T00:30:51.285Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4199300836348864362, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] ---
  Timestamp: 2020-02-03T00:30:51.290Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] ---
  Timestamp: 2020-02-03T00:30:51.292Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] ---
  Timestamp: 2020-02-03T00:30:51.338Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-4199300836348864362)], sessions=[], senderUUID=3fc1dc93-ec23-4f92-bbb5-ae680986549f)
    CreateTransaction
    RemoveCheckpoint(id=[621907cf-42ad-4cc6-bfa7-ae1aa0e2c610])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=621907cf-42ad-4cc6-bfa7-ae1aa0e2c610)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[621907cf-42ad-4cc6-bfa7-ae1aa0e2c610], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-4199300836348864362, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, timestamp: 2020-02-03T00:30:51.115Z, entityType: Invocation, sessionId=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, timestamp: 2020-02-03T00:30:51.115Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=07D1CD47544F9C1A6D8E88ED1C5EAA734AE72BAFE42BB1DD7928645F30C0AC1A), errorState=Errored(errors=[FlowError(errorId=-4199300836348864362, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@ef6f5c3, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=3fc1dc93-ec23-4f92-bbb5-ae680986549f))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=621907cf-42ad-4cc6-bfa7-ae1aa0e2c610, invocation_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, invocation_timestamp=2020-02-03T00:30:51.115Z, origin=Only For Testing, session_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, session_timestamp=2020-02-03T00:30:51.115Z, thread-id=104}
[WARN ] 2020-02-03T00:30:51,349Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [621907cf-42ad-4cc6-bfa7-ae1aa0e2c610] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=621907cf-42ad-4cc6-bfa7-ae1aa0e2c610, invocation_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, invocation_timestamp=2020-02-03T00:30:51.115Z, origin=Only For Testing, session_id=abf8e0f0-7efb-400f-8f85-a9eed613d2c5, session_timestamp=2020-02-03T00:30:51.115Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:51,482Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003051.395/nodes/0/cordapps] {}
[INFO ] 2020-02-03T00:30:51,482Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003051.395/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:51,482Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003051.395/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:51,505Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:51,510Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:51,515Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:51,516Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:51,517Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:51,522Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:51.395Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:51,854Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:51,856Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003051.395/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:51,856Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:51,857Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:51,859Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:51,859Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:51,947Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:51,957Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:51,980Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:51,985Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:51,985Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:52,072Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:52,076Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:52,076Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689852076) {}
[INFO ] 2020-02-03T00:30:52,077Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:52,090Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689852076) {}
[INFO ] 2020-02-03T00:30:52,098Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:52,105Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689852076) {}
[INFO ] 2020-02-03T00:30:52,120Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:52,145Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:52,147Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T00:30:52,148Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T00:30:52,154Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689852076) {}
[INFO ] 2020-02-03T00:30:52,167Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689852076) {}
[INFO ] 2020-02-03T00:30:52,167Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:52,167Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689852076) {}
[INFO ] 2020-02-03T00:30:52,167Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:52,169Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003051.395/nodes/1/cordapps] {}
[INFO ] 2020-02-03T00:30:52,169Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003051.395/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:52,169Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003051.395/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:52,191Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:52,198Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:52,215Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:52,216Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:52,216Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:52,218Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:51.395Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:52,491Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:52,493Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003051.395/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:52,493Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:52,494Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:52,495Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:52,495Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:52,591Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:52,598Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:52,600Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:52,600Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:30:52,612Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:52,612Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:52,694Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:52,697Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:52,697Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689852697) {}
[INFO ] 2020-02-03T00:30:52,699Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:52,704Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689852697) {}
[INFO ] 2020-02-03T00:30:52,710Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:52,717Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689852697) {}
[INFO ] 2020-02-03T00:30:52,727Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:52,754Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:52,762Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689852697) {}
[INFO ] 2020-02-03T00:30:52,764Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689852076) {}
[INFO ] 2020-02-03T00:30:52,765Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:52,771Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689852697) {}
[INFO ] 2020-02-03T00:30:52,774Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:52,781Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689852697) {}
[INFO ] 2020-02-03T00:30:52,782Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:52,782Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689852697) {}
[INFO ] 2020-02-03T00:30:52,782Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:52,783Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003051.395/nodes/2/cordapps] {}
[INFO ] 2020-02-03T00:30:52,784Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003051.395/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:52,784Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003051.395/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:52,815Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:52,820Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:52,838Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:52,839Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:52,840Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:52,842Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:51.395Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:53,108Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:53,111Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003051.395/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:53,111Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:53,112Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:53,114Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:53,114Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:53,192Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:53,199Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:53,200Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:53,201Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:30:53,211Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:53,211Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:53,285Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:53,289Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:53,289Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689853289) {}
[INFO ] 2020-02-03T00:30:53,290Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:53,295Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689853289) {}
[INFO ] 2020-02-03T00:30:53,300Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:53,307Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689853289) {}
[INFO ] 2020-02-03T00:30:53,320Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:53,354Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:53,363Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689853289) {}
[INFO ] 2020-02-03T00:30:53,365Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689852076) {}
[INFO ] 2020-02-03T00:30:53,367Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:53,374Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689853289) {}
[INFO ] 2020-02-03T00:30:53,376Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:53,384Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689852697) {}
[INFO ] 2020-02-03T00:30:53,386Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:53,393Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689853289) {}
[INFO ] 2020-02-03T00:30:53,394Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:53,403Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689853289) {}
[INFO ] 2020-02-03T00:30:53,404Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:53,404Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689853289) {}
[INFO ] 2020-02-03T00:30:53,404Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:53,410Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=d86ceb37-4798-49de-ab53-23493281328a, invocation_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, invocation_timestamp=2020-02-03T00:30:53.405Z, origin=Only For Testing, session_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, session_timestamp=2020-02-03T00:30:53.405Z, thread-id=187}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:53,412Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [d86ceb37-4798-49de-ab53-23493281328a] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=a3501290-5e28-45a4-8aca-3ad74eee48e7, timestamp: 2020-02-03T00:30:53.405Z, entityType: Invocation, sessionId=a3501290-5e28-45a4-8aca-3ad74eee48e7, timestamp: 2020-02-03T00:30:53.405Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=FF8FC3603EA39AA6DB5D08A83807AA2D736B8C332121B50AC6FD42A24E77D24A), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@71475df3, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=c2dcfe4e-1a2e-4d3c-89bb-c148610ecbcc) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=d86ceb37-4798-49de-ab53-23493281328a, invocation_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, invocation_timestamp=2020-02-03T00:30:53.405Z, origin=Only For Testing, session_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, session_timestamp=2020-02-03T00:30:53.405Z, thread-id=187}
[INFO ] 2020-02-03T00:30:53,412Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [d86ceb37-4798-49de-ab53-23493281328a] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=d86ceb37-4798-49de-ab53-23493281328a, invocation_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, invocation_timestamp=2020-02-03T00:30:53.405Z, origin=Only For Testing, session_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, session_timestamp=2020-02-03T00:30:53.405Z, thread-id=187}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:53,412Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [d86ceb37-4798-49de-ab53-23493281328a] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=d86ceb37-4798-49de-ab53-23493281328a, invocation_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, invocation_timestamp=2020-02-03T00:30:53.405Z, origin=Only For Testing, session_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, session_timestamp=2020-02-03T00:30:53.405Z, thread-id=187}
[WARN ] 2020-02-03T00:30:53,415Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d86ceb37-4798-49de-ab53-23493281328a] errored, dumping all transitions:

 --- Transition of flow [d86ceb37-4798-49de-ab53-23493281328a] ---
  Timestamp: 2020-02-03T00:30:53.410Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d86ceb37-4798-49de-ab53-23493281328a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=a3501290-5e28-45a4-8aca-3ad74eee48e7, timestamp: 2020-02-03T00:30:53.405Z, entityType: Invocation, sessionId=a3501290-5e28-45a4-8aca-3ad74eee48e7, timestamp: 2020-02-03T00:30:53.405Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=FF8FC3603EA39AA6DB5D08A83807AA2D736B8C332121B50AC6FD42A24E77D24A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@157383b7])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@157383b7])
    SignalFlowHasStarted(flowId=[d86ceb37-4798-49de-ab53-23493281328a])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@157383b7]
    []


 --- Transition of flow [d86ceb37-4798-49de-ab53-23493281328a] ---
  Timestamp: 2020-02-03T00:30:53.412Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=698361225168515695, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d86ceb37-4798-49de-ab53-23493281328a] ---
  Timestamp: 2020-02-03T00:30:53.412Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d86ceb37-4798-49de-ab53-23493281328a] ---
  Timestamp: 2020-02-03T00:30:53.412Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=d86ceb37-4798-49de-ab53-23493281328a, invocation_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, invocation_timestamp=2020-02-03T00:30:53.405Z, origin=Only For Testing, session_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, session_timestamp=2020-02-03T00:30:53.405Z, thread-id=187}
[WARN ] 2020-02-03T00:30:53,415Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d86ceb37-4798-49de-ab53-23493281328a] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=d86ceb37-4798-49de-ab53-23493281328a, invocation_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, invocation_timestamp=2020-02-03T00:30:53.405Z, origin=Only For Testing, session_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, session_timestamp=2020-02-03T00:30:53.405Z, thread-id=187}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T00:30:53,417Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=d86ceb37-4798-49de-ab53-23493281328a, invocation_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, invocation_timestamp=2020-02-03T00:30:53.405Z, origin=Only For Testing, session_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, session_timestamp=2020-02-03T00:30:53.405Z, thread-id=187}
[WARN ] 2020-02-03T00:30:53,424Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d86ceb37-4798-49de-ab53-23493281328a] errored, dumping all transitions:

 --- Transition of flow [d86ceb37-4798-49de-ab53-23493281328a] ---
  Timestamp: 2020-02-03T00:30:53.410Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d86ceb37-4798-49de-ab53-23493281328a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=a3501290-5e28-45a4-8aca-3ad74eee48e7, timestamp: 2020-02-03T00:30:53.405Z, entityType: Invocation, sessionId=a3501290-5e28-45a4-8aca-3ad74eee48e7, timestamp: 2020-02-03T00:30:53.405Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=FF8FC3603EA39AA6DB5D08A83807AA2D736B8C332121B50AC6FD42A24E77D24A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@157383b7])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@157383b7])
    SignalFlowHasStarted(flowId=[d86ceb37-4798-49de-ab53-23493281328a])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@157383b7]
    []


 --- Transition of flow [d86ceb37-4798-49de-ab53-23493281328a] ---
  Timestamp: 2020-02-03T00:30:53.412Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=698361225168515695, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d86ceb37-4798-49de-ab53-23493281328a] ---
  Timestamp: 2020-02-03T00:30:53.412Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d86ceb37-4798-49de-ab53-23493281328a] ---
  Timestamp: 2020-02-03T00:30:53.412Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [d86ceb37-4798-49de-ab53-23493281328a] ---
  Timestamp: 2020-02-03T00:30:53.423Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=698361225168515695)], sessions=[], senderUUID=c2dcfe4e-1a2e-4d3c-89bb-c148610ecbcc)
    CreateTransaction
    RemoveCheckpoint(id=[d86ceb37-4798-49de-ab53-23493281328a])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=d86ceb37-4798-49de-ab53-23493281328a)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[d86ceb37-4798-49de-ab53-23493281328a], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=698361225168515695, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=a3501290-5e28-45a4-8aca-3ad74eee48e7, timestamp: 2020-02-03T00:30:53.405Z, entityType: Invocation, sessionId=a3501290-5e28-45a4-8aca-3ad74eee48e7, timestamp: 2020-02-03T00:30:53.405Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=FF8FC3603EA39AA6DB5D08A83807AA2D736B8C332121B50AC6FD42A24E77D24A), errorState=Errored(errors=[FlowError(errorId=698361225168515695, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@71475df3, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=c2dcfe4e-1a2e-4d3c-89bb-c148610ecbcc))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=d86ceb37-4798-49de-ab53-23493281328a, invocation_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, invocation_timestamp=2020-02-03T00:30:53.405Z, origin=Only For Testing, session_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, session_timestamp=2020-02-03T00:30:53.405Z, thread-id=187}
[WARN ] 2020-02-03T00:30:53,425Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d86ceb37-4798-49de-ab53-23493281328a] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=d86ceb37-4798-49de-ab53-23493281328a, invocation_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, invocation_timestamp=2020-02-03T00:30:53.405Z, origin=Only For Testing, session_id=a3501290-5e28-45a4-8aca-3ad74eee48e7, session_timestamp=2020-02-03T00:30:53.405Z, thread-id=187}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:53,514Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003053.451/nodes/0/cordapps] {}
[INFO ] 2020-02-03T00:30:53,514Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003053.451/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:53,514Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003053.451/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:53,523Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:53,534Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:53,536Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:53,536Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:53,537Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:53,540Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:53.451Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:53,831Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:53,833Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003053.451/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:53,833Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:53,834Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:53,835Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:53,835Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:53,893Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:53,900Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:53,920Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:53,928Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:53,928Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:54,007Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:54,010Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:54,011Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689854011) {}
[INFO ] 2020-02-03T00:30:54,013Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:54,026Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689854011) {}
[INFO ] 2020-02-03T00:30:54,033Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:54,055Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689854011) {}
[INFO ] 2020-02-03T00:30:54,059Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:54,068Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:54,070Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T00:30:54,071Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T00:30:54,078Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689854011) {}
[INFO ] 2020-02-03T00:30:54,082Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689854011) {}
[INFO ] 2020-02-03T00:30:54,082Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:54,082Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689854011) {}
[INFO ] 2020-02-03T00:30:54,082Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:54,086Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003053.451/nodes/1/cordapps] {}
[INFO ] 2020-02-03T00:30:54,086Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003053.451/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:54,086Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003053.451/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:54,107Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:54,117Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:54,140Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:54,140Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:54,140Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:54,142Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:53.451Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:54,408Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:54,409Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003053.451/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:54,409Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:54,410Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:54,412Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:54,412Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:54,466Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:54,473Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:54,475Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:54,475Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:30:54,485Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:54,485Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:54,563Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:54,567Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:54,568Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689854568) {}
[INFO ] 2020-02-03T00:30:54,570Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:54,577Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689854568) {}
[INFO ] 2020-02-03T00:30:54,582Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:54,592Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689854568) {}
[INFO ] 2020-02-03T00:30:54,603Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:54,639Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:54,645Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689854568) {}
[INFO ] 2020-02-03T00:30:54,651Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689854011) {}
[INFO ] 2020-02-03T00:30:54,652Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:54,659Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689854568) {}
[INFO ] 2020-02-03T00:30:54,660Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:54,666Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689854568) {}
[INFO ] 2020-02-03T00:30:54,666Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:54,666Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689854568) {}
[INFO ] 2020-02-03T00:30:54,666Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:54,668Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003053.451/nodes/2/cordapps] {}
[INFO ] 2020-02-03T00:30:54,668Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003053.451/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:54,668Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003053.451/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:54,692Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:54,697Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:54,711Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:54,712Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:54,712Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:54,716Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:53.451Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:54,997Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:54,998Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003053.451/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:54,998Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:54,999Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:55,001Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:55,001Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:55,069Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:55,076Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:55,077Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:55,078Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:30:55,089Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:55,090Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:55,159Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:55,162Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:55,162Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689855162) {}
[INFO ] 2020-02-03T00:30:55,164Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:55,168Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689855162) {}
[INFO ] 2020-02-03T00:30:55,173Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:55,183Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689855162) {}
[INFO ] 2020-02-03T00:30:55,189Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:55,213Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:55,219Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689855162) {}
[INFO ] 2020-02-03T00:30:55,221Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689854011) {}
[INFO ] 2020-02-03T00:30:55,222Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:55,229Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689855162) {}
[INFO ] 2020-02-03T00:30:55,230Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:55,238Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689854568) {}
[INFO ] 2020-02-03T00:30:55,239Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:55,246Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689855162) {}
[INFO ] 2020-02-03T00:30:55,247Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:55,254Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689855162) {}
[INFO ] 2020-02-03T00:30:55,254Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:55,254Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689855162) {}
[INFO ] 2020-02-03T00:30:55,254Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:55,269Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=d8f9d3be-c174-4805-ad4f-e1409a3843c9, invocation_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, invocation_timestamp=2020-02-03T00:30:55.266Z, origin=Only For Testing, session_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, session_timestamp=2020-02-03T00:30:55.266Z, thread-id=268}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:55,274Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=7e82f67c-0935-48d9-b35a-0762dc84a65e, timestamp: 2020-02-03T00:30:55.266Z, entityType: Invocation, sessionId=7e82f67c-0935-48d9-b35a-0762dc84a65e, timestamp: 2020-02-03T00:30:55.266Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=826E9C92944EA1485A7C632D90E0A9FFE730584C0BE37D2C838AD85A45B979B0), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@699d98ea, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=dc634a18-98ed-4c8f-be09-a71397ceb6cd) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=d8f9d3be-c174-4805-ad4f-e1409a3843c9, invocation_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, invocation_timestamp=2020-02-03T00:30:55.266Z, origin=Only For Testing, session_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, session_timestamp=2020-02-03T00:30:55.266Z, thread-id=268}
[INFO ] 2020-02-03T00:30:55,275Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=d8f9d3be-c174-4805-ad4f-e1409a3843c9, invocation_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, invocation_timestamp=2020-02-03T00:30:55.266Z, origin=Only For Testing, session_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, session_timestamp=2020-02-03T00:30:55.266Z, thread-id=268}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:55,277Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=d8f9d3be-c174-4805-ad4f-e1409a3843c9, invocation_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, invocation_timestamp=2020-02-03T00:30:55.266Z, origin=Only For Testing, session_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, session_timestamp=2020-02-03T00:30:55.266Z, thread-id=268}
[WARN ] 2020-02-03T00:30:55,279Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] errored, dumping all transitions:

 --- Transition of flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] ---
  Timestamp: 2020-02-03T00:30:55.269Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d8f9d3be-c174-4805-ad4f-e1409a3843c9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=7e82f67c-0935-48d9-b35a-0762dc84a65e, timestamp: 2020-02-03T00:30:55.266Z, entityType: Invocation, sessionId=7e82f67c-0935-48d9-b35a-0762dc84a65e, timestamp: 2020-02-03T00:30:55.266Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=826E9C92944EA1485A7C632D90E0A9FFE730584C0BE37D2C838AD85A45B979B0), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3e1cd5a5])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3e1cd5a5])
    SignalFlowHasStarted(flowId=[d8f9d3be-c174-4805-ad4f-e1409a3843c9])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3e1cd5a5]
    []


 --- Transition of flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] ---
  Timestamp: 2020-02-03T00:30:55.277Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-634301428186464809, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] ---
  Timestamp: 2020-02-03T00:30:55.278Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] ---
  Timestamp: 2020-02-03T00:30:55.278Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=d8f9d3be-c174-4805-ad4f-e1409a3843c9, invocation_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, invocation_timestamp=2020-02-03T00:30:55.266Z, origin=Only For Testing, session_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, session_timestamp=2020-02-03T00:30:55.266Z, thread-id=268}
[WARN ] 2020-02-03T00:30:55,279Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=d8f9d3be-c174-4805-ad4f-e1409a3843c9, invocation_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, invocation_timestamp=2020-02-03T00:30:55.266Z, origin=Only For Testing, session_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, session_timestamp=2020-02-03T00:30:55.266Z, thread-id=268}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T00:30:55,279Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=d8f9d3be-c174-4805-ad4f-e1409a3843c9, invocation_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, invocation_timestamp=2020-02-03T00:30:55.266Z, origin=Only For Testing, session_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, session_timestamp=2020-02-03T00:30:55.266Z, thread-id=268}
[WARN ] 2020-02-03T00:30:55,286Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] errored, dumping all transitions:

 --- Transition of flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] ---
  Timestamp: 2020-02-03T00:30:55.269Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d8f9d3be-c174-4805-ad4f-e1409a3843c9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=7e82f67c-0935-48d9-b35a-0762dc84a65e, timestamp: 2020-02-03T00:30:55.266Z, entityType: Invocation, sessionId=7e82f67c-0935-48d9-b35a-0762dc84a65e, timestamp: 2020-02-03T00:30:55.266Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=826E9C92944EA1485A7C632D90E0A9FFE730584C0BE37D2C838AD85A45B979B0), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3e1cd5a5])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3e1cd5a5])
    SignalFlowHasStarted(flowId=[d8f9d3be-c174-4805-ad4f-e1409a3843c9])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3e1cd5a5]
    []


 --- Transition of flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] ---
  Timestamp: 2020-02-03T00:30:55.277Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-634301428186464809, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] ---
  Timestamp: 2020-02-03T00:30:55.278Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] ---
  Timestamp: 2020-02-03T00:30:55.278Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] ---
  Timestamp: 2020-02-03T00:30:55.286Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-634301428186464809)], sessions=[], senderUUID=dc634a18-98ed-4c8f-be09-a71397ceb6cd)
    CreateTransaction
    RemoveCheckpoint(id=[d8f9d3be-c174-4805-ad4f-e1409a3843c9])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=d8f9d3be-c174-4805-ad4f-e1409a3843c9)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[d8f9d3be-c174-4805-ad4f-e1409a3843c9], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-634301428186464809, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=7e82f67c-0935-48d9-b35a-0762dc84a65e, timestamp: 2020-02-03T00:30:55.266Z, entityType: Invocation, sessionId=7e82f67c-0935-48d9-b35a-0762dc84a65e, timestamp: 2020-02-03T00:30:55.266Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=826E9C92944EA1485A7C632D90E0A9FFE730584C0BE37D2C838AD85A45B979B0), errorState=Errored(errors=[FlowError(errorId=-634301428186464809, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@699d98ea, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=dc634a18-98ed-4c8f-be09-a71397ceb6cd))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=d8f9d3be-c174-4805-ad4f-e1409a3843c9, invocation_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, invocation_timestamp=2020-02-03T00:30:55.266Z, origin=Only For Testing, session_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, session_timestamp=2020-02-03T00:30:55.266Z, thread-id=268}
[WARN ] 2020-02-03T00:30:55,287Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d8f9d3be-c174-4805-ad4f-e1409a3843c9] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=d8f9d3be-c174-4805-ad4f-e1409a3843c9, invocation_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, invocation_timestamp=2020-02-03T00:30:55.266Z, origin=Only For Testing, session_id=7e82f67c-0935-48d9-b35a-0762dc84a65e, session_timestamp=2020-02-03T00:30:55.266Z, thread-id=268}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:55,343Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003055.300/nodes/0/cordapps] {}
[INFO ] 2020-02-03T00:30:55,343Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003055.300/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:55,343Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003055.300/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:55,374Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:55,390Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:55,398Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:55,398Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:55,398Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:55,412Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:55.300Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:55,702Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:55,703Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003055.300/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:55,703Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:55,704Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:55,705Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:55,706Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:55,759Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:55,764Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:55,787Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:55,792Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:55,792Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:55,865Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:55,868Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:55,868Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689855868) {}
[INFO ] 2020-02-03T00:30:55,869Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:55,880Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689855868) {}
[INFO ] 2020-02-03T00:30:55,887Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:55,891Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689855868) {}
[INFO ] 2020-02-03T00:30:55,894Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:55,918Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:55,919Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T00:30:55,919Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T00:30:55,923Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689855868) {}
[INFO ] 2020-02-03T00:30:55,925Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689855868) {}
[INFO ] 2020-02-03T00:30:55,925Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:55,925Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689855868) {}
[INFO ] 2020-02-03T00:30:55,925Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:55,926Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003055.300/nodes/1/cordapps] {}
[INFO ] 2020-02-03T00:30:55,927Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003055.300/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:55,927Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003055.300/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:55,951Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:55,962Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:56,007Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:56,010Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:56,010Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:56,017Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:55.300Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:56,297Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:56,299Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003055.300/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:56,299Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:56,300Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:56,301Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:56,301Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:56,350Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:56,355Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:56,356Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:56,357Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:30:56,366Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:56,366Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:56,435Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:56,438Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:56,438Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689856438) {}
[INFO ] 2020-02-03T00:30:56,439Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:56,443Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689856438) {}
[INFO ] 2020-02-03T00:30:56,447Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:56,455Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689856438) {}
[INFO ] 2020-02-03T00:30:56,462Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:56,491Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:56,498Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689856438) {}
[INFO ] 2020-02-03T00:30:56,511Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689855868) {}
[INFO ] 2020-02-03T00:30:56,512Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:56,519Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689856438) {}
[INFO ] 2020-02-03T00:30:56,525Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:56,532Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689856438) {}
[INFO ] 2020-02-03T00:30:56,533Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:56,533Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689856438) {}
[INFO ] 2020-02-03T00:30:56,533Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:56,535Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003055.300/nodes/2/cordapps] {}
[INFO ] 2020-02-03T00:30:56,535Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003055.300/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:56,535Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003055.300/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:56,561Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:56,572Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:56,594Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:56,594Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:56,594Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:56,596Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:55.300Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:56,864Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:56,866Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003055.300/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:56,866Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:56,867Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:56,869Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:56,869Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:56,951Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:56,973Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:56,978Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:56,979Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:30:56,989Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:56,995Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:57,083Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:57,086Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:57,086Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689857086) {}
[INFO ] 2020-02-03T00:30:57,088Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:57,099Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689857086) {}
[INFO ] 2020-02-03T00:30:57,103Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:57,107Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689857086) {}
[INFO ] 2020-02-03T00:30:57,116Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:57,147Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:57,153Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689857086) {}
[INFO ] 2020-02-03T00:30:57,163Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689855868) {}
[INFO ] 2020-02-03T00:30:57,163Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:57,171Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689857086) {}
[INFO ] 2020-02-03T00:30:57,173Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:57,181Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689856438) {}
[INFO ] 2020-02-03T00:30:57,184Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:57,190Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689857086) {}
[INFO ] 2020-02-03T00:30:57,195Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:57,201Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689857086) {}
[INFO ] 2020-02-03T00:30:57,202Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:57,202Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689857086) {}
[INFO ] 2020-02-03T00:30:57,202Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:57,209Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=3fec5598-b0d6-4ace-a9b1-df5599c15859, invocation_id=d476df73-854a-4b17-b0c7-4289c107e449, invocation_timestamp=2020-02-03T00:30:57.206Z, origin=Only For Testing, session_id=d476df73-854a-4b17-b0c7-4289c107e449, session_timestamp=2020-02-03T00:30:57.206Z, thread-id=349}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:57,215Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d476df73-854a-4b17-b0c7-4289c107e449, timestamp: 2020-02-03T00:30:57.206Z, entityType: Invocation, sessionId=d476df73-854a-4b17-b0c7-4289c107e449, timestamp: 2020-02-03T00:30:57.206Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F0EF3C9A49EE66BA2708F51F882764AAAD0D4402ED543B83065FEBD22EE41C9A), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@10a71589, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=41393c7f-1110-449a-aa87-32628fde6401) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=3fec5598-b0d6-4ace-a9b1-df5599c15859, invocation_id=d476df73-854a-4b17-b0c7-4289c107e449, invocation_timestamp=2020-02-03T00:30:57.206Z, origin=Only For Testing, session_id=d476df73-854a-4b17-b0c7-4289c107e449, session_timestamp=2020-02-03T00:30:57.206Z, thread-id=349}
[INFO ] 2020-02-03T00:30:57,216Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=3fec5598-b0d6-4ace-a9b1-df5599c15859, invocation_id=d476df73-854a-4b17-b0c7-4289c107e449, invocation_timestamp=2020-02-03T00:30:57.206Z, origin=Only For Testing, session_id=d476df73-854a-4b17-b0c7-4289c107e449, session_timestamp=2020-02-03T00:30:57.206Z, thread-id=349}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:57,217Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=3fec5598-b0d6-4ace-a9b1-df5599c15859, invocation_id=d476df73-854a-4b17-b0c7-4289c107e449, invocation_timestamp=2020-02-03T00:30:57.206Z, origin=Only For Testing, session_id=d476df73-854a-4b17-b0c7-4289c107e449, session_timestamp=2020-02-03T00:30:57.206Z, thread-id=349}
[WARN ] 2020-02-03T00:30:57,220Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] errored, dumping all transitions:

 --- Transition of flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] ---
  Timestamp: 2020-02-03T00:30:57.209Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3fec5598-b0d6-4ace-a9b1-df5599c15859], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d476df73-854a-4b17-b0c7-4289c107e449, timestamp: 2020-02-03T00:30:57.206Z, entityType: Invocation, sessionId=d476df73-854a-4b17-b0c7-4289c107e449, timestamp: 2020-02-03T00:30:57.206Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F0EF3C9A49EE66BA2708F51F882764AAAD0D4402ED543B83065FEBD22EE41C9A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@41aed23f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@41aed23f])
    SignalFlowHasStarted(flowId=[3fec5598-b0d6-4ace-a9b1-df5599c15859])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@41aed23f]
    []


 --- Transition of flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] ---
  Timestamp: 2020-02-03T00:30:57.217Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6625968776437856863, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] ---
  Timestamp: 2020-02-03T00:30:57.219Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] ---
  Timestamp: 2020-02-03T00:30:57.219Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=3fec5598-b0d6-4ace-a9b1-df5599c15859, invocation_id=d476df73-854a-4b17-b0c7-4289c107e449, invocation_timestamp=2020-02-03T00:30:57.206Z, origin=Only For Testing, session_id=d476df73-854a-4b17-b0c7-4289c107e449, session_timestamp=2020-02-03T00:30:57.206Z, thread-id=349}
[WARN ] 2020-02-03T00:30:57,221Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=3fec5598-b0d6-4ace-a9b1-df5599c15859, invocation_id=d476df73-854a-4b17-b0c7-4289c107e449, invocation_timestamp=2020-02-03T00:30:57.206Z, origin=Only For Testing, session_id=d476df73-854a-4b17-b0c7-4289c107e449, session_timestamp=2020-02-03T00:30:57.206Z, thread-id=349}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T00:30:57,222Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=3fec5598-b0d6-4ace-a9b1-df5599c15859, invocation_id=d476df73-854a-4b17-b0c7-4289c107e449, invocation_timestamp=2020-02-03T00:30:57.206Z, origin=Only For Testing, session_id=d476df73-854a-4b17-b0c7-4289c107e449, session_timestamp=2020-02-03T00:30:57.206Z, thread-id=349}
[WARN ] 2020-02-03T00:30:57,233Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] errored, dumping all transitions:

 --- Transition of flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] ---
  Timestamp: 2020-02-03T00:30:57.209Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3fec5598-b0d6-4ace-a9b1-df5599c15859], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d476df73-854a-4b17-b0c7-4289c107e449, timestamp: 2020-02-03T00:30:57.206Z, entityType: Invocation, sessionId=d476df73-854a-4b17-b0c7-4289c107e449, timestamp: 2020-02-03T00:30:57.206Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F0EF3C9A49EE66BA2708F51F882764AAAD0D4402ED543B83065FEBD22EE41C9A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@41aed23f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@41aed23f])
    SignalFlowHasStarted(flowId=[3fec5598-b0d6-4ace-a9b1-df5599c15859])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@41aed23f]
    []


 --- Transition of flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] ---
  Timestamp: 2020-02-03T00:30:57.217Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6625968776437856863, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] ---
  Timestamp: 2020-02-03T00:30:57.219Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] ---
  Timestamp: 2020-02-03T00:30:57.219Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] ---
  Timestamp: 2020-02-03T00:30:57.232Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=6625968776437856863)], sessions=[], senderUUID=41393c7f-1110-449a-aa87-32628fde6401)
    CreateTransaction
    RemoveCheckpoint(id=[3fec5598-b0d6-4ace-a9b1-df5599c15859])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=3fec5598-b0d6-4ace-a9b1-df5599c15859)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[3fec5598-b0d6-4ace-a9b1-df5599c15859], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=6625968776437856863, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d476df73-854a-4b17-b0c7-4289c107e449, timestamp: 2020-02-03T00:30:57.206Z, entityType: Invocation, sessionId=d476df73-854a-4b17-b0c7-4289c107e449, timestamp: 2020-02-03T00:30:57.206Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F0EF3C9A49EE66BA2708F51F882764AAAD0D4402ED543B83065FEBD22EE41C9A), errorState=Errored(errors=[FlowError(errorId=6625968776437856863, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@10a71589, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=41393c7f-1110-449a-aa87-32628fde6401))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=3fec5598-b0d6-4ace-a9b1-df5599c15859, invocation_id=d476df73-854a-4b17-b0c7-4289c107e449, invocation_timestamp=2020-02-03T00:30:57.206Z, origin=Only For Testing, session_id=d476df73-854a-4b17-b0c7-4289c107e449, session_timestamp=2020-02-03T00:30:57.206Z, thread-id=349}
[WARN ] 2020-02-03T00:30:57,233Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3fec5598-b0d6-4ace-a9b1-df5599c15859] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=3fec5598-b0d6-4ace-a9b1-df5599c15859, invocation_id=d476df73-854a-4b17-b0c7-4289c107e449, invocation_timestamp=2020-02-03T00:30:57.206Z, origin=Only For Testing, session_id=d476df73-854a-4b17-b0c7-4289c107e449, session_timestamp=2020-02-03T00:30:57.206Z, thread-id=349}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:57,300Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003057.258/nodes/0/cordapps] {}
[INFO ] 2020-02-03T00:30:57,300Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003057.258/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:57,301Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003057.258/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:57,321Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:57,325Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:57,328Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:57,328Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:57,328Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:57,332Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:57.258Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:57,723Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:57,724Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003057.258/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:57,724Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:57,725Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:57,733Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:57,733Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:57,804Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:57,818Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:57,838Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:57,848Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:57,848Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:57,969Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:57,981Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:57,981Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689857981) {}
[INFO ] 2020-02-03T00:30:57,985Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:58,007Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689857981) {}
[INFO ] 2020-02-03T00:30:58,021Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:58,038Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689857981) {}
[INFO ] 2020-02-03T00:30:58,041Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:58,058Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:58,061Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T00:30:58,061Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T00:30:58,067Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689857981) {}
[INFO ] 2020-02-03T00:30:58,070Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689857981) {}
[INFO ] 2020-02-03T00:30:58,070Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:58,070Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689857981) {}
[INFO ] 2020-02-03T00:30:58,070Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:58,072Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003057.258/nodes/1/cordapps] {}
[INFO ] 2020-02-03T00:30:58,072Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003057.258/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:58,072Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003057.258/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:58,095Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:58,101Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:58,117Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:58,117Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:58,118Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:58,119Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:57.258Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:58,357Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:58,358Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003057.258/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:58,358Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:58,359Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:58,360Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:58,360Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:58,403Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:58,409Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:58,410Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:58,410Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:30:58,419Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:58,419Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:58,479Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:58,482Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:58,482Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689858482) {}
[INFO ] 2020-02-03T00:30:58,484Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:58,487Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689858482) {}
[INFO ] 2020-02-03T00:30:58,491Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:58,493Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689858482) {}
[INFO ] 2020-02-03T00:30:58,499Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:58,535Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:58,539Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689858482) {}
[INFO ] 2020-02-03T00:30:58,546Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689857981) {}
[INFO ] 2020-02-03T00:30:58,547Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:58,552Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689858482) {}
[INFO ] 2020-02-03T00:30:58,553Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:58,559Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689858482) {}
[INFO ] 2020-02-03T00:30:58,559Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:58,559Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689858482) {}
[INFO ] 2020-02-03T00:30:58,559Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:58,560Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003057.258/nodes/2/cordapps] {}
[INFO ] 2020-02-03T00:30:58,560Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003057.258/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:58,560Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003057.258/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:58,578Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:58,581Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:58,593Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:58,593Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:58,593Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:58,595Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:57.258Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:58,810Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:58,812Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003057.258/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:58,812Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:58,813Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:58,814Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:58,814Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:58,855Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:58,860Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:58,861Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:58,861Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:30:58,870Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:58,870Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:58,928Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:30:58,931Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:58,931Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689858931) {}
[INFO ] 2020-02-03T00:30:58,932Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:58,936Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689858931) {}
[INFO ] 2020-02-03T00:30:58,939Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:58,943Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689858931) {}
[INFO ] 2020-02-03T00:30:58,947Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:58,976Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:58,981Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689858931) {}
[INFO ] 2020-02-03T00:30:58,985Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689857981) {}
[INFO ] 2020-02-03T00:30:58,985Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:58,991Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689858931) {}
[INFO ] 2020-02-03T00:30:58,992Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:58,999Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689858482) {}
[INFO ] 2020-02-03T00:30:59,000Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:59,006Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689858931) {}
[INFO ] 2020-02-03T00:30:59,007Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:59,012Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689858931) {}
[INFO ] 2020-02-03T00:30:59,012Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:59,012Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689858931) {}
[INFO ] 2020-02-03T00:30:59,012Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:59,016Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0f22c2a7-4901-4ba3-bee3-bf95d58d3d88, invocation_id=1317875c-8727-48b7-896b-d7f220d71bc8, invocation_timestamp=2020-02-03T00:30:59.014Z, origin=Only For Testing, session_id=1317875c-8727-48b7-896b-d7f220d71bc8, session_timestamp=2020-02-03T00:30:59.014Z, thread-id=430}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:59,018Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1317875c-8727-48b7-896b-d7f220d71bc8, timestamp: 2020-02-03T00:30:59.014Z, entityType: Invocation, sessionId=1317875c-8727-48b7-896b-d7f220d71bc8, timestamp: 2020-02-03T00:30:59.014Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=40EDC7AE22D6D5549E480FDC09EAE5BEA74DFD9E05FC25851A16F9D5714D596F), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@369193, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=c2e50fcd-15c7-496e-bbd2-3261a37afe4d) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0f22c2a7-4901-4ba3-bee3-bf95d58d3d88, invocation_id=1317875c-8727-48b7-896b-d7f220d71bc8, invocation_timestamp=2020-02-03T00:30:59.014Z, origin=Only For Testing, session_id=1317875c-8727-48b7-896b-d7f220d71bc8, session_timestamp=2020-02-03T00:30:59.014Z, thread-id=430}
[INFO ] 2020-02-03T00:30:59,019Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0f22c2a7-4901-4ba3-bee3-bf95d58d3d88, invocation_id=1317875c-8727-48b7-896b-d7f220d71bc8, invocation_timestamp=2020-02-03T00:30:59.014Z, origin=Only For Testing, session_id=1317875c-8727-48b7-896b-d7f220d71bc8, session_timestamp=2020-02-03T00:30:59.014Z, thread-id=430}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:59,019Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0f22c2a7-4901-4ba3-bee3-bf95d58d3d88, invocation_id=1317875c-8727-48b7-896b-d7f220d71bc8, invocation_timestamp=2020-02-03T00:30:59.014Z, origin=Only For Testing, session_id=1317875c-8727-48b7-896b-d7f220d71bc8, session_timestamp=2020-02-03T00:30:59.014Z, thread-id=430}
[WARN ] 2020-02-03T00:30:59,020Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] errored, dumping all transitions:

 --- Transition of flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] ---
  Timestamp: 2020-02-03T00:30:59.016Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[0f22c2a7-4901-4ba3-bee3-bf95d58d3d88], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1317875c-8727-48b7-896b-d7f220d71bc8, timestamp: 2020-02-03T00:30:59.014Z, entityType: Invocation, sessionId=1317875c-8727-48b7-896b-d7f220d71bc8, timestamp: 2020-02-03T00:30:59.014Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=40EDC7AE22D6D5549E480FDC09EAE5BEA74DFD9E05FC25851A16F9D5714D596F), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1c9ac548])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1c9ac548])
    SignalFlowHasStarted(flowId=[0f22c2a7-4901-4ba3-bee3-bf95d58d3d88])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1c9ac548]
    []


 --- Transition of flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] ---
  Timestamp: 2020-02-03T00:30:59.019Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-7048846168791659255, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] ---
  Timestamp: 2020-02-03T00:30:59.019Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] ---
  Timestamp: 2020-02-03T00:30:59.019Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0f22c2a7-4901-4ba3-bee3-bf95d58d3d88, invocation_id=1317875c-8727-48b7-896b-d7f220d71bc8, invocation_timestamp=2020-02-03T00:30:59.014Z, origin=Only For Testing, session_id=1317875c-8727-48b7-896b-d7f220d71bc8, session_timestamp=2020-02-03T00:30:59.014Z, thread-id=430}
[WARN ] 2020-02-03T00:30:59,020Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0f22c2a7-4901-4ba3-bee3-bf95d58d3d88, invocation_id=1317875c-8727-48b7-896b-d7f220d71bc8, invocation_timestamp=2020-02-03T00:30:59.014Z, origin=Only For Testing, session_id=1317875c-8727-48b7-896b-d7f220d71bc8, session_timestamp=2020-02-03T00:30:59.014Z, thread-id=430}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T00:30:59,020Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0f22c2a7-4901-4ba3-bee3-bf95d58d3d88, invocation_id=1317875c-8727-48b7-896b-d7f220d71bc8, invocation_timestamp=2020-02-03T00:30:59.014Z, origin=Only For Testing, session_id=1317875c-8727-48b7-896b-d7f220d71bc8, session_timestamp=2020-02-03T00:30:59.014Z, thread-id=430}
[WARN ] 2020-02-03T00:30:59,029Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] errored, dumping all transitions:

 --- Transition of flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] ---
  Timestamp: 2020-02-03T00:30:59.016Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[0f22c2a7-4901-4ba3-bee3-bf95d58d3d88], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1317875c-8727-48b7-896b-d7f220d71bc8, timestamp: 2020-02-03T00:30:59.014Z, entityType: Invocation, sessionId=1317875c-8727-48b7-896b-d7f220d71bc8, timestamp: 2020-02-03T00:30:59.014Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=40EDC7AE22D6D5549E480FDC09EAE5BEA74DFD9E05FC25851A16F9D5714D596F), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1c9ac548])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1c9ac548])
    SignalFlowHasStarted(flowId=[0f22c2a7-4901-4ba3-bee3-bf95d58d3d88])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1c9ac548]
    []


 --- Transition of flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] ---
  Timestamp: 2020-02-03T00:30:59.019Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-7048846168791659255, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] ---
  Timestamp: 2020-02-03T00:30:59.019Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] ---
  Timestamp: 2020-02-03T00:30:59.019Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] ---
  Timestamp: 2020-02-03T00:30:59.029Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-7048846168791659255)], sessions=[], senderUUID=c2e50fcd-15c7-496e-bbd2-3261a37afe4d)
    CreateTransaction
    RemoveCheckpoint(id=[0f22c2a7-4901-4ba3-bee3-bf95d58d3d88])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=0f22c2a7-4901-4ba3-bee3-bf95d58d3d88)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[0f22c2a7-4901-4ba3-bee3-bf95d58d3d88], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-7048846168791659255, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1317875c-8727-48b7-896b-d7f220d71bc8, timestamp: 2020-02-03T00:30:59.014Z, entityType: Invocation, sessionId=1317875c-8727-48b7-896b-d7f220d71bc8, timestamp: 2020-02-03T00:30:59.014Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=40EDC7AE22D6D5549E480FDC09EAE5BEA74DFD9E05FC25851A16F9D5714D596F), errorState=Errored(errors=[FlowError(errorId=-7048846168791659255, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@369193, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=c2e50fcd-15c7-496e-bbd2-3261a37afe4d))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0f22c2a7-4901-4ba3-bee3-bf95d58d3d88, invocation_id=1317875c-8727-48b7-896b-d7f220d71bc8, invocation_timestamp=2020-02-03T00:30:59.014Z, origin=Only For Testing, session_id=1317875c-8727-48b7-896b-d7f220d71bc8, session_timestamp=2020-02-03T00:30:59.014Z, thread-id=430}
[WARN ] 2020-02-03T00:30:59,032Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [0f22c2a7-4901-4ba3-bee3-bf95d58d3d88] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0f22c2a7-4901-4ba3-bee3-bf95d58d3d88, invocation_id=1317875c-8727-48b7-896b-d7f220d71bc8, invocation_timestamp=2020-02-03T00:30:59.014Z, origin=Only For Testing, session_id=1317875c-8727-48b7-896b-d7f220d71bc8, session_timestamp=2020-02-03T00:30:59.014Z, thread-id=430}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:30:59,090Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003059.055/nodes/0/cordapps] {}
[INFO ] 2020-02-03T00:30:59,090Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003059.055/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:59,090Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003059.055/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:59,117Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:59,124Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:59,126Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:59,127Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:59,127Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:59,130Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:59.055Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:30:59,372Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:30:59,373Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003059.055/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:30:59,373Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:30:59,374Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:30:59,375Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:59,375Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:59,428Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:30:59,433Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:30:59,456Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:30:59,462Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:59,462Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:59,550Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:30:59,555Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:30:59,555Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689859555) {}
[INFO ] 2020-02-03T00:30:59,558Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:30:59,568Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689859555) {}
[INFO ] 2020-02-03T00:30:59,574Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:30:59,584Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689859555) {}
[INFO ] 2020-02-03T00:30:59,589Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:59,656Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:30:59,662Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T00:30:59,663Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T00:30:59,694Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689859555) {}
[INFO ] 2020-02-03T00:30:59,697Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689859555) {}
[INFO ] 2020-02-03T00:30:59,697Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:59,697Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689859555) {}
[INFO ] 2020-02-03T00:30:59,698Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:30:59,699Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003059.055/nodes/1/cordapps] {}
[INFO ] 2020-02-03T00:30:59,699Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003059.055/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:30:59,699Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003059.055/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:30:59,732Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:30:59,738Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:30:59,762Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:59,762Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:59,762Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:30:59,764Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:59.055Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:31:00,087Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:31:00,088Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003059.055/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:31:00,088Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:31:00,089Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:31:00,091Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:31:00,091Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:31:00,132Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:31:00,138Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:31:00,139Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:31:00,140Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:31:00,179Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:31:00,180Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:31:00,241Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:31:00,244Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:31:00,245Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689860245) {}
[INFO ] 2020-02-03T00:31:00,246Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:31:00,250Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689860245) {}
[INFO ] 2020-02-03T00:31:00,254Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:31:00,269Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689860245) {}
[INFO ] 2020-02-03T00:31:00,272Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:31:00,294Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:31:00,298Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689860245) {}
[INFO ] 2020-02-03T00:31:00,306Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689859555) {}
[INFO ] 2020-02-03T00:31:00,307Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:31:00,312Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689860245) {}
[INFO ] 2020-02-03T00:31:00,313Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:31:00,318Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689860245) {}
[INFO ] 2020-02-03T00:31:00,319Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:31:00,320Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689860245) {}
[INFO ] 2020-02-03T00:31:00,320Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:31:00,322Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003059.055/nodes/2/cordapps] {}
[INFO ] 2020-02-03T00:31:00,322Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003059.055/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:31:00,322Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003059.055/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:31:00,346Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:31:00,350Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:31:00,371Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:31:00,371Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:31:00,371Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:31:00,374Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:30:59.055Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:31:00,597Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:31:00,598Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003059.055/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:31:00,598Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:31:00,599Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:31:00,600Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:31:00,600Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:31:00,648Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:31:00,653Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:31:00,655Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:31:00,656Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:31:00,665Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:31:00,666Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:31:00,748Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:31:00,753Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:31:00,753Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689860753) {}
[INFO ] 2020-02-03T00:31:00,755Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:31:00,760Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689860753) {}
[INFO ] 2020-02-03T00:31:00,763Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:31:00,769Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689860753) {}
[INFO ] 2020-02-03T00:31:00,776Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:31:00,797Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:31:00,804Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689860753) {}
[INFO ] 2020-02-03T00:31:00,806Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580689859555) {}
[INFO ] 2020-02-03T00:31:00,806Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:31:00,812Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689860753) {}
[INFO ] 2020-02-03T00:31:00,813Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:31:00,818Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580689860245) {}
[INFO ] 2020-02-03T00:31:00,819Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:31:00,824Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689860753) {}
[INFO ] 2020-02-03T00:31:00,825Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:31:00,830Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689860753) {}
[INFO ] 2020-02-03T00:31:00,830Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:31:00,830Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580689860753) {}
[INFO ] 2020-02-03T00:31:00,830Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:31:00,833Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50, invocation_id=085b924b-25dc-43b0-aad1-bdc221af1691, invocation_timestamp=2020-02-03T00:31:00.830Z, origin=Only For Testing, session_id=085b924b-25dc-43b0-aad1-bdc221af1691, session_timestamp=2020-02-03T00:31:00.830Z, thread-id=511}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:31:00,833Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=085b924b-25dc-43b0-aad1-bdc221af1691, timestamp: 2020-02-03T00:31:00.830Z, entityType: Invocation, sessionId=085b924b-25dc-43b0-aad1-bdc221af1691, timestamp: 2020-02-03T00:31:00.830Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A244DAC36BCF424D57FAD7A80BF4616376F5CBCBC244001275D28E910757ED20), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@7c2aa249, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=5cf78cf6-5443-4fcb-af1e-c6f3f3771db0) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50, invocation_id=085b924b-25dc-43b0-aad1-bdc221af1691, invocation_timestamp=2020-02-03T00:31:00.830Z, origin=Only For Testing, session_id=085b924b-25dc-43b0-aad1-bdc221af1691, session_timestamp=2020-02-03T00:31:00.830Z, thread-id=511}
[INFO ] 2020-02-03T00:31:00,833Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50, invocation_id=085b924b-25dc-43b0-aad1-bdc221af1691, invocation_timestamp=2020-02-03T00:31:00.830Z, origin=Only For Testing, session_id=085b924b-25dc-43b0-aad1-bdc221af1691, session_timestamp=2020-02-03T00:31:00.830Z, thread-id=511}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:31:00,833Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50, invocation_id=085b924b-25dc-43b0-aad1-bdc221af1691, invocation_timestamp=2020-02-03T00:31:00.830Z, origin=Only For Testing, session_id=085b924b-25dc-43b0-aad1-bdc221af1691, session_timestamp=2020-02-03T00:31:00.830Z, thread-id=511}
[WARN ] 2020-02-03T00:31:00,835Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] errored, dumping all transitions:

 --- Transition of flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] ---
  Timestamp: 2020-02-03T00:31:00.832Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=085b924b-25dc-43b0-aad1-bdc221af1691, timestamp: 2020-02-03T00:31:00.830Z, entityType: Invocation, sessionId=085b924b-25dc-43b0-aad1-bdc221af1691, timestamp: 2020-02-03T00:31:00.830Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A244DAC36BCF424D57FAD7A80BF4616376F5CBCBC244001275D28E910757ED20), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@394cf380])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@394cf380])
    SignalFlowHasStarted(flowId=[e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@394cf380]
    []


 --- Transition of flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] ---
  Timestamp: 2020-02-03T00:31:00.833Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8580447000483906501, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] ---
  Timestamp: 2020-02-03T00:31:00.833Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] ---
  Timestamp: 2020-02-03T00:31:00.835Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50, invocation_id=085b924b-25dc-43b0-aad1-bdc221af1691, invocation_timestamp=2020-02-03T00:31:00.830Z, origin=Only For Testing, session_id=085b924b-25dc-43b0-aad1-bdc221af1691, session_timestamp=2020-02-03T00:31:00.830Z, thread-id=511}
[WARN ] 2020-02-03T00:31:00,835Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50, invocation_id=085b924b-25dc-43b0-aad1-bdc221af1691, invocation_timestamp=2020-02-03T00:31:00.830Z, origin=Only For Testing, session_id=085b924b-25dc-43b0-aad1-bdc221af1691, session_timestamp=2020-02-03T00:31:00.830Z, thread-id=511}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T00:31:00,835Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50, invocation_id=085b924b-25dc-43b0-aad1-bdc221af1691, invocation_timestamp=2020-02-03T00:31:00.830Z, origin=Only For Testing, session_id=085b924b-25dc-43b0-aad1-bdc221af1691, session_timestamp=2020-02-03T00:31:00.830Z, thread-id=511}
[WARN ] 2020-02-03T00:31:00,845Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] errored, dumping all transitions:

 --- Transition of flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] ---
  Timestamp: 2020-02-03T00:31:00.832Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=085b924b-25dc-43b0-aad1-bdc221af1691, timestamp: 2020-02-03T00:31:00.830Z, entityType: Invocation, sessionId=085b924b-25dc-43b0-aad1-bdc221af1691, timestamp: 2020-02-03T00:31:00.830Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A244DAC36BCF424D57FAD7A80BF4616376F5CBCBC244001275D28E910757ED20), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@394cf380])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@394cf380])
    SignalFlowHasStarted(flowId=[e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@394cf380]
    []


 --- Transition of flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] ---
  Timestamp: 2020-02-03T00:31:00.833Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8580447000483906501, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] ---
  Timestamp: 2020-02-03T00:31:00.833Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] ---
  Timestamp: 2020-02-03T00:31:00.835Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] ---
  Timestamp: 2020-02-03T00:31:00.844Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8580447000483906501)], sessions=[], senderUUID=5cf78cf6-5443-4fcb-af1e-c6f3f3771db0)
    CreateTransaction
    RemoveCheckpoint(id=[e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8580447000483906501, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=085b924b-25dc-43b0-aad1-bdc221af1691, timestamp: 2020-02-03T00:31:00.830Z, entityType: Invocation, sessionId=085b924b-25dc-43b0-aad1-bdc221af1691, timestamp: 2020-02-03T00:31:00.830Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A244DAC36BCF424D57FAD7A80BF4616376F5CBCBC244001275D28E910757ED20), errorState=Errored(errors=[FlowError(errorId=8580447000483906501, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@7c2aa249, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=5cf78cf6-5443-4fcb-af1e-c6f3f3771db0))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50, invocation_id=085b924b-25dc-43b0-aad1-bdc221af1691, invocation_timestamp=2020-02-03T00:31:00.830Z, origin=Only For Testing, session_id=085b924b-25dc-43b0-aad1-bdc221af1691, session_timestamp=2020-02-03T00:31:00.830Z, thread-id=511}
[WARN ] 2020-02-03T00:31:00,845Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=e7ed5998-d7bc-40fe-9a3b-d0c9e6336a50, invocation_id=085b924b-25dc-43b0-aad1-bdc221af1691, invocation_timestamp=2020-02-03T00:31:00.830Z, origin=Only For Testing, session_id=085b924b-25dc-43b0-aad1-bdc221af1691, session_timestamp=2020-02-03T00:31:00.830Z, thread-id=511}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:39:16,084Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T00:39:20,569Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003911.398/nodes/0/cordapps] {}
[INFO ] 2020-02-03T00:39:20,575Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003911.398/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:39:20,595Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003911.398/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:39:20,696Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:39:21,228Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:39:21,309Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:39:21,310Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:39:21,311Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:39:21,427Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:39:11.355Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:39:24,705Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:39:24,707Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003911.398/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:39:24,708Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:39:24,709Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:39:24,768Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:39:24,772Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:39:26,615Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:39:27,127Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:39:27,180Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:39:27,196Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:39:27,197Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:39:27,512Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:39:27,522Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:39:27,523Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690367523) {}
[INFO ] 2020-02-03T00:39:27,528Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:39:27,660Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690367523) {}
[INFO ] 2020-02-03T00:39:27,709Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:39:27,725Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690367523) {}
[INFO ] 2020-02-03T00:39:27,752Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:39:27,822Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:39:27,825Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T00:39:27,827Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T00:39:28,130Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690367523) {}
[INFO ] 2020-02-03T00:39:28,146Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690367523) {}
[INFO ] 2020-02-03T00:39:28,152Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:39:28,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690367523) {}
[INFO ] 2020-02-03T00:39:28,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:39:28,159Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003911.398/nodes/1/cordapps] {}
[INFO ] 2020-02-03T00:39:28,160Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003911.398/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:39:28,160Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003911.398/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:39:28,236Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:39:28,246Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:39:28,271Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:39:28,271Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:39:28,271Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:39:28,284Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:39:11.355Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:39:28,854Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:39:28,855Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003911.398/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:39:28,855Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:39:28,857Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:39:28,858Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:39:28,858Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:39:28,985Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:39:28,997Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:39:29,000Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:39:29,002Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:39:29,017Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:39:29,017Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:39:29,118Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:39:29,124Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:39:29,125Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690369124) {}
[INFO ] 2020-02-03T00:39:29,127Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:39:29,141Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690369124) {}
[INFO ] 2020-02-03T00:39:29,155Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:39:29,173Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690369124) {}
[INFO ] 2020-02-03T00:39:29,192Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:39:29,228Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:39:29,236Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690369124) {}
[INFO ] 2020-02-03T00:39:29,239Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690367523) {}
[INFO ] 2020-02-03T00:39:29,241Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:39:29,251Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690369124) {}
[INFO ] 2020-02-03T00:39:29,254Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:39:29,263Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690369124) {}
[INFO ] 2020-02-03T00:39:29,264Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:39:29,265Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690369124) {}
[INFO ] 2020-02-03T00:39:29,266Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:39:29,269Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-003911.398/nodes/2/cordapps] {}
[INFO ] 2020-02-03T00:39:29,271Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003911.398/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:39:29,271Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-003911.398/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:39:29,285Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:39:29,296Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:39:29,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:39:29,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:39:29,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:39:29,320Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:39:11.355Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:39:29,729Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:39:29,732Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-003911.398/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:39:29,732Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:39:29,733Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:39:29,735Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:39:29,735Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:39:29,822Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:39:29,829Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:39:29,837Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:39:29,838Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:39:29,876Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:39:29,876Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:39:29,967Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:39:29,971Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:39:29,971Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690369971) {}
[INFO ] 2020-02-03T00:39:29,973Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:39:29,979Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690369971) {}
[INFO ] 2020-02-03T00:39:29,986Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:39:29,995Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690369971) {}
[INFO ] 2020-02-03T00:39:30,004Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:39:30,040Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83 uploader=app filename=null {}
[INFO ] 2020-02-03T00:39:30,047Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690369971) {}
[INFO ] 2020-02-03T00:39:30,055Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690367523) {}
[INFO ] 2020-02-03T00:39:30,057Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:39:30,071Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690369971) {}
[INFO ] 2020-02-03T00:39:30,074Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:39:30,084Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690369124) {}
[INFO ] 2020-02-03T00:39:30,086Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:39:30,094Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690369971) {}
[INFO ] 2020-02-03T00:39:30,097Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:39:30,104Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690369971) {}
[INFO ] 2020-02-03T00:39:30,104Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:39:30,105Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690369971) {}
[INFO ] 2020-02-03T00:39:30,105Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:39:30,294Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a598f37b-8000-4bec-985a-eca029bb94f8, invocation_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, invocation_timestamp=2020-02-03T00:39:30.126Z, origin=Only For Testing, session_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, session_timestamp=2020-02-03T00:39:30.126Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:39:30,298Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [a598f37b-8000-4bec-985a-eca029bb94f8] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1df2327f-4625-4ad6-a6fd-2c71aed421cb, timestamp: 2020-02-03T00:39:30.126Z, entityType: Invocation, sessionId=1df2327f-4625-4ad6-a6fd-2c71aed421cb, timestamp: 2020-02-03T00:39:30.126Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=79513DAC6140678BD938B94E9958794CC9B7E78FEBBAC5046C18018D6E169960), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@8c713b, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=658d1261-4118-442c-97bf-44deb7b4b905) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a598f37b-8000-4bec-985a-eca029bb94f8, invocation_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, invocation_timestamp=2020-02-03T00:39:30.126Z, origin=Only For Testing, session_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, session_timestamp=2020-02-03T00:39:30.126Z, thread-id=104}
[INFO ] 2020-02-03T00:39:30,300Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [a598f37b-8000-4bec-985a-eca029bb94f8] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a598f37b-8000-4bec-985a-eca029bb94f8, invocation_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, invocation_timestamp=2020-02-03T00:39:30.126Z, origin=Only For Testing, session_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, session_timestamp=2020-02-03T00:39:30.126Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:39:30,300Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [a598f37b-8000-4bec-985a-eca029bb94f8] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a598f37b-8000-4bec-985a-eca029bb94f8, invocation_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, invocation_timestamp=2020-02-03T00:39:30.126Z, origin=Only For Testing, session_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, session_timestamp=2020-02-03T00:39:30.126Z, thread-id=104}
[WARN ] 2020-02-03T00:39:30,318Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a598f37b-8000-4bec-985a-eca029bb94f8] errored, dumping all transitions:

 --- Transition of flow [a598f37b-8000-4bec-985a-eca029bb94f8] ---
  Timestamp: 2020-02-03T00:39:30.283Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a598f37b-8000-4bec-985a-eca029bb94f8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1df2327f-4625-4ad6-a6fd-2c71aed421cb, timestamp: 2020-02-03T00:39:30.126Z, entityType: Invocation, sessionId=1df2327f-4625-4ad6-a6fd-2c71aed421cb, timestamp: 2020-02-03T00:39:30.126Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=79513DAC6140678BD938B94E9958794CC9B7E78FEBBAC5046C18018D6E169960), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7f4cf17])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7f4cf17])
    SignalFlowHasStarted(flowId=[a598f37b-8000-4bec-985a-eca029bb94f8])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7f4cf17]
    []


 --- Transition of flow [a598f37b-8000-4bec-985a-eca029bb94f8] ---
  Timestamp: 2020-02-03T00:39:30.302Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4097860505500704493, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)


 --- Transition of flow [a598f37b-8000-4bec-985a-eca029bb94f8] ---
  Timestamp: 2020-02-03T00:39:30.305Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a598f37b-8000-4bec-985a-eca029bb94f8] ---
  Timestamp: 2020-02-03T00:39:30.311Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a598f37b-8000-4bec-985a-eca029bb94f8, invocation_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, invocation_timestamp=2020-02-03T00:39:30.126Z, origin=Only For Testing, session_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, session_timestamp=2020-02-03T00:39:30.126Z, thread-id=104}
[WARN ] 2020-02-03T00:39:30,319Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a598f37b-8000-4bec-985a-eca029bb94f8] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a598f37b-8000-4bec-985a-eca029bb94f8, invocation_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, invocation_timestamp=2020-02-03T00:39:30.126Z, origin=Only For Testing, session_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, session_timestamp=2020-02-03T00:39:30.126Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T00:39:30,325Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a598f37b-8000-4bec-985a-eca029bb94f8, invocation_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, invocation_timestamp=2020-02-03T00:39:30.126Z, origin=Only For Testing, session_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, session_timestamp=2020-02-03T00:39:30.126Z, thread-id=104}
[WARN ] 2020-02-03T00:39:30,389Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a598f37b-8000-4bec-985a-eca029bb94f8] errored, dumping all transitions:

 --- Transition of flow [a598f37b-8000-4bec-985a-eca029bb94f8] ---
  Timestamp: 2020-02-03T00:39:30.283Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a598f37b-8000-4bec-985a-eca029bb94f8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1df2327f-4625-4ad6-a6fd-2c71aed421cb, timestamp: 2020-02-03T00:39:30.126Z, entityType: Invocation, sessionId=1df2327f-4625-4ad6-a6fd-2c71aed421cb, timestamp: 2020-02-03T00:39:30.126Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=79513DAC6140678BD938B94E9958794CC9B7E78FEBBAC5046C18018D6E169960), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7f4cf17])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7f4cf17])
    SignalFlowHasStarted(flowId=[a598f37b-8000-4bec-985a-eca029bb94f8])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7f4cf17]
    []


 --- Transition of flow [a598f37b-8000-4bec-985a-eca029bb94f8] ---
  Timestamp: 2020-02-03T00:39:30.302Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4097860505500704493, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)


 --- Transition of flow [a598f37b-8000-4bec-985a-eca029bb94f8] ---
  Timestamp: 2020-02-03T00:39:30.305Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a598f37b-8000-4bec-985a-eca029bb94f8] ---
  Timestamp: 2020-02-03T00:39:30.311Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [a598f37b-8000-4bec-985a-eca029bb94f8] ---
  Timestamp: 2020-02-03T00:39:30.382Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4097860505500704493)], sessions=[], senderUUID=658d1261-4118-442c-97bf-44deb7b4b905)
    CreateTransaction
    RemoveCheckpoint(id=[a598f37b-8000-4bec-985a-eca029bb94f8])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=a598f37b-8000-4bec-985a-eca029bb94f8)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[a598f37b-8000-4bec-985a-eca029bb94f8], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4097860505500704493, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1df2327f-4625-4ad6-a6fd-2c71aed421cb, timestamp: 2020-02-03T00:39:30.126Z, entityType: Invocation, sessionId=1df2327f-4625-4ad6-a6fd-2c71aed421cb, timestamp: 2020-02-03T00:39:30.126Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=77A2CFB97E07EE5374FBE6820B5C87ED022EBA8226BB24D120AE2AAE75720D83), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=79513DAC6140678BD938B94E9958794CC9B7E78FEBBAC5046C18018D6E169960), errorState=Errored(errors=[FlowError(errorId=4097860505500704493, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@8c713b, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=658d1261-4118-442c-97bf-44deb7b4b905))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a598f37b-8000-4bec-985a-eca029bb94f8, invocation_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, invocation_timestamp=2020-02-03T00:39:30.126Z, origin=Only For Testing, session_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, session_timestamp=2020-02-03T00:39:30.126Z, thread-id=104}
[WARN ] 2020-02-03T00:39:30,389Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a598f37b-8000-4bec-985a-eca029bb94f8] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a598f37b-8000-4bec-985a-eca029bb94f8, invocation_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, invocation_timestamp=2020-02-03T00:39:30.126Z, origin=Only For Testing, session_id=1df2327f-4625-4ad6-a6fd-2c71aed421cb, session_timestamp=2020-02-03T00:39:30.126Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:46:11,949Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T00:46:17,892Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-004607.038/nodes/0/cordapps] {}
[INFO ] 2020-02-03T00:46:17,896Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-004607.038/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:46:17,914Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-004607.038/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:46:17,984Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:46:18,405Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:46:18,460Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:46:18,460Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:46:18,461Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:46:18,582Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:46:06.996Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:46:22,141Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:46:22,154Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-004607.038/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:46:22,154Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:46:22,156Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:46:22,223Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:46:22,229Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:46:23,916Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:46:24,426Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:46:24,466Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:46:24,480Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:46:24,480Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:46:24,802Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T00:46:24,816Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:46:24,818Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690784818) {}
[INFO ] 2020-02-03T00:46:24,828Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:46:24,959Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690784818) {}
[INFO ] 2020-02-03T00:46:25,017Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:46:25,065Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690784818) {}
[INFO ] 2020-02-03T00:46:25,117Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:46:25,168Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FF18959345E50887652A02546FE523E6AF43B1C686FD12EFFBD23BB5FD8BDA9F uploader=app filename=null {}
[INFO ] 2020-02-03T00:46:25,173Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T00:46:25,177Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T00:46:25,485Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690784818) {}
[INFO ] 2020-02-03T00:46:25,500Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690784818) {}
[INFO ] 2020-02-03T00:46:25,503Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:46:25,504Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690784818) {}
[INFO ] 2020-02-03T00:46:25,505Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:46:25,509Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-004607.038/nodes/1/cordapps] {}
[INFO ] 2020-02-03T00:46:25,510Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-004607.038/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:46:25,511Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-004607.038/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:46:25,542Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:46:25,554Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:46:25,581Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:46:25,581Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:46:25,581Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:46:25,585Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:46:06.996Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:46:26,274Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:46:26,278Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-004607.038/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:46:26,279Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:46:26,285Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:46:26,287Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:46:26,287Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:46:26,360Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:46:26,371Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:46:26,377Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:46:26,379Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:46:26,394Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:46:26,395Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:46:26,493Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:46:26,499Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:46:26,502Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690786502) {}
[INFO ] 2020-02-03T00:46:26,507Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:46:26,520Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690786502) {}
[INFO ] 2020-02-03T00:46:26,530Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:46:26,547Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690786502) {}
[INFO ] 2020-02-03T00:46:26,568Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:46:26,597Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FF18959345E50887652A02546FE523E6AF43B1C686FD12EFFBD23BB5FD8BDA9F uploader=app filename=null {}
[INFO ] 2020-02-03T00:46:26,603Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690786502) {}
[INFO ] 2020-02-03T00:46:26,612Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690784818) {}
[INFO ] 2020-02-03T00:46:26,613Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:46:26,623Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690786502) {}
[INFO ] 2020-02-03T00:46:26,624Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:46:26,633Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690786502) {}
[INFO ] 2020-02-03T00:46:26,633Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:46:26,633Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690786502) {}
[INFO ] 2020-02-03T00:46:26,633Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:46:26,635Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-004607.038/nodes/2/cordapps] {}
[INFO ] 2020-02-03T00:46:26,635Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-004607.038/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T00:46:26,636Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-004607.038/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T00:46:26,660Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T00:46:26,665Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T00:46:26,684Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:46:26,687Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:46:26,687Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T00:46:26,691Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T00:46:06.996Z
      epoch=1
  } {}
[INFO ] 2020-02-03T00:46:27,049Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T00:46:27,053Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-004607.038/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T00:46:27,053Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T00:46:27,054Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T00:46:27,058Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:46:27,058Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:46:27,194Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T00:46:27,208Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T00:46:27,213Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T00:46:27,214Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T00:46:27,229Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:46:27,229Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:46:27,330Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T00:46:27,334Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T00:46:27,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690787334) {}
[INFO ] 2020-02-03T00:46:27,336Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:46:27,343Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690787334) {}
[INFO ] 2020-02-03T00:46:27,349Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T00:46:27,359Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690787334) {}
[INFO ] 2020-02-03T00:46:27,370Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:46:27,393Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FF18959345E50887652A02546FE523E6AF43B1C686FD12EFFBD23BB5FD8BDA9F uploader=app filename=null {}
[INFO ] 2020-02-03T00:46:27,399Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690787334) {}
[INFO ] 2020-02-03T00:46:27,402Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580690784818) {}
[INFO ] 2020-02-03T00:46:27,403Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:46:27,412Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690787334) {}
[INFO ] 2020-02-03T00:46:27,413Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:46:27,425Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580690786502) {}
[INFO ] 2020-02-03T00:46:27,426Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:46:27,436Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690787334) {}
[INFO ] 2020-02-03T00:46:27,437Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T00:46:27,449Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690787334) {}
[INFO ] 2020-02-03T00:46:27,449Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:46:27,449Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580690787334) {}
[INFO ] 2020-02-03T00:46:27,450Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T00:46:27,630Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=406c815c-5199-4ff1-954e-f714bec9fd2a, invocation_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, invocation_timestamp=2020-02-03T00:46:27.474Z, origin=Only For Testing, session_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, session_timestamp=2020-02-03T00:46:27.474Z, thread-id=105}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:46:27,635Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [406c815c-5199-4ff1-954e-f714bec9fd2a] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=567006e9-55ee-490e-aaf7-edbc80c53a5d, timestamp: 2020-02-03T00:46:27.474Z, entityType: Invocation, sessionId=567006e9-55ee-490e-aaf7-edbc80c53a5d, timestamp: 2020-02-03T00:46:27.474Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=FF18959345E50887652A02546FE523E6AF43B1C686FD12EFFBD23BB5FD8BDA9F), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=5A1D5E4A00C7E355DF48A5EE8044353197B44AFA97030A3CC476A74C8EFEC48B), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@36ae67a3, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=707de613-088f-4604-ab65-041b70c5aaf4) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=406c815c-5199-4ff1-954e-f714bec9fd2a, invocation_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, invocation_timestamp=2020-02-03T00:46:27.474Z, origin=Only For Testing, session_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, session_timestamp=2020-02-03T00:46:27.474Z, thread-id=105}
[INFO ] 2020-02-03T00:46:27,636Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [406c815c-5199-4ff1-954e-f714bec9fd2a] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=406c815c-5199-4ff1-954e-f714bec9fd2a, invocation_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, invocation_timestamp=2020-02-03T00:46:27.474Z, origin=Only For Testing, session_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, session_timestamp=2020-02-03T00:46:27.474Z, thread-id=105}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T00:46:27,637Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [406c815c-5199-4ff1-954e-f714bec9fd2a] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=406c815c-5199-4ff1-954e-f714bec9fd2a, invocation_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, invocation_timestamp=2020-02-03T00:46:27.474Z, origin=Only For Testing, session_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, session_timestamp=2020-02-03T00:46:27.474Z, thread-id=105}
[WARN ] 2020-02-03T00:46:27,651Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [406c815c-5199-4ff1-954e-f714bec9fd2a] errored, dumping all transitions:

 --- Transition of flow [406c815c-5199-4ff1-954e-f714bec9fd2a] ---
  Timestamp: 2020-02-03T00:46:27.616Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[406c815c-5199-4ff1-954e-f714bec9fd2a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=567006e9-55ee-490e-aaf7-edbc80c53a5d, timestamp: 2020-02-03T00:46:27.474Z, entityType: Invocation, sessionId=567006e9-55ee-490e-aaf7-edbc80c53a5d, timestamp: 2020-02-03T00:46:27.474Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=FF18959345E50887652A02546FE523E6AF43B1C686FD12EFFBD23BB5FD8BDA9F), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=5A1D5E4A00C7E355DF48A5EE8044353197B44AFA97030A3CC476A74C8EFEC48B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@61853352])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@61853352])
    SignalFlowHasStarted(flowId=[406c815c-5199-4ff1-954e-f714bec9fd2a])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@61853352]
    []


 --- Transition of flow [406c815c-5199-4ff1-954e-f714bec9fd2a] ---
  Timestamp: 2020-02-03T00:46:27.638Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3744438197778294318, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)


 --- Transition of flow [406c815c-5199-4ff1-954e-f714bec9fd2a] ---
  Timestamp: 2020-02-03T00:46:27.643Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [406c815c-5199-4ff1-954e-f714bec9fd2a] ---
  Timestamp: 2020-02-03T00:46:27.645Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=406c815c-5199-4ff1-954e-f714bec9fd2a, invocation_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, invocation_timestamp=2020-02-03T00:46:27.474Z, origin=Only For Testing, session_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, session_timestamp=2020-02-03T00:46:27.474Z, thread-id=105}
[WARN ] 2020-02-03T00:46:27,651Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [406c815c-5199-4ff1-954e-f714bec9fd2a] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=406c815c-5199-4ff1-954e-f714bec9fd2a, invocation_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, invocation_timestamp=2020-02-03T00:46:27.474Z, origin=Only For Testing, session_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, session_timestamp=2020-02-03T00:46:27.474Z, thread-id=105}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T00:46:27,655Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=406c815c-5199-4ff1-954e-f714bec9fd2a, invocation_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, invocation_timestamp=2020-02-03T00:46:27.474Z, origin=Only For Testing, session_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, session_timestamp=2020-02-03T00:46:27.474Z, thread-id=105}
[WARN ] 2020-02-03T00:46:27,702Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [406c815c-5199-4ff1-954e-f714bec9fd2a] errored, dumping all transitions:

 --- Transition of flow [406c815c-5199-4ff1-954e-f714bec9fd2a] ---
  Timestamp: 2020-02-03T00:46:27.616Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[406c815c-5199-4ff1-954e-f714bec9fd2a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=567006e9-55ee-490e-aaf7-edbc80c53a5d, timestamp: 2020-02-03T00:46:27.474Z, entityType: Invocation, sessionId=567006e9-55ee-490e-aaf7-edbc80c53a5d, timestamp: 2020-02-03T00:46:27.474Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=FF18959345E50887652A02546FE523E6AF43B1C686FD12EFFBD23BB5FD8BDA9F), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=5A1D5E4A00C7E355DF48A5EE8044353197B44AFA97030A3CC476A74C8EFEC48B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@61853352])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@61853352])
    SignalFlowHasStarted(flowId=[406c815c-5199-4ff1-954e-f714bec9fd2a])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@61853352]
    []


 --- Transition of flow [406c815c-5199-4ff1-954e-f714bec9fd2a] ---
  Timestamp: 2020-02-03T00:46:27.638Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3744438197778294318, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)


 --- Transition of flow [406c815c-5199-4ff1-954e-f714bec9fd2a] ---
  Timestamp: 2020-02-03T00:46:27.643Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [406c815c-5199-4ff1-954e-f714bec9fd2a] ---
  Timestamp: 2020-02-03T00:46:27.645Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [406c815c-5199-4ff1-954e-f714bec9fd2a] ---
  Timestamp: 2020-02-03T00:46:27.699Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-3744438197778294318)], sessions=[], senderUUID=707de613-088f-4604-ab65-041b70c5aaf4)
    CreateTransaction
    RemoveCheckpoint(id=[406c815c-5199-4ff1-954e-f714bec9fd2a])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=406c815c-5199-4ff1-954e-f714bec9fd2a)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[406c815c-5199-4ff1-954e-f714bec9fd2a], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3744438197778294318, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=567006e9-55ee-490e-aaf7-edbc80c53a5d, timestamp: 2020-02-03T00:46:27.474Z, entityType: Invocation, sessionId=567006e9-55ee-490e-aaf7-edbc80c53a5d, timestamp: 2020-02-03T00:46:27.474Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=FF18959345E50887652A02546FE523E6AF43B1C686FD12EFFBD23BB5FD8BDA9F), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=5A1D5E4A00C7E355DF48A5EE8044353197B44AFA97030A3CC476A74C8EFEC48B), errorState=Errored(errors=[FlowError(errorId=-3744438197778294318, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@36ae67a3, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=707de613-088f-4604-ab65-041b70c5aaf4))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=406c815c-5199-4ff1-954e-f714bec9fd2a, invocation_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, invocation_timestamp=2020-02-03T00:46:27.474Z, origin=Only For Testing, session_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, session_timestamp=2020-02-03T00:46:27.474Z, thread-id=105}
[WARN ] 2020-02-03T00:46:27,702Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [406c815c-5199-4ff1-954e-f714bec9fd2a] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=406c815c-5199-4ff1-954e-f714bec9fd2a, invocation_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, invocation_timestamp=2020-02-03T00:46:27.474Z, origin=Only For Testing, session_id=567006e9-55ee-490e-aaf7-edbc80c53a5d, session_timestamp=2020-02-03T00:46:27.474Z, thread-id=105}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:12:38,621Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:12:57,437Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:12:58,675Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011252.664/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:12:58,679Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011252.664/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:12:58,699Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011252.664/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:12:58,782Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:12:59,287Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:12:59,350Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:12:59,351Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:12:59,352Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:12:59,491Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:12:52.620Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:13:03,006Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:13:03,009Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011252.664/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:13:03,009Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:13:03,010Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:13:03,074Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:03,078Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:04,878Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:05,422Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:13:05,493Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:13:05,509Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:13:05,515Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:13:05,762Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:13:05,773Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:13:05,773Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692385773) {}
[INFO ] 2020-02-03T01:13:05,778Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:05,910Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692385773) {}
[INFO ] 2020-02-03T01:13:05,958Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:13:05,980Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692385773) {}
[INFO ] 2020-02-03T01:13:06,026Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:06,081Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241 uploader=app filename=null {}
[INFO ] 2020-02-03T01:13:06,085Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:13:06,088Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:13:06,400Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692385773) {}
[INFO ] 2020-02-03T01:13:06,424Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692385773) {}
[INFO ] 2020-02-03T01:13:06,428Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:06,433Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692385773) {}
[INFO ] 2020-02-03T01:13:06,434Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:06,439Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011252.664/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:13:06,441Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011252.664/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:13:06,443Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011252.664/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:13:06,452Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:13:06,462Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:13:06,490Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:06,490Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:06,490Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:06,494Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:12:52.620Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:13:07,145Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:13:07,152Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011252.664/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:13:07,152Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:13:07,153Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:13:07,155Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:07,155Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:07,230Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:07,240Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:13:07,242Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:13:07,242Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:13:07,270Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:07,270Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:07,408Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:07,416Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:13:07,416Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692387416) {}
[INFO ] 2020-02-03T01:13:07,420Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:07,434Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692387416) {}
[INFO ] 2020-02-03T01:13:07,441Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:13:07,459Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692387416) {}
[INFO ] 2020-02-03T01:13:07,477Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:07,509Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241 uploader=app filename=null {}
[INFO ] 2020-02-03T01:13:07,522Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692387416) {}
[INFO ] 2020-02-03T01:13:07,533Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692385773) {}
[INFO ] 2020-02-03T01:13:07,535Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:07,546Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692387416) {}
[INFO ] 2020-02-03T01:13:07,547Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:07,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692387416) {}
[INFO ] 2020-02-03T01:13:07,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:07,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692387416) {}
[INFO ] 2020-02-03T01:13:07,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:07,561Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011252.664/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:13:07,562Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011252.664/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:13:07,562Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011252.664/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:13:07,599Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:13:07,605Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:13:07,626Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:07,626Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:07,626Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:07,629Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:12:52.620Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:13:08,094Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:13:08,095Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011252.664/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:13:08,095Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:13:08,096Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:13:08,100Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:08,101Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:08,170Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:08,178Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:13:08,181Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:13:08,181Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:13:08,193Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:08,193Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:08,313Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:08,318Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:13:08,319Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692388319) {}
[INFO ] 2020-02-03T01:13:08,322Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:08,330Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692388319) {}
[INFO ] 2020-02-03T01:13:08,339Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:13:08,354Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692388319) {}
[INFO ] 2020-02-03T01:13:08,378Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:08,412Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241 uploader=app filename=null {}
[INFO ] 2020-02-03T01:13:08,422Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692388319) {}
[INFO ] 2020-02-03T01:13:08,431Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692385773) {}
[INFO ] 2020-02-03T01:13:08,432Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:08,450Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692388319) {}
[INFO ] 2020-02-03T01:13:08,453Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:08,465Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692387416) {}
[INFO ] 2020-02-03T01:13:08,467Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:08,476Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692388319) {}
[INFO ] 2020-02-03T01:13:08,477Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:08,486Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692388319) {}
[INFO ] 2020-02-03T01:13:08,486Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:08,486Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692388319) {}
[INFO ] 2020-02-03T01:13:08,486Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:08,727Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=19d01962-fb9c-44a9-8a14-10f5838e3355, invocation_id=84194231-76fd-4419-90b0-64cc8118e237, invocation_timestamp=2020-02-03T01:13:08.522Z, origin=Only For Testing, session_id=84194231-76fd-4419-90b0-64cc8118e237, session_timestamp=2020-02-03T01:13:08.522Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:13:08,734Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [19d01962-fb9c-44a9-8a14-10f5838e3355] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=84194231-76fd-4419-90b0-64cc8118e237, timestamp: 2020-02-03T01:13:08.522Z, entityType: Invocation, sessionId=84194231-76fd-4419-90b0-64cc8118e237, timestamp: 2020-02-03T01:13:08.522Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=52792831A8404C4C7B6B1688138077E4188D6234042CB7F0B5ABA6C5258924D5), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@1364a83e, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=ce5aa47d-12ea-4069-859a-d7b02d8e6101) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=19d01962-fb9c-44a9-8a14-10f5838e3355, invocation_id=84194231-76fd-4419-90b0-64cc8118e237, invocation_timestamp=2020-02-03T01:13:08.522Z, origin=Only For Testing, session_id=84194231-76fd-4419-90b0-64cc8118e237, session_timestamp=2020-02-03T01:13:08.522Z, thread-id=104}
[INFO ] 2020-02-03T01:13:08,736Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [19d01962-fb9c-44a9-8a14-10f5838e3355] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=19d01962-fb9c-44a9-8a14-10f5838e3355, invocation_id=84194231-76fd-4419-90b0-64cc8118e237, invocation_timestamp=2020-02-03T01:13:08.522Z, origin=Only For Testing, session_id=84194231-76fd-4419-90b0-64cc8118e237, session_timestamp=2020-02-03T01:13:08.522Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:13:08,736Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [19d01962-fb9c-44a9-8a14-10f5838e3355] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=19d01962-fb9c-44a9-8a14-10f5838e3355, invocation_id=84194231-76fd-4419-90b0-64cc8118e237, invocation_timestamp=2020-02-03T01:13:08.522Z, origin=Only For Testing, session_id=84194231-76fd-4419-90b0-64cc8118e237, session_timestamp=2020-02-03T01:13:08.522Z, thread-id=104}
[WARN ] 2020-02-03T01:13:08,750Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [19d01962-fb9c-44a9-8a14-10f5838e3355] errored, dumping all transitions:

 --- Transition of flow [19d01962-fb9c-44a9-8a14-10f5838e3355] ---
  Timestamp: 2020-02-03T01:13:08.716Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[19d01962-fb9c-44a9-8a14-10f5838e3355], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=84194231-76fd-4419-90b0-64cc8118e237, timestamp: 2020-02-03T01:13:08.522Z, entityType: Invocation, sessionId=84194231-76fd-4419-90b0-64cc8118e237, timestamp: 2020-02-03T01:13:08.522Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=52792831A8404C4C7B6B1688138077E4188D6234042CB7F0B5ABA6C5258924D5), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@76cadea])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@76cadea])
    SignalFlowHasStarted(flowId=[19d01962-fb9c-44a9-8a14-10f5838e3355])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@76cadea]
    []


 --- Transition of flow [19d01962-fb9c-44a9-8a14-10f5838e3355] ---
  Timestamp: 2020-02-03T01:13:08.738Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3040413125870941317, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)


 --- Transition of flow [19d01962-fb9c-44a9-8a14-10f5838e3355] ---
  Timestamp: 2020-02-03T01:13:08.741Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [19d01962-fb9c-44a9-8a14-10f5838e3355] ---
  Timestamp: 2020-02-03T01:13:08.743Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=19d01962-fb9c-44a9-8a14-10f5838e3355, invocation_id=84194231-76fd-4419-90b0-64cc8118e237, invocation_timestamp=2020-02-03T01:13:08.522Z, origin=Only For Testing, session_id=84194231-76fd-4419-90b0-64cc8118e237, session_timestamp=2020-02-03T01:13:08.522Z, thread-id=104}
[WARN ] 2020-02-03T01:13:08,750Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [19d01962-fb9c-44a9-8a14-10f5838e3355] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=19d01962-fb9c-44a9-8a14-10f5838e3355, invocation_id=84194231-76fd-4419-90b0-64cc8118e237, invocation_timestamp=2020-02-03T01:13:08.522Z, origin=Only For Testing, session_id=84194231-76fd-4419-90b0-64cc8118e237, session_timestamp=2020-02-03T01:13:08.522Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:13:08,752Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=19d01962-fb9c-44a9-8a14-10f5838e3355, invocation_id=84194231-76fd-4419-90b0-64cc8118e237, invocation_timestamp=2020-02-03T01:13:08.522Z, origin=Only For Testing, session_id=84194231-76fd-4419-90b0-64cc8118e237, session_timestamp=2020-02-03T01:13:08.522Z, thread-id=104}
[WARN ] 2020-02-03T01:13:08,798Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [19d01962-fb9c-44a9-8a14-10f5838e3355] errored, dumping all transitions:

 --- Transition of flow [19d01962-fb9c-44a9-8a14-10f5838e3355] ---
  Timestamp: 2020-02-03T01:13:08.716Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[19d01962-fb9c-44a9-8a14-10f5838e3355], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=84194231-76fd-4419-90b0-64cc8118e237, timestamp: 2020-02-03T01:13:08.522Z, entityType: Invocation, sessionId=84194231-76fd-4419-90b0-64cc8118e237, timestamp: 2020-02-03T01:13:08.522Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=52792831A8404C4C7B6B1688138077E4188D6234042CB7F0B5ABA6C5258924D5), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@76cadea])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@76cadea])
    SignalFlowHasStarted(flowId=[19d01962-fb9c-44a9-8a14-10f5838e3355])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@76cadea]
    []


 --- Transition of flow [19d01962-fb9c-44a9-8a14-10f5838e3355] ---
  Timestamp: 2020-02-03T01:13:08.738Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3040413125870941317, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)


 --- Transition of flow [19d01962-fb9c-44a9-8a14-10f5838e3355] ---
  Timestamp: 2020-02-03T01:13:08.741Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [19d01962-fb9c-44a9-8a14-10f5838e3355] ---
  Timestamp: 2020-02-03T01:13:08.743Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [19d01962-fb9c-44a9-8a14-10f5838e3355] ---
  Timestamp: 2020-02-03T01:13:08.789Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=3040413125870941317)], sessions=[], senderUUID=ce5aa47d-12ea-4069-859a-d7b02d8e6101)
    CreateTransaction
    RemoveCheckpoint(id=[19d01962-fb9c-44a9-8a14-10f5838e3355])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=19d01962-fb9c-44a9-8a14-10f5838e3355)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[19d01962-fb9c-44a9-8a14-10f5838e3355], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=3040413125870941317, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=84194231-76fd-4419-90b0-64cc8118e237, timestamp: 2020-02-03T01:13:08.522Z, entityType: Invocation, sessionId=84194231-76fd-4419-90b0-64cc8118e237, timestamp: 2020-02-03T01:13:08.522Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=52792831A8404C4C7B6B1688138077E4188D6234042CB7F0B5ABA6C5258924D5), errorState=Errored(errors=[FlowError(errorId=3040413125870941317, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@1364a83e, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=ce5aa47d-12ea-4069-859a-d7b02d8e6101))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=19d01962-fb9c-44a9-8a14-10f5838e3355, invocation_id=84194231-76fd-4419-90b0-64cc8118e237, invocation_timestamp=2020-02-03T01:13:08.522Z, origin=Only For Testing, session_id=84194231-76fd-4419-90b0-64cc8118e237, session_timestamp=2020-02-03T01:13:08.522Z, thread-id=104}
[WARN ] 2020-02-03T01:13:08,798Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [19d01962-fb9c-44a9-8a14-10f5838e3355] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=19d01962-fb9c-44a9-8a14-10f5838e3355, invocation_id=84194231-76fd-4419-90b0-64cc8118e237, invocation_timestamp=2020-02-03T01:13:08.522Z, origin=Only For Testing, session_id=84194231-76fd-4419-90b0-64cc8118e237, session_timestamp=2020-02-03T01:13:08.522Z, thread-id=104}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:13:20,491Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:13:21,675Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011315.703/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:13:21,679Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011315.703/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:13:21,706Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011315.703/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:13:21,815Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:13:22,536Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:13:22,617Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:22,617Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:22,618Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:22,783Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:13:15.660Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:13:26,897Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:13:26,902Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011315.703/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:13:26,902Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:13:26,904Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:13:26,959Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:26,964Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:28,669Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:29,212Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:13:29,278Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:13:29,295Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:13:29,296Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:13:29,514Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:13:29,526Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:13:29,526Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692409526) {}
[INFO ] 2020-02-03T01:13:29,533Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:29,669Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692409526) {}
[INFO ] 2020-02-03T01:13:29,714Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:13:29,728Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692409526) {}
[INFO ] 2020-02-03T01:13:29,755Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:29,800Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241 uploader=app filename=null {}
[INFO ] 2020-02-03T01:13:29,802Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:13:29,805Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:13:30,106Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692409526) {}
[INFO ] 2020-02-03T01:13:30,125Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692409526) {}
[INFO ] 2020-02-03T01:13:30,127Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:30,128Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692409526) {}
[INFO ] 2020-02-03T01:13:30,129Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:30,133Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011315.703/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:13:30,134Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011315.703/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:13:30,136Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011315.703/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:13:30,171Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:13:30,180Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:13:30,207Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:30,208Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:30,208Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:30,211Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:13:15.660Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:13:30,682Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:13:30,684Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011315.703/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:13:30,684Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:13:30,695Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:13:30,702Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:30,703Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:30,818Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:30,827Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:13:30,832Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:13:30,833Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:13:30,849Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:30,850Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:30,965Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:30,969Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:13:30,970Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692410969) {}
[INFO ] 2020-02-03T01:13:30,971Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:30,979Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692410969) {}
[INFO ] 2020-02-03T01:13:30,985Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:13:31,007Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692410969) {}
[INFO ] 2020-02-03T01:13:31,015Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:31,058Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241 uploader=app filename=null {}
[INFO ] 2020-02-03T01:13:31,074Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692410969) {}
[INFO ] 2020-02-03T01:13:31,087Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692409526) {}
[INFO ] 2020-02-03T01:13:31,088Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:31,098Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692410969) {}
[INFO ] 2020-02-03T01:13:31,099Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:31,109Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692410969) {}
[INFO ] 2020-02-03T01:13:31,109Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:31,109Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692410969) {}
[INFO ] 2020-02-03T01:13:31,110Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:31,112Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011315.703/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:13:31,112Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011315.703/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:13:31,112Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011315.703/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:13:31,131Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:13:31,141Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:13:31,161Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:31,161Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:31,162Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:13:31,165Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:13:15.660Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:13:31,483Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:13:31,485Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011315.703/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:13:31,485Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:13:31,486Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:13:31,487Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:31,487Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:31,595Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:13:31,603Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:13:31,604Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:13:31,605Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:13:31,624Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:31,624Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:31,732Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:13:31,737Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:13:31,737Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692411737) {}
[INFO ] 2020-02-03T01:13:31,739Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:31,745Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692411737) {}
[INFO ] 2020-02-03T01:13:31,752Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:13:31,763Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692411737) {}
[INFO ] 2020-02-03T01:13:31,779Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:31,804Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241 uploader=app filename=null {}
[INFO ] 2020-02-03T01:13:31,814Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692411737) {}
[INFO ] 2020-02-03T01:13:31,818Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692409526) {}
[INFO ] 2020-02-03T01:13:31,819Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:31,831Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692411737) {}
[INFO ] 2020-02-03T01:13:31,833Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:31,843Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692410969) {}
[INFO ] 2020-02-03T01:13:31,845Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:31,855Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692411737) {}
[INFO ] 2020-02-03T01:13:31,857Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:13:31,868Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692411737) {}
[INFO ] 2020-02-03T01:13:31,868Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:31,868Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692411737) {}
[INFO ] 2020-02-03T01:13:31,868Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:13:32,081Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a448cd8-96df-4ab1-a863-e7d24b89a6bb, invocation_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, invocation_timestamp=2020-02-03T01:13:31.889Z, origin=Only For Testing, session_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, session_timestamp=2020-02-03T01:13:31.889Z, thread-id=106}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:13:32,086Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=3a794f96-ad9e-43ad-ad16-0937a247b6dd, timestamp: 2020-02-03T01:13:31.889Z, entityType: Invocation, sessionId=3a794f96-ad9e-43ad-ad16-0937a247b6dd, timestamp: 2020-02-03T01:13:31.889Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=8C95E137E48F0F747B1EA88CA905710BDC3A7629FC5F2C5D13E0B69802C70F43), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@747250e2, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=7585905c-864a-41fd-a7c9-1860f7f1bf6b) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a448cd8-96df-4ab1-a863-e7d24b89a6bb, invocation_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, invocation_timestamp=2020-02-03T01:13:31.889Z, origin=Only For Testing, session_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, session_timestamp=2020-02-03T01:13:31.889Z, thread-id=106}
[INFO ] 2020-02-03T01:13:32,087Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a448cd8-96df-4ab1-a863-e7d24b89a6bb, invocation_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, invocation_timestamp=2020-02-03T01:13:31.889Z, origin=Only For Testing, session_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, session_timestamp=2020-02-03T01:13:31.889Z, thread-id=106}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:13:32,088Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a448cd8-96df-4ab1-a863-e7d24b89a6bb, invocation_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, invocation_timestamp=2020-02-03T01:13:31.889Z, origin=Only For Testing, session_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, session_timestamp=2020-02-03T01:13:31.889Z, thread-id=106}
[WARN ] 2020-02-03T01:13:32,102Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] errored, dumping all transitions:

 --- Transition of flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] ---
  Timestamp: 2020-02-03T01:13:32.070Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3a448cd8-96df-4ab1-a863-e7d24b89a6bb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=3a794f96-ad9e-43ad-ad16-0937a247b6dd, timestamp: 2020-02-03T01:13:31.889Z, entityType: Invocation, sessionId=3a794f96-ad9e-43ad-ad16-0937a247b6dd, timestamp: 2020-02-03T01:13:31.889Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=8C95E137E48F0F747B1EA88CA905710BDC3A7629FC5F2C5D13E0B69802C70F43), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@16ba37ff])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@16ba37ff])
    SignalFlowHasStarted(flowId=[3a448cd8-96df-4ab1-a863-e7d24b89a6bb])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@16ba37ff]
    []


 --- Transition of flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] ---
  Timestamp: 2020-02-03T01:13:32.089Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5631254917327798249, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)


 --- Transition of flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] ---
  Timestamp: 2020-02-03T01:13:32.093Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] ---
  Timestamp: 2020-02-03T01:13:32.095Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a448cd8-96df-4ab1-a863-e7d24b89a6bb, invocation_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, invocation_timestamp=2020-02-03T01:13:31.889Z, origin=Only For Testing, session_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, session_timestamp=2020-02-03T01:13:31.889Z, thread-id=106}
[WARN ] 2020-02-03T01:13:32,102Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a448cd8-96df-4ab1-a863-e7d24b89a6bb, invocation_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, invocation_timestamp=2020-02-03T01:13:31.889Z, origin=Only For Testing, session_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, session_timestamp=2020-02-03T01:13:31.889Z, thread-id=106}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:13:32,104Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a448cd8-96df-4ab1-a863-e7d24b89a6bb, invocation_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, invocation_timestamp=2020-02-03T01:13:31.889Z, origin=Only For Testing, session_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, session_timestamp=2020-02-03T01:13:31.889Z, thread-id=106}
[WARN ] 2020-02-03T01:13:32,148Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] errored, dumping all transitions:

 --- Transition of flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] ---
  Timestamp: 2020-02-03T01:13:32.070Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3a448cd8-96df-4ab1-a863-e7d24b89a6bb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=3a794f96-ad9e-43ad-ad16-0937a247b6dd, timestamp: 2020-02-03T01:13:31.889Z, entityType: Invocation, sessionId=3a794f96-ad9e-43ad-ad16-0937a247b6dd, timestamp: 2020-02-03T01:13:31.889Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=8C95E137E48F0F747B1EA88CA905710BDC3A7629FC5F2C5D13E0B69802C70F43), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@16ba37ff])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@16ba37ff])
    SignalFlowHasStarted(flowId=[3a448cd8-96df-4ab1-a863-e7d24b89a6bb])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@16ba37ff]
    []


 --- Transition of flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] ---
  Timestamp: 2020-02-03T01:13:32.089Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5631254917327798249, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)


 --- Transition of flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] ---
  Timestamp: 2020-02-03T01:13:32.093Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] ---
  Timestamp: 2020-02-03T01:13:32.095Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] ---
  Timestamp: 2020-02-03T01:13:32.140Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5631254917327798249)], sessions=[], senderUUID=7585905c-864a-41fd-a7c9-1860f7f1bf6b)
    CreateTransaction
    RemoveCheckpoint(id=[3a448cd8-96df-4ab1-a863-e7d24b89a6bb])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=3a448cd8-96df-4ab1-a863-e7d24b89a6bb)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[3a448cd8-96df-4ab1-a863-e7d24b89a6bb], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5631254917327798249, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=3a794f96-ad9e-43ad-ad16-0937a247b6dd, timestamp: 2020-02-03T01:13:31.889Z, entityType: Invocation, sessionId=3a794f96-ad9e-43ad-ad16-0937a247b6dd, timestamp: 2020-02-03T01:13:31.889Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=683019C3829715495A1CAA2D4A15F34530379DDA14BE0FF79CC818ABF8E12241), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=8C95E137E48F0F747B1EA88CA905710BDC3A7629FC5F2C5D13E0B69802C70F43), errorState=Errored(errors=[FlowError(errorId=-5631254917327798249, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@747250e2, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=7585905c-864a-41fd-a7c9-1860f7f1bf6b))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a448cd8-96df-4ab1-a863-e7d24b89a6bb, invocation_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, invocation_timestamp=2020-02-03T01:13:31.889Z, origin=Only For Testing, session_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, session_timestamp=2020-02-03T01:13:31.889Z, thread-id=106}
[WARN ] 2020-02-03T01:13:32,148Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3a448cd8-96df-4ab1-a863-e7d24b89a6bb] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a448cd8-96df-4ab1-a863-e7d24b89a6bb, invocation_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, invocation_timestamp=2020-02-03T01:13:31.889Z, origin=Only For Testing, session_id=3a794f96-ad9e-43ad-ad16-0937a247b6dd, session_timestamp=2020-02-03T01:13:31.889Z, thread-id=106}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:14:54,326Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:15:00,314Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011449.560/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:15:00,318Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011449.560/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:15:00,338Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011449.560/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:15:00,430Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:15:00,922Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:15:00,979Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:15:00,980Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:15:00,980Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:15:01,110Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:14:49.516Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:15:04,489Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:15:04,504Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011449.560/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:15:04,504Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:15:04,505Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:15:04,588Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:15:04,592Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:15:06,484Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:15:07,024Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:15:07,085Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:15:07,102Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:15:07,103Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:15:07,418Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:15:07,443Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:15:07,443Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692507443) {}
[INFO ] 2020-02-03T01:15:07,448Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:15:07,605Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692507443) {}
[INFO ] 2020-02-03T01:15:07,660Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:15:07,702Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692507443) {}
[INFO ] 2020-02-03T01:15:07,749Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:15:07,797Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DA76B75E91A4F01DA34EF9ED1E2552243A00C2F082D3DFEFC31260350C7AD13 uploader=app filename=null {}
[INFO ] 2020-02-03T01:15:07,800Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:15:07,803Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:15:08,119Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692507443) {}
[INFO ] 2020-02-03T01:15:08,134Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692507443) {}
[INFO ] 2020-02-03T01:15:08,135Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:15:08,136Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692507443) {}
[INFO ] 2020-02-03T01:15:08,136Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:15:08,138Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011449.560/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:15:08,139Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011449.560/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:15:08,139Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011449.560/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:15:08,172Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:15:08,181Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:15:08,213Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:15:08,213Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:15:08,214Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:15:08,223Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:14:49.516Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:15:08,814Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:15:08,817Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011449.560/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:15:08,818Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:15:08,821Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:15:08,824Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:15:08,825Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:15:08,908Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:15:08,918Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:15:08,920Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:15:08,921Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:15:08,936Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:15:08,936Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:15:09,049Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:15:09,055Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:15:09,055Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692509055) {}
[INFO ] 2020-02-03T01:15:09,061Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:15:09,074Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692509055) {}
[INFO ] 2020-02-03T01:15:09,082Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:15:09,088Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692509055) {}
[INFO ] 2020-02-03T01:15:09,099Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:15:09,144Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DA76B75E91A4F01DA34EF9ED1E2552243A00C2F082D3DFEFC31260350C7AD13 uploader=app filename=null {}
[INFO ] 2020-02-03T01:15:09,152Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692509055) {}
[INFO ] 2020-02-03T01:15:09,155Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692507443) {}
[INFO ] 2020-02-03T01:15:09,156Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:15:09,175Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692509055) {}
[INFO ] 2020-02-03T01:15:09,177Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:15:09,187Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692509055) {}
[INFO ] 2020-02-03T01:15:09,188Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:15:09,189Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692509055) {}
[INFO ] 2020-02-03T01:15:09,190Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:15:09,192Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011449.560/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:15:09,194Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011449.560/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:15:09,195Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011449.560/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:15:09,225Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:15:09,235Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:15:09,258Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:15:09,258Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:15:09,258Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:15:09,262Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:14:49.516Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:15:09,641Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:15:09,644Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011449.560/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:15:09,644Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:15:09,645Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:15:09,647Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:15:09,648Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:15:09,752Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:15:09,761Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:15:09,764Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:15:09,765Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:15:09,783Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:15:09,783Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:15:09,906Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:15:09,912Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:15:09,913Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692509913) {}
[INFO ] 2020-02-03T01:15:09,916Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:15:09,923Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692509913) {}
[INFO ] 2020-02-03T01:15:09,931Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:15:09,943Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692509913) {}
[INFO ] 2020-02-03T01:15:09,958Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:15:09,976Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DA76B75E91A4F01DA34EF9ED1E2552243A00C2F082D3DFEFC31260350C7AD13 uploader=app filename=null {}
[INFO ] 2020-02-03T01:15:09,983Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692509913) {}
[INFO ] 2020-02-03T01:15:09,987Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692507443) {}
[INFO ] 2020-02-03T01:15:09,988Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:15:09,997Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692509913) {}
[INFO ] 2020-02-03T01:15:09,998Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:15:10,007Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692509055) {}
[INFO ] 2020-02-03T01:15:10,008Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:15:10,024Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692509913) {}
[INFO ] 2020-02-03T01:15:10,026Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:15:10,036Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692509913) {}
[INFO ] 2020-02-03T01:15:10,037Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:15:10,038Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692509913) {}
[INFO ] 2020-02-03T01:15:10,039Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:15:10,251Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5a46f013-5515-416a-b6f3-0d225d48cb35, invocation_id=447be4c3-9398-4f4e-86f9-54305feef66c, invocation_timestamp=2020-02-03T01:15:10.076Z, origin=Only For Testing, session_id=447be4c3-9398-4f4e-86f9-54305feef66c, session_timestamp=2020-02-03T01:15:10.076Z, thread-id=106}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:15:10,256Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [5a46f013-5515-416a-b6f3-0d225d48cb35] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=447be4c3-9398-4f4e-86f9-54305feef66c, timestamp: 2020-02-03T01:15:10.076Z, entityType: Invocation, sessionId=447be4c3-9398-4f4e-86f9-54305feef66c, timestamp: 2020-02-03T01:15:10.076Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=7DA76B75E91A4F01DA34EF9ED1E2552243A00C2F082D3DFEFC31260350C7AD13), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=9541837ABBD6FFDB47A985B302D7DE2906FBCB9F92489DEA19B6262D0C0CBB73), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@783375ba, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=45fd7c69-7381-40a4-b119-0fbdaa7aed9a) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5a46f013-5515-416a-b6f3-0d225d48cb35, invocation_id=447be4c3-9398-4f4e-86f9-54305feef66c, invocation_timestamp=2020-02-03T01:15:10.076Z, origin=Only For Testing, session_id=447be4c3-9398-4f4e-86f9-54305feef66c, session_timestamp=2020-02-03T01:15:10.076Z, thread-id=106}
[INFO ] 2020-02-03T01:15:10,257Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [5a46f013-5515-416a-b6f3-0d225d48cb35] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5a46f013-5515-416a-b6f3-0d225d48cb35, invocation_id=447be4c3-9398-4f4e-86f9-54305feef66c, invocation_timestamp=2020-02-03T01:15:10.076Z, origin=Only For Testing, session_id=447be4c3-9398-4f4e-86f9-54305feef66c, session_timestamp=2020-02-03T01:15:10.076Z, thread-id=106}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:15:10,285Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [5a46f013-5515-416a-b6f3-0d225d48cb35] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5a46f013-5515-416a-b6f3-0d225d48cb35, invocation_id=447be4c3-9398-4f4e-86f9-54305feef66c, invocation_timestamp=2020-02-03T01:15:10.076Z, origin=Only For Testing, session_id=447be4c3-9398-4f4e-86f9-54305feef66c, session_timestamp=2020-02-03T01:15:10.076Z, thread-id=106}
[WARN ] 2020-02-03T01:15:10,297Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5a46f013-5515-416a-b6f3-0d225d48cb35] errored, dumping all transitions:

 --- Transition of flow [5a46f013-5515-416a-b6f3-0d225d48cb35] ---
  Timestamp: 2020-02-03T01:15:10.238Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5a46f013-5515-416a-b6f3-0d225d48cb35], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=447be4c3-9398-4f4e-86f9-54305feef66c, timestamp: 2020-02-03T01:15:10.076Z, entityType: Invocation, sessionId=447be4c3-9398-4f4e-86f9-54305feef66c, timestamp: 2020-02-03T01:15:10.076Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=7DA76B75E91A4F01DA34EF9ED1E2552243A00C2F082D3DFEFC31260350C7AD13), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=9541837ABBD6FFDB47A985B302D7DE2906FBCB9F92489DEA19B6262D0C0CBB73), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7ca62982])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7ca62982])
    SignalFlowHasStarted(flowId=[5a46f013-5515-416a-b6f3-0d225d48cb35])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7ca62982]
    []


 --- Transition of flow [5a46f013-5515-416a-b6f3-0d225d48cb35] ---
  Timestamp: 2020-02-03T01:15:10.287Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3575334218335949139, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)


 --- Transition of flow [5a46f013-5515-416a-b6f3-0d225d48cb35] ---
  Timestamp: 2020-02-03T01:15:10.290Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5a46f013-5515-416a-b6f3-0d225d48cb35] ---
  Timestamp: 2020-02-03T01:15:10.291Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5a46f013-5515-416a-b6f3-0d225d48cb35, invocation_id=447be4c3-9398-4f4e-86f9-54305feef66c, invocation_timestamp=2020-02-03T01:15:10.076Z, origin=Only For Testing, session_id=447be4c3-9398-4f4e-86f9-54305feef66c, session_timestamp=2020-02-03T01:15:10.076Z, thread-id=106}
[WARN ] 2020-02-03T01:15:10,297Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5a46f013-5515-416a-b6f3-0d225d48cb35] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5a46f013-5515-416a-b6f3-0d225d48cb35, invocation_id=447be4c3-9398-4f4e-86f9-54305feef66c, invocation_timestamp=2020-02-03T01:15:10.076Z, origin=Only For Testing, session_id=447be4c3-9398-4f4e-86f9-54305feef66c, session_timestamp=2020-02-03T01:15:10.076Z, thread-id=106}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:15:10,299Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5a46f013-5515-416a-b6f3-0d225d48cb35, invocation_id=447be4c3-9398-4f4e-86f9-54305feef66c, invocation_timestamp=2020-02-03T01:15:10.076Z, origin=Only For Testing, session_id=447be4c3-9398-4f4e-86f9-54305feef66c, session_timestamp=2020-02-03T01:15:10.076Z, thread-id=106}
[WARN ] 2020-02-03T01:15:10,347Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5a46f013-5515-416a-b6f3-0d225d48cb35] errored, dumping all transitions:

 --- Transition of flow [5a46f013-5515-416a-b6f3-0d225d48cb35] ---
  Timestamp: 2020-02-03T01:15:10.238Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5a46f013-5515-416a-b6f3-0d225d48cb35], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=447be4c3-9398-4f4e-86f9-54305feef66c, timestamp: 2020-02-03T01:15:10.076Z, entityType: Invocation, sessionId=447be4c3-9398-4f4e-86f9-54305feef66c, timestamp: 2020-02-03T01:15:10.076Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=7DA76B75E91A4F01DA34EF9ED1E2552243A00C2F082D3DFEFC31260350C7AD13), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=9541837ABBD6FFDB47A985B302D7DE2906FBCB9F92489DEA19B6262D0C0CBB73), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7ca62982])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7ca62982])
    SignalFlowHasStarted(flowId=[5a46f013-5515-416a-b6f3-0d225d48cb35])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7ca62982]
    []


 --- Transition of flow [5a46f013-5515-416a-b6f3-0d225d48cb35] ---
  Timestamp: 2020-02-03T01:15:10.287Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3575334218335949139, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)


 --- Transition of flow [5a46f013-5515-416a-b6f3-0d225d48cb35] ---
  Timestamp: 2020-02-03T01:15:10.290Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5a46f013-5515-416a-b6f3-0d225d48cb35] ---
  Timestamp: 2020-02-03T01:15:10.291Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [5a46f013-5515-416a-b6f3-0d225d48cb35] ---
  Timestamp: 2020-02-03T01:15:10.340Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-3575334218335949139)], sessions=[], senderUUID=45fd7c69-7381-40a4-b119-0fbdaa7aed9a)
    CreateTransaction
    RemoveCheckpoint(id=[5a46f013-5515-416a-b6f3-0d225d48cb35])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=5a46f013-5515-416a-b6f3-0d225d48cb35)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[5a46f013-5515-416a-b6f3-0d225d48cb35], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3575334218335949139, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=447be4c3-9398-4f4e-86f9-54305feef66c, timestamp: 2020-02-03T01:15:10.076Z, entityType: Invocation, sessionId=447be4c3-9398-4f4e-86f9-54305feef66c, timestamp: 2020-02-03T01:15:10.076Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=7DA76B75E91A4F01DA34EF9ED1E2552243A00C2F082D3DFEFC31260350C7AD13), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=9541837ABBD6FFDB47A985B302D7DE2906FBCB9F92489DEA19B6262D0C0CBB73), errorState=Errored(errors=[FlowError(errorId=-3575334218335949139, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@783375ba, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=45fd7c69-7381-40a4-b119-0fbdaa7aed9a))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5a46f013-5515-416a-b6f3-0d225d48cb35, invocation_id=447be4c3-9398-4f4e-86f9-54305feef66c, invocation_timestamp=2020-02-03T01:15:10.076Z, origin=Only For Testing, session_id=447be4c3-9398-4f4e-86f9-54305feef66c, session_timestamp=2020-02-03T01:15:10.076Z, thread-id=106}
[WARN ] 2020-02-03T01:15:10,347Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5a46f013-5515-416a-b6f3-0d225d48cb35] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5a46f013-5515-416a-b6f3-0d225d48cb35, invocation_id=447be4c3-9398-4f4e-86f9-54305feef66c, invocation_timestamp=2020-02-03T01:15:10.076Z, origin=Only For Testing, session_id=447be4c3-9398-4f4e-86f9-54305feef66c, session_timestamp=2020-02-03T01:15:10.076Z, thread-id=106}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:18:49,226Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:18:55,351Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011844.640/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:18:55,354Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011844.640/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:18:55,377Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011844.640/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:18:55,468Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:18:55,947Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:18:56,006Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:18:56,006Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:18:56,007Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:18:56,135Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:18:44.597Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:18:59,392Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:18:59,405Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011844.640/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:18:59,405Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:18:59,407Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:18:59,477Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:18:59,481Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:19:01,194Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:19:01,716Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:19:01,759Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:19:01,809Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:19:01,810Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:19:02,042Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:19:02,060Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:19:02,062Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692742061) {}
[INFO ] 2020-02-03T01:19:02,070Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:19:02,198Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692742061) {}
[INFO ] 2020-02-03T01:19:02,245Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:19:02,260Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692742061) {}
[INFO ] 2020-02-03T01:19:02,293Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:19:02,347Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=8003211902975565B46C99713E20155EEB2CF71FFC3133D381FC21E89DE0BB05 uploader=app filename=null {}
[INFO ] 2020-02-03T01:19:02,350Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:19:02,354Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:19:02,663Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692742061) {}
[INFO ] 2020-02-03T01:19:02,689Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692742061) {}
[INFO ] 2020-02-03T01:19:02,690Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:19:02,690Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692742061) {}
[INFO ] 2020-02-03T01:19:02,690Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:19:02,694Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011844.640/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:19:02,695Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011844.640/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:19:02,695Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011844.640/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:19:02,735Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:19:02,746Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:19:02,772Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:19:02,772Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:19:02,772Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:19:02,776Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:18:44.597Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:19:03,411Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:19:03,415Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011844.640/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:19:03,415Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:19:03,419Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:19:03,421Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:19:03,421Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:19:03,510Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:19:03,518Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:19:03,520Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:19:03,521Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:19:03,537Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:19:03,537Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:19:03,650Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:19:03,653Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:19:03,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692743654) {}
[INFO ] 2020-02-03T01:19:03,658Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:19:03,678Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692743654) {}
[INFO ] 2020-02-03T01:19:03,686Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:19:03,697Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692743654) {}
[INFO ] 2020-02-03T01:19:03,707Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:19:03,727Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=8003211902975565B46C99713E20155EEB2CF71FFC3133D381FC21E89DE0BB05 uploader=app filename=null {}
[INFO ] 2020-02-03T01:19:03,734Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692743654) {}
[INFO ] 2020-02-03T01:19:03,747Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692742061) {}
[INFO ] 2020-02-03T01:19:03,748Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:19:03,762Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692743654) {}
[INFO ] 2020-02-03T01:19:03,777Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:19:03,787Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692743654) {}
[INFO ] 2020-02-03T01:19:03,788Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:19:03,790Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692743654) {}
[INFO ] 2020-02-03T01:19:03,791Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:19:03,794Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-011844.640/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:19:03,795Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011844.640/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:19:03,795Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-011844.640/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:19:03,821Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:19:03,830Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:19:03,850Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:19:03,850Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:19:03,850Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:19:03,855Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:18:44.597Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:19:04,262Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:19:04,264Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-011844.640/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:19:04,264Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:19:04,265Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:19:04,291Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:19:04,291Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:19:04,359Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:19:04,366Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:19:04,370Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:19:04,370Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:19:04,388Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:19:04,388Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:19:04,498Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:19:04,502Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:19:04,503Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692744502) {}
[INFO ] 2020-02-03T01:19:04,505Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:19:04,512Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692744502) {}
[INFO ] 2020-02-03T01:19:04,520Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:19:04,527Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692744502) {}
[INFO ] 2020-02-03T01:19:04,545Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:19:04,582Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=8003211902975565B46C99713E20155EEB2CF71FFC3133D381FC21E89DE0BB05 uploader=app filename=null {}
[INFO ] 2020-02-03T01:19:04,589Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692744502) {}
[INFO ] 2020-02-03T01:19:04,595Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692742061) {}
[INFO ] 2020-02-03T01:19:04,596Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:19:04,609Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692744502) {}
[INFO ] 2020-02-03T01:19:04,610Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:19:04,623Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692743654) {}
[INFO ] 2020-02-03T01:19:04,624Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:19:04,633Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692744502) {}
[INFO ] 2020-02-03T01:19:04,639Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:19:04,647Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692744502) {}
[INFO ] 2020-02-03T01:19:04,647Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:19:04,647Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692744502) {}
[INFO ] 2020-02-03T01:19:04,648Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:19:04,859Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=efc07c41-3f3d-4530-8004-80efee811dbf, invocation_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, invocation_timestamp=2020-02-03T01:19:04.670Z, origin=Only For Testing, session_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, session_timestamp=2020-02-03T01:19:04.670Z, thread-id=106}
java.lang.IllegalArgumentException: Unable to infer Contract class name because state class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate bootcamp.TokenState with @BelongsToContract, or supply an explicit contract parameter to addOutputState().
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:592) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:50) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:19:04,863Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [efc07c41-3f3d-4530-8004-80efee811dbf] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, timestamp: 2020-02-03T01:19:04.670Z, entityType: Invocation, sessionId=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, timestamp: 2020-02-03T01:19:04.670Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=8003211902975565B46C99713E20155EEB2CF71FFC3133D381FC21E89DE0BB05), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DEEC9867AFEBE471BCB8C87BF5ADDA022E826C36EDCC414ECF8D58C4C0C3A258), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@7ef9cd56, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=5f8961e2-7142-43fc-984e-6a3f954f0ce4) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=efc07c41-3f3d-4530-8004-80efee811dbf, invocation_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, invocation_timestamp=2020-02-03T01:19:04.670Z, origin=Only For Testing, session_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, session_timestamp=2020-02-03T01:19:04.670Z, thread-id=106}
[INFO ] 2020-02-03T01:19:04,865Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [efc07c41-3f3d-4530-8004-80efee811dbf] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=efc07c41-3f3d-4530-8004-80efee811dbf, invocation_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, invocation_timestamp=2020-02-03T01:19:04.670Z, origin=Only For Testing, session_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, session_timestamp=2020-02-03T01:19:04.670Z, thread-id=106}
java.lang.IllegalArgumentException: Unable to infer Contract class name because state class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate bootcamp.TokenState with @BelongsToContract, or supply an explicit contract parameter to addOutputState().
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:592) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:50) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:19:04,866Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [efc07c41-3f3d-4530-8004-80efee811dbf] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=efc07c41-3f3d-4530-8004-80efee811dbf, invocation_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, invocation_timestamp=2020-02-03T01:19:04.670Z, origin=Only For Testing, session_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, session_timestamp=2020-02-03T01:19:04.670Z, thread-id=106}
[WARN ] 2020-02-03T01:19:04,880Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [efc07c41-3f3d-4530-8004-80efee811dbf] errored, dumping all transitions:

 --- Transition of flow [efc07c41-3f3d-4530-8004-80efee811dbf] ---
  Timestamp: 2020-02-03T01:19:04.836Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[efc07c41-3f3d-4530-8004-80efee811dbf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, timestamp: 2020-02-03T01:19:04.670Z, entityType: Invocation, sessionId=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, timestamp: 2020-02-03T01:19:04.670Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=8003211902975565B46C99713E20155EEB2CF71FFC3133D381FC21E89DE0BB05), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DEEC9867AFEBE471BCB8C87BF5ADDA022E826C36EDCC414ECF8D58C4C0C3A258), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@62489027])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@62489027])
    SignalFlowHasStarted(flowId=[efc07c41-3f3d-4530-8004-80efee811dbf])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@62489027]
    []


 --- Transition of flow [efc07c41-3f3d-4530-8004-80efee811dbf] ---
  Timestamp: 2020-02-03T01:19:04.867Z
  Event: Error(exception=java.lang.IllegalArgumentException: Unable to infer Contract class name because state class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate bootcamp.TokenState with @BelongsToContract, or supply an explicit contract parameter to addOutputState().)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7009221334932579523, exception=java.lang.IllegalArgumentException: Unable to infer Contract class name because state class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate bootcamp.TokenState with @BelongsToContract, or supply an explicit contract parameter to addOutputState().)], propagatedIndex=0, propagating=false)


 --- Transition of flow [efc07c41-3f3d-4530-8004-80efee811dbf] ---
  Timestamp: 2020-02-03T01:19:04.871Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [efc07c41-3f3d-4530-8004-80efee811dbf] ---
  Timestamp: 2020-02-03T01:19:04.873Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=efc07c41-3f3d-4530-8004-80efee811dbf, invocation_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, invocation_timestamp=2020-02-03T01:19:04.670Z, origin=Only For Testing, session_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, session_timestamp=2020-02-03T01:19:04.670Z, thread-id=106}
[WARN ] 2020-02-03T01:19:04,880Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [efc07c41-3f3d-4530-8004-80efee811dbf] error [errorCode=rliwme, moreInformationAt=https://errors.corda.net/OS/4.0/rliwme] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=efc07c41-3f3d-4530-8004-80efee811dbf, invocation_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, invocation_timestamp=2020-02-03T01:19:04.670Z, origin=Only For Testing, session_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, session_timestamp=2020-02-03T01:19:04.670Z, thread-id=106}
java.lang.IllegalArgumentException: Unable to infer Contract class name because state class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate bootcamp.TokenState with @BelongsToContract, or supply an explicit contract parameter to addOutputState().
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:592) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:50) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:19:04,882Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=efc07c41-3f3d-4530-8004-80efee811dbf, invocation_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, invocation_timestamp=2020-02-03T01:19:04.670Z, origin=Only For Testing, session_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, session_timestamp=2020-02-03T01:19:04.670Z, thread-id=106}
[WARN ] 2020-02-03T01:19:04,953Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [efc07c41-3f3d-4530-8004-80efee811dbf] errored, dumping all transitions:

 --- Transition of flow [efc07c41-3f3d-4530-8004-80efee811dbf] ---
  Timestamp: 2020-02-03T01:19:04.836Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[efc07c41-3f3d-4530-8004-80efee811dbf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, timestamp: 2020-02-03T01:19:04.670Z, entityType: Invocation, sessionId=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, timestamp: 2020-02-03T01:19:04.670Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=8003211902975565B46C99713E20155EEB2CF71FFC3133D381FC21E89DE0BB05), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DEEC9867AFEBE471BCB8C87BF5ADDA022E826C36EDCC414ECF8D58C4C0C3A258), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@62489027])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@62489027])
    SignalFlowHasStarted(flowId=[efc07c41-3f3d-4530-8004-80efee811dbf])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@62489027]
    []


 --- Transition of flow [efc07c41-3f3d-4530-8004-80efee811dbf] ---
  Timestamp: 2020-02-03T01:19:04.867Z
  Event: Error(exception=java.lang.IllegalArgumentException: Unable to infer Contract class name because state class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate bootcamp.TokenState with @BelongsToContract, or supply an explicit contract parameter to addOutputState().)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7009221334932579523, exception=java.lang.IllegalArgumentException: Unable to infer Contract class name because state class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate bootcamp.TokenState with @BelongsToContract, or supply an explicit contract parameter to addOutputState().)], propagatedIndex=0, propagating=false)


 --- Transition of flow [efc07c41-3f3d-4530-8004-80efee811dbf] ---
  Timestamp: 2020-02-03T01:19:04.871Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [efc07c41-3f3d-4530-8004-80efee811dbf] ---
  Timestamp: 2020-02-03T01:19:04.873Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [efc07c41-3f3d-4530-8004-80efee811dbf] ---
  Timestamp: 2020-02-03T01:19:04.949Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=7009221334932579523)], sessions=[], senderUUID=5f8961e2-7142-43fc-984e-6a3f954f0ce4)
    CreateTransaction
    RemoveCheckpoint(id=[efc07c41-3f3d-4530-8004-80efee811dbf])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=efc07c41-3f3d-4530-8004-80efee811dbf)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[efc07c41-3f3d-4530-8004-80efee811dbf], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7009221334932579523, exception=java.lang.IllegalArgumentException: Unable to infer Contract class name because state class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate bootcamp.TokenState with @BelongsToContract, or supply an explicit contract parameter to addOutputState().)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, timestamp: 2020-02-03T01:19:04.670Z, entityType: Invocation, sessionId=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, timestamp: 2020-02-03T01:19:04.670Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=8003211902975565B46C99713E20155EEB2CF71FFC3133D381FC21E89DE0BB05), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DEEC9867AFEBE471BCB8C87BF5ADDA022E826C36EDCC414ECF8D58C4C0C3A258), errorState=Errored(errors=[FlowError(errorId=7009221334932579523, exception=java.lang.IllegalArgumentException: Unable to infer Contract class name because state class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate bootcamp.TokenState with @BelongsToContract, or supply an explicit contract parameter to addOutputState().)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@7ef9cd56, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=5f8961e2-7142-43fc-984e-6a3f954f0ce4))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=efc07c41-3f3d-4530-8004-80efee811dbf, invocation_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, invocation_timestamp=2020-02-03T01:19:04.670Z, origin=Only For Testing, session_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, session_timestamp=2020-02-03T01:19:04.670Z, thread-id=106}
[WARN ] 2020-02-03T01:19:04,953Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [efc07c41-3f3d-4530-8004-80efee811dbf] error [errorCode=rliwme, moreInformationAt=https://errors.corda.net/OS/4.0/rliwme] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=efc07c41-3f3d-4530-8004-80efee811dbf, invocation_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, invocation_timestamp=2020-02-03T01:19:04.670Z, origin=Only For Testing, session_id=cd5d2f10-7ae0-415d-939f-3c39ac36f0a8, session_timestamp=2020-02-03T01:19:04.670Z, thread-id=106}
java.lang.IllegalArgumentException: Unable to infer Contract class name because state class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate bootcamp.TokenState with @BelongsToContract, or supply an explicit contract parameter to addOutputState().
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:592) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:50) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:20:29,470Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:20:35,142Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-012024.827/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:20:35,145Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012024.827/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:20:35,162Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012024.827/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:20:35,234Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:20:35,667Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:20:35,724Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:20:35,725Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:20:35,726Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:20:35,854Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:20:24.782Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:20:39,223Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:20:39,225Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-012024.827/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:20:39,225Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:20:39,231Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:20:39,320Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:20:39,333Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:20:41,088Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:20:41,625Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:20:41,673Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:20:41,688Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:20:41,689Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:20:41,916Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:20:41,925Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:20:41,926Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692841926) {}
[INFO ] 2020-02-03T01:20:41,941Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:20:42,082Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692841926) {}
[INFO ] 2020-02-03T01:20:42,131Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:20:42,145Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692841926) {}
[INFO ] 2020-02-03T01:20:42,196Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:20:42,229Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=50329A401E630B8023FF236B03205E6E1F200968B106FAB03A77BFD3B6D7919B uploader=app filename=null {}
[INFO ] 2020-02-03T01:20:42,240Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:20:42,243Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:20:42,528Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692841926) {}
[INFO ] 2020-02-03T01:20:42,549Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692841926) {}
[INFO ] 2020-02-03T01:20:42,553Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:20:42,553Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692841926) {}
[INFO ] 2020-02-03T01:20:42,553Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:20:42,557Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-012024.827/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:20:42,559Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012024.827/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:20:42,561Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012024.827/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:20:42,610Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:20:42,617Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:20:42,643Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:20:42,644Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:20:42,644Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:20:42,648Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:20:24.782Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:20:43,242Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:20:43,252Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-012024.827/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:20:43,252Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:20:43,253Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:20:43,255Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:20:43,255Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:20:43,363Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:20:43,374Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:20:43,376Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:20:43,377Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:20:43,408Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:20:43,410Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:20:43,510Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:20:43,514Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:20:43,514Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692843514) {}
[INFO ] 2020-02-03T01:20:43,516Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:20:43,523Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692843514) {}
[INFO ] 2020-02-03T01:20:43,530Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:20:43,543Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692843514) {}
[INFO ] 2020-02-03T01:20:43,561Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:20:43,604Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=50329A401E630B8023FF236B03205E6E1F200968B106FAB03A77BFD3B6D7919B uploader=app filename=null {}
[INFO ] 2020-02-03T01:20:43,614Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692843514) {}
[INFO ] 2020-02-03T01:20:43,618Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692841926) {}
[INFO ] 2020-02-03T01:20:43,619Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:20:43,633Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692843514) {}
[INFO ] 2020-02-03T01:20:43,636Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:20:43,653Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692843514) {}
[INFO ] 2020-02-03T01:20:43,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:20:43,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692843514) {}
[INFO ] 2020-02-03T01:20:43,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:20:43,657Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-012024.827/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:20:43,657Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012024.827/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:20:43,657Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012024.827/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:20:43,680Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:20:43,691Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:20:43,713Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:20:43,714Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:20:43,715Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:20:43,718Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:20:24.782Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:20:44,161Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:20:44,162Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-012024.827/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:20:44,162Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:20:44,163Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:20:44,165Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:20:44,165Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:20:44,269Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:20:44,278Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:20:44,280Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:20:44,280Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:20:44,295Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:20:44,297Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:20:44,415Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:20:44,423Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:20:44,424Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692844423) {}
[INFO ] 2020-02-03T01:20:44,426Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:20:44,434Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692844423) {}
[INFO ] 2020-02-03T01:20:44,440Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:20:44,457Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692844423) {}
[INFO ] 2020-02-03T01:20:44,472Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:20:44,493Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=50329A401E630B8023FF236B03205E6E1F200968B106FAB03A77BFD3B6D7919B uploader=app filename=null {}
[INFO ] 2020-02-03T01:20:44,501Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692844423) {}
[INFO ] 2020-02-03T01:20:44,507Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692841926) {}
[INFO ] 2020-02-03T01:20:44,508Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:20:44,517Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692844423) {}
[INFO ] 2020-02-03T01:20:44,518Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:20:44,527Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692843514) {}
[INFO ] 2020-02-03T01:20:44,528Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:20:44,539Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692844423) {}
[INFO ] 2020-02-03T01:20:44,541Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:20:44,551Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692844423) {}
[INFO ] 2020-02-03T01:20:44,551Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:20:44,551Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692844423) {}
[INFO ] 2020-02-03T01:20:44,551Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:20:44,815Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4c26102d-71d3-4460-84ba-ab3d4eca8fcf, invocation_id=97d62349-9c51-45c0-8096-c33509595a5a, invocation_timestamp=2020-02-03T01:20:44.591Z, origin=Only For Testing, session_id=97d62349-9c51-45c0-8096-c33509595a5a, session_timestamp=2020-02-03T01:20:44.591Z, thread-id=106}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:50) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:20:44,819Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=97d62349-9c51-45c0-8096-c33509595a5a, timestamp: 2020-02-03T01:20:44.591Z, entityType: Invocation, sessionId=97d62349-9c51-45c0-8096-c33509595a5a, timestamp: 2020-02-03T01:20:44.591Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=50329A401E630B8023FF236B03205E6E1F200968B106FAB03A77BFD3B6D7919B), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F9E12926A3F0A88BF146E1812ABA37384F0F0FEFD914A1C8A530CE8817506B77), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@2e6b648f, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=b279ec34-4fc7-42ca-8c0c-c62940e41bcc) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4c26102d-71d3-4460-84ba-ab3d4eca8fcf, invocation_id=97d62349-9c51-45c0-8096-c33509595a5a, invocation_timestamp=2020-02-03T01:20:44.591Z, origin=Only For Testing, session_id=97d62349-9c51-45c0-8096-c33509595a5a, session_timestamp=2020-02-03T01:20:44.591Z, thread-id=106}
[INFO ] 2020-02-03T01:20:44,821Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4c26102d-71d3-4460-84ba-ab3d4eca8fcf, invocation_id=97d62349-9c51-45c0-8096-c33509595a5a, invocation_timestamp=2020-02-03T01:20:44.591Z, origin=Only For Testing, session_id=97d62349-9c51-45c0-8096-c33509595a5a, session_timestamp=2020-02-03T01:20:44.591Z, thread-id=106}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:50) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:20:44,822Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4c26102d-71d3-4460-84ba-ab3d4eca8fcf, invocation_id=97d62349-9c51-45c0-8096-c33509595a5a, invocation_timestamp=2020-02-03T01:20:44.591Z, origin=Only For Testing, session_id=97d62349-9c51-45c0-8096-c33509595a5a, session_timestamp=2020-02-03T01:20:44.591Z, thread-id=106}
[WARN ] 2020-02-03T01:20:44,835Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] errored, dumping all transitions:

 --- Transition of flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] ---
  Timestamp: 2020-02-03T01:20:44.798Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4c26102d-71d3-4460-84ba-ab3d4eca8fcf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=97d62349-9c51-45c0-8096-c33509595a5a, timestamp: 2020-02-03T01:20:44.591Z, entityType: Invocation, sessionId=97d62349-9c51-45c0-8096-c33509595a5a, timestamp: 2020-02-03T01:20:44.591Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=50329A401E630B8023FF236B03205E6E1F200968B106FAB03A77BFD3B6D7919B), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F9E12926A3F0A88BF146E1812ABA37384F0F0FEFD914A1C8A530CE8817506B77), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@510f9ed9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@510f9ed9])
    SignalFlowHasStarted(flowId=[4c26102d-71d3-4460-84ba-ab3d4eca8fcf])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@510f9ed9]
    []


 --- Transition of flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] ---
  Timestamp: 2020-02-03T01:20:44.823Z
  Event: Error(exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-745042777123330224, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)], propagatedIndex=0, propagating=false)


 --- Transition of flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] ---
  Timestamp: 2020-02-03T01:20:44.826Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] ---
  Timestamp: 2020-02-03T01:20:44.829Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4c26102d-71d3-4460-84ba-ab3d4eca8fcf, invocation_id=97d62349-9c51-45c0-8096-c33509595a5a, invocation_timestamp=2020-02-03T01:20:44.591Z, origin=Only For Testing, session_id=97d62349-9c51-45c0-8096-c33509595a5a, session_timestamp=2020-02-03T01:20:44.591Z, thread-id=106}
[WARN ] 2020-02-03T01:20:44,835Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] error [errorCode=ob2okw, moreInformationAt=https://errors.corda.net/OS/4.0/ob2okw] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4c26102d-71d3-4460-84ba-ab3d4eca8fcf, invocation_id=97d62349-9c51-45c0-8096-c33509595a5a, invocation_timestamp=2020-02-03T01:20:44.591Z, origin=Only For Testing, session_id=97d62349-9c51-45c0-8096-c33509595a5a, session_timestamp=2020-02-03T01:20:44.591Z, thread-id=106}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:50) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:20:44,837Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4c26102d-71d3-4460-84ba-ab3d4eca8fcf, invocation_id=97d62349-9c51-45c0-8096-c33509595a5a, invocation_timestamp=2020-02-03T01:20:44.591Z, origin=Only For Testing, session_id=97d62349-9c51-45c0-8096-c33509595a5a, session_timestamp=2020-02-03T01:20:44.591Z, thread-id=106}
[WARN ] 2020-02-03T01:20:44,886Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] errored, dumping all transitions:

 --- Transition of flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] ---
  Timestamp: 2020-02-03T01:20:44.798Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4c26102d-71d3-4460-84ba-ab3d4eca8fcf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=97d62349-9c51-45c0-8096-c33509595a5a, timestamp: 2020-02-03T01:20:44.591Z, entityType: Invocation, sessionId=97d62349-9c51-45c0-8096-c33509595a5a, timestamp: 2020-02-03T01:20:44.591Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=50329A401E630B8023FF236B03205E6E1F200968B106FAB03A77BFD3B6D7919B), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F9E12926A3F0A88BF146E1812ABA37384F0F0FEFD914A1C8A530CE8817506B77), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@510f9ed9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@510f9ed9])
    SignalFlowHasStarted(flowId=[4c26102d-71d3-4460-84ba-ab3d4eca8fcf])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@510f9ed9]
    []


 --- Transition of flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] ---
  Timestamp: 2020-02-03T01:20:44.823Z
  Event: Error(exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-745042777123330224, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)], propagatedIndex=0, propagating=false)


 --- Transition of flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] ---
  Timestamp: 2020-02-03T01:20:44.826Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] ---
  Timestamp: 2020-02-03T01:20:44.829Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] ---
  Timestamp: 2020-02-03T01:20:44.863Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-745042777123330224)], sessions=[], senderUUID=b279ec34-4fc7-42ca-8c0c-c62940e41bcc)
    CreateTransaction
    RemoveCheckpoint(id=[4c26102d-71d3-4460-84ba-ab3d4eca8fcf])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=4c26102d-71d3-4460-84ba-ab3d4eca8fcf)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[4c26102d-71d3-4460-84ba-ab3d4eca8fcf], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-745042777123330224, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=97d62349-9c51-45c0-8096-c33509595a5a, timestamp: 2020-02-03T01:20:44.591Z, entityType: Invocation, sessionId=97d62349-9c51-45c0-8096-c33509595a5a, timestamp: 2020-02-03T01:20:44.591Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=50329A401E630B8023FF236B03205E6E1F200968B106FAB03A77BFD3B6D7919B), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F9E12926A3F0A88BF146E1812ABA37384F0F0FEFD914A1C8A530CE8817506B77), errorState=Errored(errors=[FlowError(errorId=-745042777123330224, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@2e6b648f, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=b279ec34-4fc7-42ca-8c0c-c62940e41bcc))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4c26102d-71d3-4460-84ba-ab3d4eca8fcf, invocation_id=97d62349-9c51-45c0-8096-c33509595a5a, invocation_timestamp=2020-02-03T01:20:44.591Z, origin=Only For Testing, session_id=97d62349-9c51-45c0-8096-c33509595a5a, session_timestamp=2020-02-03T01:20:44.591Z, thread-id=106}
[WARN ] 2020-02-03T01:20:44,886Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4c26102d-71d3-4460-84ba-ab3d4eca8fcf] error [errorCode=ob2okw, moreInformationAt=https://errors.corda.net/OS/4.0/ob2okw] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4c26102d-71d3-4460-84ba-ab3d4eca8fcf, invocation_id=97d62349-9c51-45c0-8096-c33509595a5a, invocation_timestamp=2020-02-03T01:20:44.591Z, origin=Only For Testing, session_id=97d62349-9c51-45c0-8096-c33509595a5a, session_timestamp=2020-02-03T01:20:44.591Z, thread-id=106}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:50) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:22:12,429Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:22:18,163Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-012207.769/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:22:18,166Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012207.769/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:22:18,184Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012207.769/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:22:18,250Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:22:18,676Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:22:18,734Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:22:18,735Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:22:18,736Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:22:18,861Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:22:07.727Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:22:22,175Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:22:22,177Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-012207.769/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:22:22,177Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:22:22,179Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:22:22,289Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:22:22,322Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:22:24,146Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:22:24,656Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:22:24,707Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:22:24,722Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:22:24,722Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:22:24,949Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:22:24,962Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:22:24,963Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692944963) {}
[INFO ] 2020-02-03T01:22:24,971Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:22:25,115Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692944963) {}
[INFO ] 2020-02-03T01:22:25,165Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:22:25,193Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692944963) {}
[INFO ] 2020-02-03T01:22:25,230Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:22:25,289Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D2E51BA1597EADA90CD75AE6071B2438ACF75E1F6A80C31FB8F78C040A6841CC uploader=app filename=null {}
[INFO ] 2020-02-03T01:22:25,293Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:22:25,296Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:22:25,586Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692944963) {}
[INFO ] 2020-02-03T01:22:25,600Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692944963) {}
[INFO ] 2020-02-03T01:22:25,601Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:22:25,603Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692944963) {}
[INFO ] 2020-02-03T01:22:25,603Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:22:25,607Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-012207.769/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:22:25,607Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012207.769/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:22:25,607Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012207.769/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:22:25,643Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:22:25,651Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:22:25,695Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:22:25,697Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:22:25,697Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:22:25,700Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:22:07.727Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:22:26,302Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:22:26,304Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-012207.769/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:22:26,304Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:22:26,305Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:22:26,314Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:22:26,314Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:22:26,409Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:22:26,419Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:22:26,423Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:22:26,424Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:22:26,440Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:22:26,440Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:22:26,533Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:22:26,540Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:22:26,540Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692946540) {}
[INFO ] 2020-02-03T01:22:26,543Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:22:26,553Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692946540) {}
[INFO ] 2020-02-03T01:22:26,559Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:22:26,571Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692946540) {}
[INFO ] 2020-02-03T01:22:26,581Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:22:26,613Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D2E51BA1597EADA90CD75AE6071B2438ACF75E1F6A80C31FB8F78C040A6841CC uploader=app filename=null {}
[INFO ] 2020-02-03T01:22:26,626Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692946540) {}
[INFO ] 2020-02-03T01:22:26,641Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692944963) {}
[INFO ] 2020-02-03T01:22:26,642Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:22:26,656Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692946540) {}
[INFO ] 2020-02-03T01:22:26,657Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:22:26,666Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692946540) {}
[INFO ] 2020-02-03T01:22:26,666Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:22:26,666Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692946540) {}
[INFO ] 2020-02-03T01:22:26,666Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:22:26,671Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-012207.769/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:22:26,671Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012207.769/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:22:26,671Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-012207.769/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:22:26,697Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:22:26,703Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:22:26,721Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:22:26,721Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:22:26,721Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:22:26,725Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:22:07.727Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:22:27,155Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:22:27,157Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-012207.769/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:22:27,157Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:22:27,158Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:22:27,160Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:22:27,160Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:22:27,233Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:22:27,243Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:22:27,245Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:22:27,246Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:22:27,258Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:22:27,258Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:22:27,342Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:22:27,347Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:22:27,347Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692947347) {}
[INFO ] 2020-02-03T01:22:27,350Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:22:27,356Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692947347) {}
[INFO ] 2020-02-03T01:22:27,363Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:22:27,379Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692947347) {}
[INFO ] 2020-02-03T01:22:27,407Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:22:27,413Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D2E51BA1597EADA90CD75AE6071B2438ACF75E1F6A80C31FB8F78C040A6841CC uploader=app filename=null {}
[INFO ] 2020-02-03T01:22:27,421Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692947347) {}
[INFO ] 2020-02-03T01:22:27,424Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580692944963) {}
[INFO ] 2020-02-03T01:22:27,425Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:22:27,437Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692947347) {}
[INFO ] 2020-02-03T01:22:27,438Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:22:27,447Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580692946540) {}
[INFO ] 2020-02-03T01:22:27,448Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:22:27,456Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692947347) {}
[INFO ] 2020-02-03T01:22:27,457Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:22:27,468Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692947347) {}
[INFO ] 2020-02-03T01:22:27,469Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:22:27,469Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580692947347) {}
[INFO ] 2020-02-03T01:22:27,469Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:22:27,667Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
[WARN ] 2020-02-03T01:22:27,667Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
[INFO ] 2020-02-03T01:22:27,682Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
java.lang.IllegalStateException: A transaction must contain at least one command
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:74) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:22:27,686Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=0384de4f-f385-4c9e-80e1-4604a2d02844, timestamp: 2020-02-03T01:22:27.492Z, entityType: Invocation, sessionId=0384de4f-f385-4c9e-80e1-4604a2d02844, timestamp: 2020-02-03T01:22:27.492Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=D2E51BA1597EADA90CD75AE6071B2438ACF75E1F6A80C31FB8F78C040A6841CC), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=4F4658325EB1DDA1770600B6C6B79F9B904D81C079867F9ED01B03A2DFD912FC), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@6aa3a49, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=e418e9d4-35d9-4713-879c-85a097928658) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
[INFO ] 2020-02-03T01:22:27,687Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
java.lang.IllegalStateException: A transaction must contain at least one command
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:74) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:22:27,688Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
[WARN ] 2020-02-03T01:22:27,702Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] errored, dumping all transitions:

 --- Transition of flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] ---
  Timestamp: 2020-02-03T01:22:27.638Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ef7ec63b-0598-4b24-9ff0-bfbf358128ba], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=0384de4f-f385-4c9e-80e1-4604a2d02844, timestamp: 2020-02-03T01:22:27.492Z, entityType: Invocation, sessionId=0384de4f-f385-4c9e-80e1-4604a2d02844, timestamp: 2020-02-03T01:22:27.492Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=D2E51BA1597EADA90CD75AE6071B2438ACF75E1F6A80C31FB8F78C040A6841CC), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=4F4658325EB1DDA1770600B6C6B79F9B904D81C079867F9ED01B03A2DFD912FC), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@cd0d895])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@cd0d895])
    SignalFlowHasStarted(flowId=[ef7ec63b-0598-4b24-9ff0-bfbf358128ba])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@cd0d895]
    []


 --- Transition of flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] ---
  Timestamp: 2020-02-03T01:22:27.690Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one command)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3023553892552722636, exception=java.lang.IllegalStateException: A transaction must contain at least one command)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] ---
  Timestamp: 2020-02-03T01:22:27.693Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] ---
  Timestamp: 2020-02-03T01:22:27.696Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
[WARN ] 2020-02-03T01:22:27,702Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.0/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
java.lang.IllegalStateException: A transaction must contain at least one command
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:74) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:22:27,705Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
[WARN ] 2020-02-03T01:22:27,733Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] errored, dumping all transitions:

 --- Transition of flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] ---
  Timestamp: 2020-02-03T01:22:27.638Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ef7ec63b-0598-4b24-9ff0-bfbf358128ba], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=0384de4f-f385-4c9e-80e1-4604a2d02844, timestamp: 2020-02-03T01:22:27.492Z, entityType: Invocation, sessionId=0384de4f-f385-4c9e-80e1-4604a2d02844, timestamp: 2020-02-03T01:22:27.492Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=D2E51BA1597EADA90CD75AE6071B2438ACF75E1F6A80C31FB8F78C040A6841CC), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=4F4658325EB1DDA1770600B6C6B79F9B904D81C079867F9ED01B03A2DFD912FC), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@cd0d895])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@cd0d895])
    SignalFlowHasStarted(flowId=[ef7ec63b-0598-4b24-9ff0-bfbf358128ba])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@cd0d895]
    []


 --- Transition of flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] ---
  Timestamp: 2020-02-03T01:22:27.690Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one command)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3023553892552722636, exception=java.lang.IllegalStateException: A transaction must contain at least one command)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] ---
  Timestamp: 2020-02-03T01:22:27.693Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] ---
  Timestamp: 2020-02-03T01:22:27.696Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] ---
  Timestamp: 2020-02-03T01:22:27.729Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=3023553892552722636)], sessions=[], senderUUID=e418e9d4-35d9-4713-879c-85a097928658)
    CreateTransaction
    RemoveCheckpoint(id=[ef7ec63b-0598-4b24-9ff0-bfbf358128ba])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=ef7ec63b-0598-4b24-9ff0-bfbf358128ba)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[ef7ec63b-0598-4b24-9ff0-bfbf358128ba], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=3023553892552722636, exception=java.lang.IllegalStateException: A transaction must contain at least one command)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=0384de4f-f385-4c9e-80e1-4604a2d02844, timestamp: 2020-02-03T01:22:27.492Z, entityType: Invocation, sessionId=0384de4f-f385-4c9e-80e1-4604a2d02844, timestamp: 2020-02-03T01:22:27.492Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=D2E51BA1597EADA90CD75AE6071B2438ACF75E1F6A80C31FB8F78C040A6841CC), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=4F4658325EB1DDA1770600B6C6B79F9B904D81C079867F9ED01B03A2DFD912FC), errorState=Errored(errors=[FlowError(errorId=3023553892552722636, exception=java.lang.IllegalStateException: A transaction must contain at least one command)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@6aa3a49, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=e418e9d4-35d9-4713-879c-85a097928658))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
[WARN ] 2020-02-03T01:22:27,733Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [ef7ec63b-0598-4b24-9ff0-bfbf358128ba] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.0/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef7ec63b-0598-4b24-9ff0-bfbf358128ba, invocation_id=0384de4f-f385-4c9e-80e1-4604a2d02844, invocation_timestamp=2020-02-03T01:22:27.492Z, origin=Only For Testing, session_id=0384de4f-f385-4c9e-80e1-4604a2d02844, session_timestamp=2020-02-03T01:22:27.492Z, thread-id=104}
java.lang.IllegalStateException: A transaction must contain at least one command
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:74) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:31:10,504Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:31:16,417Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013105.934/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:31:16,421Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013105.934/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:31:16,440Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013105.934/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:31:16,516Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:31:17,008Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:31:17,066Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:31:17,066Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:31:17,067Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:31:17,193Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:31:05.891Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:31:20,547Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:31:20,562Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013105.934/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:31:20,562Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:31:20,564Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:31:20,679Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:31:20,683Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:31:22,406Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:31:22,936Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:31:23,006Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:31:23,040Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:31:23,042Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:31:23,292Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:31:23,304Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:31:23,305Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693483304) {}
[INFO ] 2020-02-03T01:31:23,312Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:31:23,439Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693483304) {}
[INFO ] 2020-02-03T01:31:23,490Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:31:23,517Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693483304) {}
[INFO ] 2020-02-03T01:31:23,557Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:31:23,604Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=5CEDD21619878DFC59DAD78F6391E22A47352D1B93C42D64DA270747B4B78073 uploader=app filename=null {}
[INFO ] 2020-02-03T01:31:23,613Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:31:23,616Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:31:23,921Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693483304) {}
[INFO ] 2020-02-03T01:31:23,939Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693483304) {}
[INFO ] 2020-02-03T01:31:23,941Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:31:23,941Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693483304) {}
[INFO ] 2020-02-03T01:31:23,941Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:31:23,946Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013105.934/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:31:23,947Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013105.934/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:31:23,947Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013105.934/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:31:23,976Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:31:23,984Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:31:24,007Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:31:24,007Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:31:24,008Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:31:24,012Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:31:05.891Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:31:24,597Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:31:24,601Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013105.934/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:31:24,604Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:31:24,608Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:31:24,611Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:31:24,611Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:31:24,687Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:31:24,697Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:31:24,702Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:31:24,703Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:31:24,729Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:31:24,729Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:31:24,843Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:31:24,847Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:31:24,847Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693484847) {}
[INFO ] 2020-02-03T01:31:24,849Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:31:24,859Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693484847) {}
[INFO ] 2020-02-03T01:31:24,867Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:31:24,878Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693484847) {}
[INFO ] 2020-02-03T01:31:24,899Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:31:24,940Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=5CEDD21619878DFC59DAD78F6391E22A47352D1B93C42D64DA270747B4B78073 uploader=app filename=null {}
[INFO ] 2020-02-03T01:31:24,948Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693484847) {}
[INFO ] 2020-02-03T01:31:24,957Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693483304) {}
[INFO ] 2020-02-03T01:31:24,958Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:31:24,973Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693484847) {}
[INFO ] 2020-02-03T01:31:24,980Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:31:24,989Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693484847) {}
[INFO ] 2020-02-03T01:31:24,989Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:31:24,989Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693484847) {}
[INFO ] 2020-02-03T01:31:24,989Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:31:24,992Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013105.934/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:31:24,993Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013105.934/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:31:24,993Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013105.934/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:31:25,017Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:31:25,029Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:31:25,046Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:31:25,046Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:31:25,046Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:31:25,049Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:31:05.891Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:31:25,411Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:31:25,419Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013105.934/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:31:25,419Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:31:25,421Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:31:25,423Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:31:25,435Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:31:25,567Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:31:25,575Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:31:25,577Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:31:25,577Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:31:25,590Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:31:25,590Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:31:25,745Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:31:25,749Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:31:25,749Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693485749) {}
[INFO ] 2020-02-03T01:31:25,752Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:31:25,759Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693485749) {}
[INFO ] 2020-02-03T01:31:25,765Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:31:25,783Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693485749) {}
[INFO ] 2020-02-03T01:31:25,801Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:31:25,856Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=5CEDD21619878DFC59DAD78F6391E22A47352D1B93C42D64DA270747B4B78073 uploader=app filename=null {}
[INFO ] 2020-02-03T01:31:25,862Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693485749) {}
[INFO ] 2020-02-03T01:31:25,870Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693483304) {}
[INFO ] 2020-02-03T01:31:25,872Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:31:25,884Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693485749) {}
[INFO ] 2020-02-03T01:31:25,886Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:31:25,895Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693484847) {}
[INFO ] 2020-02-03T01:31:25,896Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:31:25,911Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693485749) {}
[INFO ] 2020-02-03T01:31:25,912Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:31:25,934Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693485749) {}
[INFO ] 2020-02-03T01:31:25,935Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:31:25,936Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693485749) {}
[INFO ] 2020-02-03T01:31:25,937Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:31:26,140Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
[WARN ] 2020-02-03T01:31:26,140Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
[INFO ] 2020-02-03T01:31:26,155Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
java.lang.IllegalStateException: A transaction must contain at least one command
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:74) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:31:26,159Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=6281c8cb-9bf3-48a3-8f60-de5930495c5d, timestamp: 2020-02-03T01:31:25.973Z, entityType: Invocation, sessionId=6281c8cb-9bf3-48a3-8f60-de5930495c5d, timestamp: 2020-02-03T01:31:25.973Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=5CEDD21619878DFC59DAD78F6391E22A47352D1B93C42D64DA270747B4B78073), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DC8B928731AB1C108ABFBAEC592E49445B27D0C903C5BA2328B57A7FE5E7B60F), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@4448d421, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=a0035fb3-1fd8-40ea-b2bc-8bda561cdf4f) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
[INFO ] 2020-02-03T01:31:26,161Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
java.lang.IllegalStateException: A transaction must contain at least one command
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:74) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:31:26,162Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
[WARN ] 2020-02-03T01:31:26,177Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] errored, dumping all transitions:

 --- Transition of flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] ---
  Timestamp: 2020-02-03T01:31:26.110Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[56f081c7-4a5c-47b4-8968-6951f7aebed6], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=6281c8cb-9bf3-48a3-8f60-de5930495c5d, timestamp: 2020-02-03T01:31:25.973Z, entityType: Invocation, sessionId=6281c8cb-9bf3-48a3-8f60-de5930495c5d, timestamp: 2020-02-03T01:31:25.973Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=5CEDD21619878DFC59DAD78F6391E22A47352D1B93C42D64DA270747B4B78073), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DC8B928731AB1C108ABFBAEC592E49445B27D0C903C5BA2328B57A7FE5E7B60F), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3fa88474])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3fa88474])
    SignalFlowHasStarted(flowId=[56f081c7-4a5c-47b4-8968-6951f7aebed6])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3fa88474]
    []


 --- Transition of flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] ---
  Timestamp: 2020-02-03T01:31:26.163Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one command)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7992475122729353633, exception=java.lang.IllegalStateException: A transaction must contain at least one command)], propagatedIndex=0, propagating=false)


 --- Transition of flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] ---
  Timestamp: 2020-02-03T01:31:26.167Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] ---
  Timestamp: 2020-02-03T01:31:26.170Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
[WARN ] 2020-02-03T01:31:26,177Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.0/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
java.lang.IllegalStateException: A transaction must contain at least one command
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:74) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:31:26,179Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
[WARN ] 2020-02-03T01:31:26,220Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] errored, dumping all transitions:

 --- Transition of flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] ---
  Timestamp: 2020-02-03T01:31:26.110Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[56f081c7-4a5c-47b4-8968-6951f7aebed6], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=6281c8cb-9bf3-48a3-8f60-de5930495c5d, timestamp: 2020-02-03T01:31:25.973Z, entityType: Invocation, sessionId=6281c8cb-9bf3-48a3-8f60-de5930495c5d, timestamp: 2020-02-03T01:31:25.973Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=5CEDD21619878DFC59DAD78F6391E22A47352D1B93C42D64DA270747B4B78073), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DC8B928731AB1C108ABFBAEC592E49445B27D0C903C5BA2328B57A7FE5E7B60F), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3fa88474])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3fa88474])
    SignalFlowHasStarted(flowId=[56f081c7-4a5c-47b4-8968-6951f7aebed6])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3fa88474]
    []


 --- Transition of flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] ---
  Timestamp: 2020-02-03T01:31:26.163Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one command)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7992475122729353633, exception=java.lang.IllegalStateException: A transaction must contain at least one command)], propagatedIndex=0, propagating=false)


 --- Transition of flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] ---
  Timestamp: 2020-02-03T01:31:26.167Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] ---
  Timestamp: 2020-02-03T01:31:26.170Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] ---
  Timestamp: 2020-02-03T01:31:26.213Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=7992475122729353633)], sessions=[], senderUUID=a0035fb3-1fd8-40ea-b2bc-8bda561cdf4f)
    CreateTransaction
    RemoveCheckpoint(id=[56f081c7-4a5c-47b4-8968-6951f7aebed6])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=56f081c7-4a5c-47b4-8968-6951f7aebed6)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[56f081c7-4a5c-47b4-8968-6951f7aebed6], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7992475122729353633, exception=java.lang.IllegalStateException: A transaction must contain at least one command)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=6281c8cb-9bf3-48a3-8f60-de5930495c5d, timestamp: 2020-02-03T01:31:25.973Z, entityType: Invocation, sessionId=6281c8cb-9bf3-48a3-8f60-de5930495c5d, timestamp: 2020-02-03T01:31:25.973Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=5CEDD21619878DFC59DAD78F6391E22A47352D1B93C42D64DA270747B4B78073), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DC8B928731AB1C108ABFBAEC592E49445B27D0C903C5BA2328B57A7FE5E7B60F), errorState=Errored(errors=[FlowError(errorId=7992475122729353633, exception=java.lang.IllegalStateException: A transaction must contain at least one command)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@4448d421, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=a0035fb3-1fd8-40ea-b2bc-8bda561cdf4f))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
[WARN ] 2020-02-03T01:31:26,220Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [56f081c7-4a5c-47b4-8968-6951f7aebed6] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.0/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56f081c7-4a5c-47b4-8968-6951f7aebed6, invocation_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, invocation_timestamp=2020-02-03T01:31:25.973Z, origin=Only For Testing, session_id=6281c8cb-9bf3-48a3-8f60-de5930495c5d, session_timestamp=2020-02-03T01:31:25.973Z, thread-id=106}
java.lang.IllegalStateException: A transaction must contain at least one command
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:74) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:57) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:32:22,787Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:32:28,477Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013218.182/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:32:28,480Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013218.182/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:32:28,498Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013218.182/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:32:28,558Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:32:28,991Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:32:29,096Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:32:29,096Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:32:29,097Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:32:29,217Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:32:18.138Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:32:32,504Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:32:32,514Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013218.182/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:32:32,514Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:32:32,515Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:32:32,644Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:32:32,648Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:32:34,364Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:32:34,877Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:32:34,920Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:32:34,942Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:32:34,943Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:32:35,200Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:32:35,219Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:32:35,221Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693555220) {}
[INFO ] 2020-02-03T01:32:35,226Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:32:35,354Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693555220) {}
[INFO ] 2020-02-03T01:32:35,405Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:32:35,453Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693555220) {}
[INFO ] 2020-02-03T01:32:35,535Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:32:35,559Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D931A17451DF5F4A8A6F10421FE3470D720F72C16C44FCC44189779F82F772F6 uploader=app filename=null {}
[INFO ] 2020-02-03T01:32:35,568Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:32:35,571Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:32:35,861Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693555220) {}
[INFO ] 2020-02-03T01:32:35,876Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693555220) {}
[INFO ] 2020-02-03T01:32:35,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:32:35,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693555220) {}
[INFO ] 2020-02-03T01:32:35,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:32:35,890Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013218.182/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:32:35,892Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013218.182/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:32:35,893Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013218.182/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:32:35,946Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:32:35,955Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:32:35,976Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:32:35,977Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:32:35,979Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:32:35,983Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:32:18.138Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:32:36,608Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:32:36,610Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013218.182/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:32:36,611Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:32:36,612Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:32:36,613Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:32:36,613Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:32:36,695Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:32:36,705Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:32:36,709Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:32:36,709Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:32:36,725Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:32:36,725Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:32:36,844Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:32:36,850Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:32:36,850Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693556850) {}
[INFO ] 2020-02-03T01:32:36,853Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:32:36,861Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693556850) {}
[INFO ] 2020-02-03T01:32:36,869Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:32:36,879Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693556850) {}
[INFO ] 2020-02-03T01:32:36,892Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:32:36,925Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D931A17451DF5F4A8A6F10421FE3470D720F72C16C44FCC44189779F82F772F6 uploader=app filename=null {}
[INFO ] 2020-02-03T01:32:36,933Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693556850) {}
[INFO ] 2020-02-03T01:32:36,940Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693555220) {}
[INFO ] 2020-02-03T01:32:36,943Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:32:36,958Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693556850) {}
[INFO ] 2020-02-03T01:32:36,959Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:32:36,968Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693556850) {}
[INFO ] 2020-02-03T01:32:36,969Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:32:36,969Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693556850) {}
[INFO ] 2020-02-03T01:32:36,969Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:32:36,971Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013218.182/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:32:36,971Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013218.182/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:32:36,971Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013218.182/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:32:37,008Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:32:37,019Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:32:37,039Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:32:37,040Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:32:37,042Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:32:37,046Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:32:18.138Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:32:37,493Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:32:37,494Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013218.182/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:32:37,495Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:32:37,498Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:32:37,500Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:32:37,500Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:32:37,562Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:32:37,570Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:32:37,574Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:32:37,575Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:32:37,589Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:32:37,590Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:32:37,688Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:32:37,692Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:32:37,692Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693557692) {}
[INFO ] 2020-02-03T01:32:37,694Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:32:37,705Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693557692) {}
[INFO ] 2020-02-03T01:32:37,713Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:32:37,734Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693557692) {}
[INFO ] 2020-02-03T01:32:37,742Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:32:37,783Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D931A17451DF5F4A8A6F10421FE3470D720F72C16C44FCC44189779F82F772F6 uploader=app filename=null {}
[INFO ] 2020-02-03T01:32:37,789Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693557692) {}
[INFO ] 2020-02-03T01:32:37,792Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693555220) {}
[INFO ] 2020-02-03T01:32:37,793Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:32:37,801Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693557692) {}
[INFO ] 2020-02-03T01:32:37,803Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:32:37,812Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693556850) {}
[INFO ] 2020-02-03T01:32:37,814Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:32:37,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693557692) {}
[INFO ] 2020-02-03T01:32:37,824Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:32:37,832Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693557692) {}
[INFO ] 2020-02-03T01:32:37,833Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:32:37,833Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693557692) {}
[INFO ] 2020-02-03T01:32:37,834Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:32:38,026Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b6be59e2-fa56-422f-973e-8bf229917c94, invocation_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, invocation_timestamp=2020-02-03T01:32:37.860Z, origin=Only For Testing, session_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, session_timestamp=2020-02-03T01:32:37.860Z, thread-id=105}
java.lang.IllegalArgumentException: The list of signers cannot be empty
	at net.corda.core.contracts.Command.<init>(Structures.kt:213) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addCommand(TransactionBuilder.kt:617) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:54) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:32:38,030Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [b6be59e2-fa56-422f-973e-8bf229917c94] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=2089f35d-3fd3-445d-b714-5ebae4cc62aa, timestamp: 2020-02-03T01:32:37.860Z, entityType: Invocation, sessionId=2089f35d-3fd3-445d-b714-5ebae4cc62aa, timestamp: 2020-02-03T01:32:37.860Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=D931A17451DF5F4A8A6F10421FE3470D720F72C16C44FCC44189779F82F772F6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3E6F496FEBF620A386ED19626F54E14C521A035914DEE5F65FE686C80468DDFA), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@23f3a0cd, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=8d6bec47-f032-4ac7-b29f-8647ed76554a) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b6be59e2-fa56-422f-973e-8bf229917c94, invocation_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, invocation_timestamp=2020-02-03T01:32:37.860Z, origin=Only For Testing, session_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, session_timestamp=2020-02-03T01:32:37.860Z, thread-id=105}
[INFO ] 2020-02-03T01:32:38,032Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [b6be59e2-fa56-422f-973e-8bf229917c94] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b6be59e2-fa56-422f-973e-8bf229917c94, invocation_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, invocation_timestamp=2020-02-03T01:32:37.860Z, origin=Only For Testing, session_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, session_timestamp=2020-02-03T01:32:37.860Z, thread-id=105}
java.lang.IllegalArgumentException: The list of signers cannot be empty
	at net.corda.core.contracts.Command.<init>(Structures.kt:213) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addCommand(TransactionBuilder.kt:617) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:54) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:32:38,032Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [b6be59e2-fa56-422f-973e-8bf229917c94] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b6be59e2-fa56-422f-973e-8bf229917c94, invocation_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, invocation_timestamp=2020-02-03T01:32:37.860Z, origin=Only For Testing, session_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, session_timestamp=2020-02-03T01:32:37.860Z, thread-id=105}
[WARN ] 2020-02-03T01:32:38,045Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b6be59e2-fa56-422f-973e-8bf229917c94] errored, dumping all transitions:

 --- Transition of flow [b6be59e2-fa56-422f-973e-8bf229917c94] ---
  Timestamp: 2020-02-03T01:32:38.005Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b6be59e2-fa56-422f-973e-8bf229917c94], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=2089f35d-3fd3-445d-b714-5ebae4cc62aa, timestamp: 2020-02-03T01:32:37.860Z, entityType: Invocation, sessionId=2089f35d-3fd3-445d-b714-5ebae4cc62aa, timestamp: 2020-02-03T01:32:37.860Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=D931A17451DF5F4A8A6F10421FE3470D720F72C16C44FCC44189779F82F772F6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3E6F496FEBF620A386ED19626F54E14C521A035914DEE5F65FE686C80468DDFA), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f16864c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f16864c])
    SignalFlowHasStarted(flowId=[b6be59e2-fa56-422f-973e-8bf229917c94])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f16864c]
    []


 --- Transition of flow [b6be59e2-fa56-422f-973e-8bf229917c94] ---
  Timestamp: 2020-02-03T01:32:38.034Z
  Event: Error(exception=java.lang.IllegalArgumentException: The list of signers cannot be empty)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-350054886998745117, exception=java.lang.IllegalArgumentException: The list of signers cannot be empty)], propagatedIndex=0, propagating=false)


 --- Transition of flow [b6be59e2-fa56-422f-973e-8bf229917c94] ---
  Timestamp: 2020-02-03T01:32:38.037Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b6be59e2-fa56-422f-973e-8bf229917c94] ---
  Timestamp: 2020-02-03T01:32:38.039Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b6be59e2-fa56-422f-973e-8bf229917c94, invocation_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, invocation_timestamp=2020-02-03T01:32:37.860Z, origin=Only For Testing, session_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, session_timestamp=2020-02-03T01:32:37.860Z, thread-id=105}
[WARN ] 2020-02-03T01:32:38,045Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b6be59e2-fa56-422f-973e-8bf229917c94] error [errorCode=184j3pl, moreInformationAt=https://errors.corda.net/OS/4.0/184j3pl] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b6be59e2-fa56-422f-973e-8bf229917c94, invocation_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, invocation_timestamp=2020-02-03T01:32:37.860Z, origin=Only For Testing, session_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, session_timestamp=2020-02-03T01:32:37.860Z, thread-id=105}
java.lang.IllegalArgumentException: The list of signers cannot be empty
	at net.corda.core.contracts.Command.<init>(Structures.kt:213) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addCommand(TransactionBuilder.kt:617) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:54) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:32:38,047Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b6be59e2-fa56-422f-973e-8bf229917c94, invocation_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, invocation_timestamp=2020-02-03T01:32:37.860Z, origin=Only For Testing, session_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, session_timestamp=2020-02-03T01:32:37.860Z, thread-id=105}
[WARN ] 2020-02-03T01:32:38,073Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b6be59e2-fa56-422f-973e-8bf229917c94] errored, dumping all transitions:

 --- Transition of flow [b6be59e2-fa56-422f-973e-8bf229917c94] ---
  Timestamp: 2020-02-03T01:32:38.005Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b6be59e2-fa56-422f-973e-8bf229917c94], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=2089f35d-3fd3-445d-b714-5ebae4cc62aa, timestamp: 2020-02-03T01:32:37.860Z, entityType: Invocation, sessionId=2089f35d-3fd3-445d-b714-5ebae4cc62aa, timestamp: 2020-02-03T01:32:37.860Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=D931A17451DF5F4A8A6F10421FE3470D720F72C16C44FCC44189779F82F772F6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3E6F496FEBF620A386ED19626F54E14C521A035914DEE5F65FE686C80468DDFA), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f16864c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f16864c])
    SignalFlowHasStarted(flowId=[b6be59e2-fa56-422f-973e-8bf229917c94])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f16864c]
    []


 --- Transition of flow [b6be59e2-fa56-422f-973e-8bf229917c94] ---
  Timestamp: 2020-02-03T01:32:38.034Z
  Event: Error(exception=java.lang.IllegalArgumentException: The list of signers cannot be empty)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-350054886998745117, exception=java.lang.IllegalArgumentException: The list of signers cannot be empty)], propagatedIndex=0, propagating=false)


 --- Transition of flow [b6be59e2-fa56-422f-973e-8bf229917c94] ---
  Timestamp: 2020-02-03T01:32:38.037Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b6be59e2-fa56-422f-973e-8bf229917c94] ---
  Timestamp: 2020-02-03T01:32:38.039Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [b6be59e2-fa56-422f-973e-8bf229917c94] ---
  Timestamp: 2020-02-03T01:32:38.070Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-350054886998745117)], sessions=[], senderUUID=8d6bec47-f032-4ac7-b29f-8647ed76554a)
    CreateTransaction
    RemoveCheckpoint(id=[b6be59e2-fa56-422f-973e-8bf229917c94])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=b6be59e2-fa56-422f-973e-8bf229917c94)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[b6be59e2-fa56-422f-973e-8bf229917c94], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-350054886998745117, exception=java.lang.IllegalArgumentException: The list of signers cannot be empty)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=2089f35d-3fd3-445d-b714-5ebae4cc62aa, timestamp: 2020-02-03T01:32:37.860Z, entityType: Invocation, sessionId=2089f35d-3fd3-445d-b714-5ebae4cc62aa, timestamp: 2020-02-03T01:32:37.860Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=D931A17451DF5F4A8A6F10421FE3470D720F72C16C44FCC44189779F82F772F6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3E6F496FEBF620A386ED19626F54E14C521A035914DEE5F65FE686C80468DDFA), errorState=Errored(errors=[FlowError(errorId=-350054886998745117, exception=java.lang.IllegalArgumentException: The list of signers cannot be empty)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@23f3a0cd, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=8d6bec47-f032-4ac7-b29f-8647ed76554a))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b6be59e2-fa56-422f-973e-8bf229917c94, invocation_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, invocation_timestamp=2020-02-03T01:32:37.860Z, origin=Only For Testing, session_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, session_timestamp=2020-02-03T01:32:37.860Z, thread-id=105}
[WARN ] 2020-02-03T01:32:38,073Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b6be59e2-fa56-422f-973e-8bf229917c94] error [errorCode=184j3pl, moreInformationAt=https://errors.corda.net/OS/4.0/184j3pl] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b6be59e2-fa56-422f-973e-8bf229917c94, invocation_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, invocation_timestamp=2020-02-03T01:32:37.860Z, origin=Only For Testing, session_id=2089f35d-3fd3-445d-b714-5ebae4cc62aa, session_timestamp=2020-02-03T01:32:37.860Z, thread-id=105}
java.lang.IllegalArgumentException: The list of signers cannot be empty
	at net.corda.core.contracts.Command.<init>(Structures.kt:213) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addCommand(TransactionBuilder.kt:617) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:54) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:33:51,882Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:33:57,411Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013347.527/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:33:57,414Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013347.527/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:33:57,431Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013347.527/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:33:57,510Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:33:57,937Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:33:58,001Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:33:58,002Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:33:58,003Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:33:58,132Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:33:47.486Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:34:01,391Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:34:01,394Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013347.527/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:34:01,394Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:34:01,395Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:34:01,480Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:01,484Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:03,293Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:03,855Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:34:03,902Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:34:03,926Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:34:03,926Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:34:04,192Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:34:04,202Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:34:04,202Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693644202) {}
[INFO ] 2020-02-03T01:34:04,237Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:04,362Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693644202) {}
[INFO ] 2020-02-03T01:34:04,410Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:34:04,429Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693644202) {}
[INFO ] 2020-02-03T01:34:04,464Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:04,495Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=BCFD458D5B80355014663C5FEB86B5FE4F2CBA51D14F3D2BFFC8F41BB656AE03 uploader=app filename=null {}
[INFO ] 2020-02-03T01:34:04,498Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:34:04,502Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:34:04,805Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693644202) {}
[INFO ] 2020-02-03T01:34:04,827Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693644202) {}
[INFO ] 2020-02-03T01:34:04,831Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:04,832Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693644202) {}
[INFO ] 2020-02-03T01:34:04,834Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:04,843Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013347.527/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:34:04,845Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013347.527/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:34:04,847Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013347.527/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:34:04,879Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:34:04,885Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:34:04,909Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:04,909Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:04,909Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:04,913Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:33:47.486Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:34:05,456Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:34:05,458Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013347.527/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:34:05,458Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:34:05,459Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:34:05,461Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:05,461Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:05,610Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:05,623Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:34:05,628Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:34:05,630Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:34:05,653Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:05,654Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:05,768Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:05,772Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:34:05,772Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693645772) {}
[INFO ] 2020-02-03T01:34:05,774Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:05,784Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693645772) {}
[INFO ] 2020-02-03T01:34:05,791Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:34:05,813Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693645772) {}
[INFO ] 2020-02-03T01:34:05,843Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:05,879Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=BCFD458D5B80355014663C5FEB86B5FE4F2CBA51D14F3D2BFFC8F41BB656AE03 uploader=app filename=null {}
[INFO ] 2020-02-03T01:34:05,887Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693645772) {}
[INFO ] 2020-02-03T01:34:05,895Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693644202) {}
[INFO ] 2020-02-03T01:34:05,896Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:05,908Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693645772) {}
[INFO ] 2020-02-03T01:34:05,915Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:05,928Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693645772) {}
[INFO ] 2020-02-03T01:34:05,928Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:05,928Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693645772) {}
[INFO ] 2020-02-03T01:34:05,928Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:05,931Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013347.527/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:34:05,931Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013347.527/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:34:05,932Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013347.527/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:34:05,951Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:34:05,958Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:34:05,976Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:05,977Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:05,978Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:05,980Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:33:47.486Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:34:06,448Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:34:06,453Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013347.527/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:34:06,453Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:34:06,454Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:34:06,456Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:06,457Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:06,527Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:06,534Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:34:06,539Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:34:06,540Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:34:06,553Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:06,554Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:06,641Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:06,644Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:34:06,644Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693646644) {}
[INFO ] 2020-02-03T01:34:06,646Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:06,653Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693646644) {}
[INFO ] 2020-02-03T01:34:06,659Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:34:06,671Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693646644) {}
[INFO ] 2020-02-03T01:34:06,690Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:06,721Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=BCFD458D5B80355014663C5FEB86B5FE4F2CBA51D14F3D2BFFC8F41BB656AE03 uploader=app filename=null {}
[INFO ] 2020-02-03T01:34:06,728Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693646644) {}
[INFO ] 2020-02-03T01:34:06,731Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693644202) {}
[INFO ] 2020-02-03T01:34:06,734Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:06,743Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693646644) {}
[INFO ] 2020-02-03T01:34:06,746Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:06,759Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693645772) {}
[INFO ] 2020-02-03T01:34:06,761Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:06,772Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693646644) {}
[INFO ] 2020-02-03T01:34:06,773Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:06,789Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693646644) {}
[INFO ] 2020-02-03T01:34:06,791Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:06,792Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693646644) {}
[INFO ] 2020-02-03T01:34:06,806Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:34:07,033Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
[WARN ] 2020-02-03T01:34:07,033Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
[ERROR] 2020-02-03T01:34:08,176Z [Mock network] internal.Verifier.verifyContracts - Error validating transaction 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:60) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[ERROR] 2020-02-03T01:34:08,181Z [Mock network] internal.Verifier.verifyContracts - Error validating transaction 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:60) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:34:08,181Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:380) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:60) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
Caused by: java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	... 18 more
[INFO ] 2020-02-03T01:34:08,188Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d0e76651-a9d1-4047-90f2-eac4ec500609, timestamp: 2020-02-03T01:34:06.834Z, entityType: Invocation, sessionId=d0e76651-a9d1-4047-90f2-eac4ec500609, timestamp: 2020-02-03T01:34:06.834Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=BCFD458D5B80355014663C5FEB86B5FE4F2CBA51D14F3D2BFFC8F41BB656AE03), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B013969F21AE636AF8FA228929C27BB52C07E761F5219BC87E15FA870A68EC67), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@4a6f4a36, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=946041c3-c32c-492b-b0e3-b14d7064846d) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
[INFO ] 2020-02-03T01:34:08,190Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:380) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:60) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
Caused by: java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	... 18 more
[INFO ] 2020-02-03T01:34:08,205Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
[WARN ] 2020-02-03T01:34:08,218Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] errored, dumping all transitions:

 --- Transition of flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] ---
  Timestamp: 2020-02-03T01:34:06.996Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[30d70730-d1d2-47f3-8f1f-c28fe766bf00], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d0e76651-a9d1-4047-90f2-eac4ec500609, timestamp: 2020-02-03T01:34:06.834Z, entityType: Invocation, sessionId=d0e76651-a9d1-4047-90f2-eac4ec500609, timestamp: 2020-02-03T01:34:06.834Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=BCFD458D5B80355014663C5FEB86B5FE4F2CBA51D14F3D2BFFC8F41BB656AE03), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B013969F21AE636AF8FA228929C27BB52C07E761F5219BC87E15FA870A68EC67), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2379ecae])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2379ecae])
    SignalFlowHasStarted(flowId=[30d70730-d1d2-47f3-8f1f-c28fe766bf00])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2379ecae]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] ---
  Timestamp: 2020-02-03T01:34:08.206Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7508935661521110735, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] ---
  Timestamp: 2020-02-03T01:34:08.210Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] ---
  Timestamp: 2020-02-03T01:34:08.212Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
[WARN ] 2020-02-03T01:34:08,218Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] error [errorCode=1yd0ire, moreInformationAt=https://errors.corda.net/OS/4.0/1yd0ire] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:380) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:60) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
Caused by: java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	... 18 more
[WARN ] 2020-02-03T01:34:08,220Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error [errorCode=1yd0ire, moreInformationAt=https://errors.corda.net/OS/4.0/1yd0ire] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:380) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:60) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
Caused by: java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	... 18 more
[WARN ] 2020-02-03T01:34:08,246Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] errored, dumping all transitions:

 --- Transition of flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] ---
  Timestamp: 2020-02-03T01:34:06.996Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[30d70730-d1d2-47f3-8f1f-c28fe766bf00], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d0e76651-a9d1-4047-90f2-eac4ec500609, timestamp: 2020-02-03T01:34:06.834Z, entityType: Invocation, sessionId=d0e76651-a9d1-4047-90f2-eac4ec500609, timestamp: 2020-02-03T01:34:06.834Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=BCFD458D5B80355014663C5FEB86B5FE4F2CBA51D14F3D2BFFC8F41BB656AE03), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B013969F21AE636AF8FA228929C27BB52C07E761F5219BC87E15FA870A68EC67), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2379ecae])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2379ecae])
    SignalFlowHasStarted(flowId=[30d70730-d1d2-47f3-8f1f-c28fe766bf00])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2379ecae]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] ---
  Timestamp: 2020-02-03T01:34:08.206Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7508935661521110735, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] ---
  Timestamp: 2020-02-03T01:34:08.210Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] ---
  Timestamp: 2020-02-03T01:34:08.212Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] ---
  Timestamp: 2020-02-03T01:34:08.243Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414, errorId=7508935661521110735)], sessions=[], senderUUID=946041c3-c32c-492b-b0e3-b14d7064846d)
    CreateTransaction
    RemoveCheckpoint(id=[30d70730-d1d2-47f3-8f1f-c28fe766bf00])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=30d70730-d1d2-47f3-8f1f-c28fe766bf00)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[30d70730-d1d2-47f3-8f1f-c28fe766bf00], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7508935661521110735, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=d0e76651-a9d1-4047-90f2-eac4ec500609, timestamp: 2020-02-03T01:34:06.834Z, entityType: Invocation, sessionId=d0e76651-a9d1-4047-90f2-eac4ec500609, timestamp: 2020-02-03T01:34:06.834Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=BCFD458D5B80355014663C5FEB86B5FE4F2CBA51D14F3D2BFFC8F41BB656AE03), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B013969F21AE636AF8FA228929C27BB52C07E761F5219BC87E15FA870A68EC67), errorState=Errored(errors=[FlowError(errorId=7508935661521110735, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@4a6f4a36, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=946041c3-c32c-492b-b0e3-b14d7064846d))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
[WARN ] 2020-02-03T01:34:08,246Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [30d70730-d1d2-47f3-8f1f-c28fe766bf00] error [errorCode=1yd0ire, moreInformationAt=https://errors.corda.net/OS/4.0/1yd0ire] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30d70730-d1d2-47f3-8f1f-c28fe766bf00, invocation_id=d0e76651-a9d1-4047-90f2-eac4ec500609, invocation_timestamp=2020-02-03T01:34:06.834Z, origin=Only For Testing, session_id=d0e76651-a9d1-4047-90f2-eac4ec500609, session_timestamp=2020-02-03T01:34:06.834Z, thread-id=104}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Output tem que ter asssiatura do Issuer., contract: bootcamp.TokenContract, transaction: 7F7329B39973A8F383F19E94B46389DFD6240A7038E53F4909663BA76C866414
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:380) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:60) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
Caused by: java.lang.IllegalArgumentException: Output tem que ter asssiatura do Issuer.
	at bootcamp.TokenContract.verify(TokenContract.java:61) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	... 18 more
[INFO ] 2020-02-03T01:34:38,070Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:34:43,810Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013433.470/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:34:43,814Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013433.470/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:34:43,835Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013433.470/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:34:43,914Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:34:44,409Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:34:44,467Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:44,468Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:44,469Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:44,599Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:34:33.425Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:34:48,026Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:34:48,036Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013433.470/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:34:48,036Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:34:48,038Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:34:48,150Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:48,157Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:49,823Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:50,367Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:34:50,436Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:34:50,454Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:34:50,455Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:34:50,689Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:34:50,703Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:34:50,703Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693690703) {}
[INFO ] 2020-02-03T01:34:50,707Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:50,834Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693690703) {}
[INFO ] 2020-02-03T01:34:50,882Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:34:50,897Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693690703) {}
[INFO ] 2020-02-03T01:34:50,937Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:50,977Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:34:50,982Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:34:50,985Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:34:51,289Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693690703) {}
[INFO ] 2020-02-03T01:34:51,307Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693690703) {}
[INFO ] 2020-02-03T01:34:51,308Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:51,308Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693690703) {}
[INFO ] 2020-02-03T01:34:51,308Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:51,315Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013433.470/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:34:51,316Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013433.470/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:34:51,316Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013433.470/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:34:51,343Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:34:51,355Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:34:51,378Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:51,378Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:51,379Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:51,386Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:34:33.425Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:34:52,057Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:34:52,061Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013433.470/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:34:52,061Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:34:52,066Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:34:52,069Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:52,069Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:52,148Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:52,158Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:34:52,160Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:34:52,160Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:34:52,178Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:52,178Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:52,267Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:52,271Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:34:52,271Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693692271) {}
[INFO ] 2020-02-03T01:34:52,273Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:52,283Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693692271) {}
[INFO ] 2020-02-03T01:34:52,290Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:34:52,305Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693692271) {}
[INFO ] 2020-02-03T01:34:52,312Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:52,356Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:34:52,366Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693692271) {}
[INFO ] 2020-02-03T01:34:52,375Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693690703) {}
[INFO ] 2020-02-03T01:34:52,377Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:52,392Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693692271) {}
[INFO ] 2020-02-03T01:34:52,394Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:52,419Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693692271) {}
[INFO ] 2020-02-03T01:34:52,419Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:52,420Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693692271) {}
[INFO ] 2020-02-03T01:34:52,420Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:52,427Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013433.470/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:34:52,428Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013433.470/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:34:52,429Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013433.470/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:34:52,443Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:34:52,453Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:34:52,472Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:52,473Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:52,473Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:34:52,476Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:34:33.425Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:34:52,885Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:34:52,887Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013433.470/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:34:52,887Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:34:52,888Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:34:52,889Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:52,890Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:52,987Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:34:52,995Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:34:52,997Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:34:52,998Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:34:53,015Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:53,016Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:53,120Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:34:53,126Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:34:53,127Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693693127) {}
[INFO ] 2020-02-03T01:34:53,130Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:53,139Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693693127) {}
[INFO ] 2020-02-03T01:34:53,149Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:34:53,159Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693693127) {}
[INFO ] 2020-02-03T01:34:53,180Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:53,255Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:34:53,263Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693693127) {}
[INFO ] 2020-02-03T01:34:53,265Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693690703) {}
[INFO ] 2020-02-03T01:34:53,266Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:53,279Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693693127) {}
[INFO ] 2020-02-03T01:34:53,280Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:53,295Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693692271) {}
[INFO ] 2020-02-03T01:34:53,297Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:53,310Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693693127) {}
[INFO ] 2020-02-03T01:34:53,312Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:34:53,324Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693693127) {}
[INFO ] 2020-02-03T01:34:53,325Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:34:53,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693693127) {}
[INFO ] 2020-02-03T01:34:53,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:34:53,525Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b4484e38-f10b-4372-9f77-0183bb809f34, invocation_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, invocation_timestamp=2020-02-03T01:34:53.353Z, origin=Only For Testing, session_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, session_timestamp=2020-02-03T01:34:53.353Z, thread-id=106}
[WARN ] 2020-02-03T01:34:53,525Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b4484e38-f10b-4372-9f77-0183bb809f34, invocation_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, invocation_timestamp=2020-02-03T01:34:53.353Z, origin=Only For Testing, session_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, session_timestamp=2020-02-03T01:34:53.353Z, thread-id=106}
[INFO ] 2020-02-03T01:34:54,748Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b4484e38-f10b-4372-9f77-0183bb809f34, invocation_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, invocation_timestamp=2020-02-03T01:34:53.353Z, origin=Only For Testing, session_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, session_timestamp=2020-02-03T01:34:53.353Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[INFO ] 2020-02-03T01:34:54,748Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b4484e38-f10b-4372-9f77-0183bb809f34, invocation_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, invocation_timestamp=2020-02-03T01:34:53.353Z, origin=Only For Testing, session_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, session_timestamp=2020-02-03T01:34:53.353Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[INFO ] 2020-02-03T01:34:54,799Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b4484e38-f10b-4372-9f77-0183bb809f34, invocation_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, invocation_timestamp=2020-02-03T01:34:53.353Z, origin=Only For Testing, session_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, session_timestamp=2020-02-03T01:34:53.353Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[INFO ] 2020-02-03T01:34:54,966Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[WARN ] 2020-02-03T01:34:54,984Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[INFO ] 2020-02-03T01:34:55,012Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[INFO ] 2020-02-03T01:34:55,040Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b4484e38-f10b-4372-9f77-0183bb809f34, invocation_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, invocation_timestamp=2020-02-03T01:34:53.353Z, origin=Only For Testing, session_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, session_timestamp=2020-02-03T01:34:53.353Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[INFO ] 2020-02-03T01:34:55,040Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b4484e38-f10b-4372-9f77-0183bb809f34, invocation_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, invocation_timestamp=2020-02-03T01:34:53.353Z, origin=Only For Testing, session_id=aec16e5e-7b10-4be1-9ddd-46729ddcbb28, session_timestamp=2020-02-03T01:34:53.353Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[INFO ] 2020-02-03T01:34:55,070Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:34:55,072Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [99f01590-efd4-4d89-904f-bff2d26436a7] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Invocation, sessionId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5018307737855404570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), frozenFiber=03E61C3774527E85F98F684A4BFFAD0DCB8EE2C3945600CA83AEDA266E9FC184), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@163fae14, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=734c35ab-bf21-4a7a-8d9c-a829741ec400) {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[INFO ] 2020-02-03T01:34:55,074Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [99f01590-efd4-4d89-904f-bff2d26436a7] has error [0] {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:34:55,084Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [99f01590-efd4-4d89-904f-bff2d26436a7] error allowed to propagate {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[WARN ] 2020-02-03T01:34:55,102Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [99f01590-efd4-4d89-904f-bff2d26436a7] errored, dumping all transitions:

 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.936Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[99f01590-efd4-4d89-904f-bff2d26436a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Invocation, sessionId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=F59E8ED356FFCCE147E72820F6E0F14306CC6E10EE28F971C173E3761E0BD534), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b])
    SignalFlowHasStarted(flowId=[99f01590-efd4-4d89-904f-bff2d26436a7])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=123705815718920119), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5018307737855404570), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-123705815718920119-8196459793455507289-0-0), senderUUID=734c35ab-bf21-4a7a-8d9c-a829741ec400))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5018307737855404570): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=123705815718920119)), errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b]
    []


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.939Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.941Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.957Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), maySkipCheckpoint=false, fiber=EA74FA0C04E84C379C614CE3890D1D0178821D65DAC64F159A62794D41B39280, )
  Actions: 
    PersistCheckpoint(id=[99f01590-efd4-4d89-904f-bff2d26436a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Invocation, sessionId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5018307737855404570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=123705815718920119)), errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), frozenFiber=EA74FA0C04E84C379C614CE3890D1D0178821D65DAC64F159A62794D41B39280), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=F59E8ED356FFCCE147E72820F6E0F14306CC6E10EE28F971C173E3761E0BD534)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), frozenFiber=EA74FA0C04E84C379C614CE3890D1D0178821D65DAC64F159A62794D41B39280)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.962Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5018307737855404570).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.984Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.007Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=3B68AA5BE9098DC21D46160B013D880D77302DCA95710FEDD7108F24DB1E8BD1, )
  Actions: 
    PersistCheckpoint(id=[99f01590-efd4-4d89-904f-bff2d26436a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Invocation, sessionId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5018307737855404570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=123705815718920119)), errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=3B68AA5BE9098DC21D46160B013D880D77302DCA95710FEDD7108F24DB1E8BD1), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    EA74FA0C04E84C379C614CE3890D1D0178821D65DAC64F159A62794D41B39280
    3B68AA5BE9098DC21D46160B013D880D77302DCA95710FEDD7108F24DB1E8BD1
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.011Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=123705815718920119), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-123705815718920119-8196459793455507289-2-0), senderUUID=734c35ab-bf21-4a7a-8d9c-a829741ec400))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.012Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.019Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.024Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), maySkipCheckpoint=false, fiber=03E61C3774527E85F98F684A4BFFAD0DCB8EE2C3945600CA83AEDA266E9FC184, )
  Actions: 
    PersistCheckpoint(id=[99f01590-efd4-4d89-904f-bff2d26436a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Invocation, sessionId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5018307737855404570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=123705815718920119)), errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), frozenFiber=03E61C3774527E85F98F684A4BFFAD0DCB8EE2C3945600CA83AEDA266E9FC184), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))])
checkpoint.flowState.frozenFiber.hash: 
    3B68AA5BE9098DC21D46160B013D880D77302DCA95710FEDD7108F24DB1E8BD1
    03E61C3774527E85F98F684A4BFFAD0DCB8EE2C3945600CA83AEDA266E9FC184
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.024Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.069Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5018307737855404570), payload=net.corda.node.services.statemachine.EndSessionMessage@388ef2f6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-5018307737855404570).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=123705815718920119))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.069Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.070Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.086Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8535637088021974945, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.088Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.090Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[WARN ] 2020-02-03T01:34:55,103Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [99f01590-efd4-4d89-904f-bff2d26436a7] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:34:55,104Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[WARN ] 2020-02-03T01:34:55,137Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [99f01590-efd4-4d89-904f-bff2d26436a7] errored, dumping all transitions:

 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.936Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[99f01590-efd4-4d89-904f-bff2d26436a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Invocation, sessionId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=F59E8ED356FFCCE147E72820F6E0F14306CC6E10EE28F971C173E3761E0BD534), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b])
    SignalFlowHasStarted(flowId=[99f01590-efd4-4d89-904f-bff2d26436a7])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=123705815718920119), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5018307737855404570), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-123705815718920119-8196459793455507289-0-0), senderUUID=734c35ab-bf21-4a7a-8d9c-a829741ec400))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5018307737855404570): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=123705815718920119)), errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b]
    []


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.939Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.941Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.957Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), maySkipCheckpoint=false, fiber=EA74FA0C04E84C379C614CE3890D1D0178821D65DAC64F159A62794D41B39280, )
  Actions: 
    PersistCheckpoint(id=[99f01590-efd4-4d89-904f-bff2d26436a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Invocation, sessionId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5018307737855404570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=123705815718920119)), errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), frozenFiber=EA74FA0C04E84C379C614CE3890D1D0178821D65DAC64F159A62794D41B39280), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=F59E8ED356FFCCE147E72820F6E0F14306CC6E10EE28F971C173E3761E0BD534)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), frozenFiber=EA74FA0C04E84C379C614CE3890D1D0178821D65DAC64F159A62794D41B39280)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.962Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5018307737855404570).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:54.984Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.007Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=3B68AA5BE9098DC21D46160B013D880D77302DCA95710FEDD7108F24DB1E8BD1, )
  Actions: 
    PersistCheckpoint(id=[99f01590-efd4-4d89-904f-bff2d26436a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Invocation, sessionId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5018307737855404570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=123705815718920119)), errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=3B68AA5BE9098DC21D46160B013D880D77302DCA95710FEDD7108F24DB1E8BD1), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    EA74FA0C04E84C379C614CE3890D1D0178821D65DAC64F159A62794D41B39280
    3B68AA5BE9098DC21D46160B013D880D77302DCA95710FEDD7108F24DB1E8BD1
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.011Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=123705815718920119), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-123705815718920119-8196459793455507289-2-0), senderUUID=734c35ab-bf21-4a7a-8d9c-a829741ec400))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.012Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.019Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.024Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), maySkipCheckpoint=false, fiber=03E61C3774527E85F98F684A4BFFAD0DCB8EE2C3945600CA83AEDA266E9FC184, )
  Actions: 
    PersistCheckpoint(id=[99f01590-efd4-4d89-904f-bff2d26436a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Invocation, sessionId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5018307737855404570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=123705815718920119)), errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), frozenFiber=03E61C3774527E85F98F684A4BFFAD0DCB8EE2C3945600CA83AEDA266E9FC184), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))])
checkpoint.flowState.frozenFiber.hash: 
    3B68AA5BE9098DC21D46160B013D880D77302DCA95710FEDD7108F24DB1E8BD1
    03E61C3774527E85F98F684A4BFFAD0DCB8EE2C3945600CA83AEDA266E9FC184
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.024Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.069Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5018307737855404570), payload=net.corda.node.services.statemachine.EndSessionMessage@388ef2f6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-5018307737855404570).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=123705815718920119))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.069Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.070Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.086Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8535637088021974945, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.088Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.090Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [99f01590-efd4-4d89-904f-bff2d26436a7] ---
  Timestamp: 2020-02-03T01:34:55.129Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8535637088021974945)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)], senderUUID=734c35ab-bf21-4a7a-8d9c-a829741ec400)
    CreateTransaction
    RemoveCheckpoint(id=[99f01590-efd4-4d89-904f-bff2d26436a7])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3])
    ReleaseSoftLocks(uuid=99f01590-efd4-4d89-904f-bff2d26436a7)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-5018307737855404570)])
    RemoveFlow(flowId=[99f01590-efd4-4d89-904f-bff2d26436a7], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8535637088021974945, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Invocation, sessionId=757cca1b-09ea-4785-9c98-000218c9144d, timestamp: 2020-02-03T01:34:54.903Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5018307737855404570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-123705815718920119-8196459793455507289)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5018307737855404570))]), frozenFiber=03E61C3774527E85F98F684A4BFFAD0DCB8EE2C3945600CA83AEDA266E9FC184), errorState=Errored(errors=[FlowError(errorId=8535637088021974945, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@163fae14, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=734c35ab-bf21-4a7a-8d9c-a829741ec400))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3]
    []
 {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
[WARN ] 2020-02-03T01:34:55,137Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [99f01590-efd4-4d89-904f-bff2d26436a7] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=99f01590-efd4-4d89-904f-bff2d26436a7, invocation_id=757cca1b-09ea-4785-9c98-000218c9144d, invocation_timestamp=2020-02-03T01:34:54.903Z, origin=O=Mock Company 1, L=London, C=GB, session_id=757cca1b-09ea-4785-9c98-000218c9144d, session_timestamp=2020-02-03T01:34:54.903Z, thread-id=106, tx_id=8350FF0BC4723BAD7D0F578E73537C4B20D522EB4CB8B64FDCAB5BABB7FECF6A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5018307737855404570) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:35:34,416Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:35:38,972Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013529.718/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:35:38,976Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013529.718/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:35:38,997Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013529.718/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:35:39,078Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:35:39,584Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:35:39,643Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:35:39,643Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:35:39,644Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:35:39,778Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:35:29.675Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:35:43,098Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:35:43,109Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013529.718/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:35:43,109Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:35:43,113Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:35:43,200Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:35:43,207Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:35:44,801Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:35:45,333Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:35:45,410Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:35:45,427Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:35:45,428Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:35:45,649Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:35:45,660Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:35:45,660Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693745660) {}
[INFO ] 2020-02-03T01:35:45,665Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:35:45,790Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693745660) {}
[INFO ] 2020-02-03T01:35:45,839Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:35:45,869Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693745660) {}
[INFO ] 2020-02-03T01:35:45,937Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:35:45,941Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:35:45,945Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:35:45,971Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:35:46,242Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693745660) {}
[INFO ] 2020-02-03T01:35:46,257Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693745660) {}
[INFO ] 2020-02-03T01:35:46,259Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:35:46,261Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693745660) {}
[INFO ] 2020-02-03T01:35:46,262Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:35:46,266Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013529.718/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:35:46,267Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013529.718/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:35:46,269Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013529.718/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:35:46,312Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:35:46,318Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:35:46,340Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:35:46,341Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:35:46,343Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:35:46,347Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:35:29.675Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:35:46,894Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:35:46,901Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013529.718/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:35:46,901Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:35:46,902Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:35:46,905Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:35:46,906Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:35:47,090Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:35:47,110Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:35:47,114Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:35:47,114Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:35:47,131Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:35:47,131Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:35:47,221Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:35:47,228Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:35:47,229Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693747229) {}
[INFO ] 2020-02-03T01:35:47,232Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:35:47,240Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693747229) {}
[INFO ] 2020-02-03T01:35:47,248Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:35:47,258Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693747229) {}
[INFO ] 2020-02-03T01:35:47,298Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:35:47,319Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:35:47,326Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693747229) {}
[INFO ] 2020-02-03T01:35:47,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693745660) {}
[INFO ] 2020-02-03T01:35:47,338Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:35:47,352Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693747229) {}
[INFO ] 2020-02-03T01:35:47,353Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:35:47,362Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693747229) {}
[INFO ] 2020-02-03T01:35:47,362Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:35:47,363Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693747229) {}
[INFO ] 2020-02-03T01:35:47,363Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:35:47,364Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013529.718/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:35:47,365Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013529.718/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:35:47,366Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013529.718/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:35:47,392Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:35:47,397Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:35:47,415Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:35:47,415Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:35:47,415Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:35:47,418Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:35:29.675Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:35:47,875Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:35:47,885Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013529.718/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:35:47,885Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:35:47,886Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:35:47,893Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:35:47,894Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:35:47,987Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:35:47,999Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:35:48,001Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:35:48,002Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:35:48,015Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:35:48,016Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:35:48,115Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:35:48,122Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:35:48,122Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693748122) {}
[INFO ] 2020-02-03T01:35:48,126Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:35:48,135Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693748122) {}
[INFO ] 2020-02-03T01:35:48,148Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:35:48,152Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693748122) {}
[INFO ] 2020-02-03T01:35:48,176Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:35:48,235Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:35:48,242Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693748122) {}
[INFO ] 2020-02-03T01:35:48,247Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693745660) {}
[INFO ] 2020-02-03T01:35:48,248Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:35:48,260Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693748122) {}
[INFO ] 2020-02-03T01:35:48,261Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:35:48,270Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693747229) {}
[INFO ] 2020-02-03T01:35:48,272Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:35:48,280Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693748122) {}
[INFO ] 2020-02-03T01:35:48,282Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:35:48,290Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693748122) {}
[INFO ] 2020-02-03T01:35:48,291Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:35:48,291Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693748122) {}
[INFO ] 2020-02-03T01:35:48,291Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:35:48,490Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1b44d5f0-7280-4328-903f-4b4e7ff5e213, invocation_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, invocation_timestamp=2020-02-03T01:35:48.317Z, origin=Only For Testing, session_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, session_timestamp=2020-02-03T01:35:48.317Z, thread-id=105}
[WARN ] 2020-02-03T01:35:48,490Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1b44d5f0-7280-4328-903f-4b4e7ff5e213, invocation_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, invocation_timestamp=2020-02-03T01:35:48.317Z, origin=Only For Testing, session_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, session_timestamp=2020-02-03T01:35:48.317Z, thread-id=105}
[INFO ] 2020-02-03T01:35:49,677Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1b44d5f0-7280-4328-903f-4b4e7ff5e213, invocation_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, invocation_timestamp=2020-02-03T01:35:48.317Z, origin=Only For Testing, session_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, session_timestamp=2020-02-03T01:35:48.317Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[INFO ] 2020-02-03T01:35:49,677Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1b44d5f0-7280-4328-903f-4b4e7ff5e213, invocation_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, invocation_timestamp=2020-02-03T01:35:48.317Z, origin=Only For Testing, session_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, session_timestamp=2020-02-03T01:35:48.317Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[INFO ] 2020-02-03T01:35:49,727Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1b44d5f0-7280-4328-903f-4b4e7ff5e213, invocation_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, invocation_timestamp=2020-02-03T01:35:48.317Z, origin=Only For Testing, session_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, session_timestamp=2020-02-03T01:35:48.317Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[INFO ] 2020-02-03T01:35:49,883Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[WARN ] 2020-02-03T01:35:49,891Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[INFO ] 2020-02-03T01:35:49,919Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[INFO ] 2020-02-03T01:35:49,949Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1b44d5f0-7280-4328-903f-4b4e7ff5e213, invocation_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, invocation_timestamp=2020-02-03T01:35:48.317Z, origin=Only For Testing, session_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, session_timestamp=2020-02-03T01:35:48.317Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[INFO ] 2020-02-03T01:35:49,950Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1b44d5f0-7280-4328-903f-4b4e7ff5e213, invocation_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, invocation_timestamp=2020-02-03T01:35:48.317Z, origin=Only For Testing, session_id=ddb61aa3-a3cd-4e2f-bd9e-5426d338a3e3, session_timestamp=2020-02-03T01:35:48.317Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[INFO ] 2020-02-03T01:35:49,976Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:35:49,980Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [5f613628-83b5-45a8-8776-533c9dcf39a2] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Invocation, sessionId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1275531309275706117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), frozenFiber=09ECD2468259A30BF30D04BFB7E57538ADE225B75E372EECE91720628F0D6954), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@6822a20f, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47397109], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=33107d3f-5b1a-4039-a1ac-30e27348e1ca) {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[INFO ] 2020-02-03T01:35:49,986Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [5f613628-83b5-45a8-8776-533c9dcf39a2] has error [0] {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:35:49,988Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [5f613628-83b5-45a8-8776-533c9dcf39a2] error allowed to propagate {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[WARN ] 2020-02-03T01:35:50,009Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5f613628-83b5-45a8-8776-533c9dcf39a2] errored, dumping all transitions:

 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.856Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5f613628-83b5-45a8-8776-533c9dcf39a2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Invocation, sessionId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=ADAA882463528DA8BF2965A1E753FCF5C7A54ACFCB76DB6C80795BC4120F3245), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54f1f30a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54f1f30a])
    SignalFlowHasStarted(flowId=[5f613628-83b5-45a8-8776-533c9dcf39a2])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6931035224975067734), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1275531309275706117), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6931035224975067734-7163259649234818517-0-0), senderUUID=33107d3f-5b1a-4039-a1ac-30e27348e1ca))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-1275531309275706117): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6931035224975067734)), errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54f1f30a]
    []


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.859Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.862Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.878Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), maySkipCheckpoint=false, fiber=F3BB01279C22FB71449C6123EA4FD5397E1222905D88D9CDB564967020689D46, )
  Actions: 
    PersistCheckpoint(id=[5f613628-83b5-45a8-8776-533c9dcf39a2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Invocation, sessionId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1275531309275706117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6931035224975067734)), errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), frozenFiber=F3BB01279C22FB71449C6123EA4FD5397E1222905D88D9CDB564967020689D46), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=ADAA882463528DA8BF2965A1E753FCF5C7A54ACFCB76DB6C80795BC4120F3245)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), frozenFiber=F3BB01279C22FB71449C6123EA4FD5397E1222905D88D9CDB564967020689D46)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.880Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-1275531309275706117).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.893Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.914Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=4DE5E54ACB9195930F6C6044C9B2D36FC030E10709FBE6AC78C99B4BE2B84F26, )
  Actions: 
    PersistCheckpoint(id=[5f613628-83b5-45a8-8776-533c9dcf39a2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Invocation, sessionId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1275531309275706117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6931035224975067734)), errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=4DE5E54ACB9195930F6C6044C9B2D36FC030E10709FBE6AC78C99B4BE2B84F26), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    F3BB01279C22FB71449C6123EA4FD5397E1222905D88D9CDB564967020689D46
    4DE5E54ACB9195930F6C6044C9B2D36FC030E10709FBE6AC78C99B4BE2B84F26
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.917Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6931035224975067734), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6931035224975067734-7163259649234818517-2-0), senderUUID=33107d3f-5b1a-4039-a1ac-30e27348e1ca))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.919Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.926Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.932Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), maySkipCheckpoint=false, fiber=09ECD2468259A30BF30D04BFB7E57538ADE225B75E372EECE91720628F0D6954, )
  Actions: 
    PersistCheckpoint(id=[5f613628-83b5-45a8-8776-533c9dcf39a2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Invocation, sessionId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1275531309275706117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6931035224975067734)), errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), frozenFiber=09ECD2468259A30BF30D04BFB7E57538ADE225B75E372EECE91720628F0D6954), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))])
checkpoint.flowState.frozenFiber.hash: 
    4DE5E54ACB9195930F6C6044C9B2D36FC030E10709FBE6AC78C99B4BE2B84F26
    09ECD2468259A30BF30D04BFB7E57538ADE225B75E372EECE91720628F0D6954
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.932Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.975Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1275531309275706117), payload=net.corda.node.services.statemachine.EndSessionMessage@7aa0044), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47397109, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1275531309275706117).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6931035224975067734))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47397109]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.976Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.976Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.989Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1284633539909897085, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.993Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.994Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[WARN ] 2020-02-03T01:35:50,010Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5f613628-83b5-45a8-8776-533c9dcf39a2] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:35:50,011Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[WARN ] 2020-02-03T01:35:50,061Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5f613628-83b5-45a8-8776-533c9dcf39a2] errored, dumping all transitions:

 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.856Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5f613628-83b5-45a8-8776-533c9dcf39a2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Invocation, sessionId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=ADAA882463528DA8BF2965A1E753FCF5C7A54ACFCB76DB6C80795BC4120F3245), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54f1f30a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54f1f30a])
    SignalFlowHasStarted(flowId=[5f613628-83b5-45a8-8776-533c9dcf39a2])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6931035224975067734), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1275531309275706117), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6931035224975067734-7163259649234818517-0-0), senderUUID=33107d3f-5b1a-4039-a1ac-30e27348e1ca))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-1275531309275706117): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6931035224975067734)), errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54f1f30a]
    []


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.859Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.862Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.878Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), maySkipCheckpoint=false, fiber=F3BB01279C22FB71449C6123EA4FD5397E1222905D88D9CDB564967020689D46, )
  Actions: 
    PersistCheckpoint(id=[5f613628-83b5-45a8-8776-533c9dcf39a2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Invocation, sessionId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1275531309275706117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6931035224975067734)), errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), frozenFiber=F3BB01279C22FB71449C6123EA4FD5397E1222905D88D9CDB564967020689D46), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=ADAA882463528DA8BF2965A1E753FCF5C7A54ACFCB76DB6C80795BC4120F3245)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), frozenFiber=F3BB01279C22FB71449C6123EA4FD5397E1222905D88D9CDB564967020689D46)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.880Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-1275531309275706117).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.893Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.914Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=4DE5E54ACB9195930F6C6044C9B2D36FC030E10709FBE6AC78C99B4BE2B84F26, )
  Actions: 
    PersistCheckpoint(id=[5f613628-83b5-45a8-8776-533c9dcf39a2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Invocation, sessionId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1275531309275706117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6931035224975067734)), errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=4DE5E54ACB9195930F6C6044C9B2D36FC030E10709FBE6AC78C99B4BE2B84F26), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    F3BB01279C22FB71449C6123EA4FD5397E1222905D88D9CDB564967020689D46
    4DE5E54ACB9195930F6C6044C9B2D36FC030E10709FBE6AC78C99B4BE2B84F26
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.917Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6931035224975067734), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6931035224975067734-7163259649234818517-2-0), senderUUID=33107d3f-5b1a-4039-a1ac-30e27348e1ca))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.919Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.926Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.932Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), maySkipCheckpoint=false, fiber=09ECD2468259A30BF30D04BFB7E57538ADE225B75E372EECE91720628F0D6954, )
  Actions: 
    PersistCheckpoint(id=[5f613628-83b5-45a8-8776-533c9dcf39a2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Invocation, sessionId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1275531309275706117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6931035224975067734)), errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), frozenFiber=09ECD2468259A30BF30D04BFB7E57538ADE225B75E372EECE91720628F0D6954), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))])
checkpoint.flowState.frozenFiber.hash: 
    4DE5E54ACB9195930F6C6044C9B2D36FC030E10709FBE6AC78C99B4BE2B84F26
    09ECD2468259A30BF30D04BFB7E57538ADE225B75E372EECE91720628F0D6954
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.932Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.975Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1275531309275706117), payload=net.corda.node.services.statemachine.EndSessionMessage@7aa0044), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47397109, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1275531309275706117).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6931035224975067734))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47397109]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.976Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.976Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.989Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1284633539909897085, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.993Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:49.994Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [5f613628-83b5-45a8-8776-533c9dcf39a2] ---
  Timestamp: 2020-02-03T01:35:50.057Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=1284633539909897085)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)], senderUUID=33107d3f-5b1a-4039-a1ac-30e27348e1ca)
    CreateTransaction
    RemoveCheckpoint(id=[5f613628-83b5-45a8-8776-533c9dcf39a2])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47397109])
    ReleaseSoftLocks(uuid=5f613628-83b5-45a8-8776-533c9dcf39a2)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47397109])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-1275531309275706117)])
    RemoveFlow(flowId=[5f613628-83b5-45a8-8776-533c9dcf39a2], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=1284633539909897085, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Invocation, sessionId=9da13451-acd7-430b-8865-29f94e4d89b0, timestamp: 2020-02-03T01:35:49.829Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1275531309275706117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6931035224975067734-7163259649234818517)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1275531309275706117))]), frozenFiber=09ECD2468259A30BF30D04BFB7E57538ADE225B75E372EECE91720628F0D6954), errorState=Errored(errors=[FlowError(errorId=1284633539909897085, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@6822a20f, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=33107d3f-5b1a-4039-a1ac-30e27348e1ca))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47397109]
    []
 {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
[WARN ] 2020-02-03T01:35:50,061Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5f613628-83b5-45a8-8776-533c9dcf39a2] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=5f613628-83b5-45a8-8776-533c9dcf39a2, invocation_id=9da13451-acd7-430b-8865-29f94e4d89b0, invocation_timestamp=2020-02-03T01:35:49.829Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9da13451-acd7-430b-8865-29f94e4d89b0, session_timestamp=2020-02-03T01:35:49.829Z, thread-id=105, tx_id=95A5797090222509A2BF6D6AF258A85D584AD8D6B334CE7011512510F3C379FE}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1275531309275706117) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:36:12,875Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:36:14,079Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013608.242/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:36:14,083Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013608.242/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:36:14,105Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013608.242/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:36:14,196Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:36:14,780Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:36:14,855Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:14,856Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:14,857Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:14,992Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:36:08.199Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:36:18,736Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:36:18,739Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013608.242/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:36:18,739Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:36:18,741Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:36:18,787Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:18,792Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:20,539Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:21,052Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:36:21,098Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:36:21,113Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:36:21,113Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:36:21,366Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:36:21,376Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:36:21,377Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693781377) {}
[INFO ] 2020-02-03T01:36:21,384Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:21,511Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693781377) {}
[INFO ] 2020-02-03T01:36:21,561Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:36:21,586Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693781377) {}
[INFO ] 2020-02-03T01:36:21,634Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:21,666Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:36:21,670Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:36:21,673Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:36:21,965Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693781377) {}
[INFO ] 2020-02-03T01:36:21,981Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693781377) {}
[INFO ] 2020-02-03T01:36:21,983Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:21,983Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693781377) {}
[INFO ] 2020-02-03T01:36:21,983Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:21,987Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013608.242/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:36:21,988Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013608.242/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:36:21,988Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013608.242/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:36:22,025Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:36:22,037Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:36:22,061Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:22,063Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:22,063Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:22,067Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:36:08.199Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:36:22,478Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:36:22,480Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013608.242/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:36:22,480Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:36:22,481Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:36:22,483Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:22,483Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:22,587Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:22,597Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:36:22,599Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:36:22,599Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:36:22,625Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:22,626Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:22,724Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:22,727Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:36:22,727Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693782727) {}
[INFO ] 2020-02-03T01:36:22,729Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:22,735Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693782727) {}
[INFO ] 2020-02-03T01:36:22,743Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:36:22,758Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693782727) {}
[INFO ] 2020-02-03T01:36:22,774Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:22,810Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:36:22,818Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693782727) {}
[INFO ] 2020-02-03T01:36:22,821Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693781377) {}
[INFO ] 2020-02-03T01:36:22,822Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:22,836Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693782727) {}
[INFO ] 2020-02-03T01:36:22,842Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:22,855Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693782727) {}
[INFO ] 2020-02-03T01:36:22,855Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:22,855Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693782727) {}
[INFO ] 2020-02-03T01:36:22,856Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:22,858Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013608.242/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:36:22,859Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013608.242/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:36:22,859Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013608.242/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:36:22,887Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:36:22,893Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:36:22,911Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:22,912Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:22,912Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:22,917Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:36:08.199Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:36:23,339Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:36:23,341Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013608.242/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:36:23,341Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:36:23,342Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:36:23,344Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:23,344Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:23,404Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:23,411Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:36:23,414Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:36:23,422Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:36:23,434Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:23,435Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:23,522Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:23,530Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:36:23,531Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693783531) {}
[INFO ] 2020-02-03T01:36:23,548Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:23,566Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693783531) {}
[INFO ] 2020-02-03T01:36:23,579Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:36:23,604Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693783531) {}
[INFO ] 2020-02-03T01:36:23,632Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:23,677Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:36:23,688Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693783531) {}
[INFO ] 2020-02-03T01:36:23,698Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693781377) {}
[INFO ] 2020-02-03T01:36:23,699Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:23,708Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693783531) {}
[INFO ] 2020-02-03T01:36:23,710Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:23,732Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693782727) {}
[INFO ] 2020-02-03T01:36:23,733Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:23,753Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693783531) {}
[INFO ] 2020-02-03T01:36:23,755Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:23,765Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693783531) {}
[INFO ] 2020-02-03T01:36:23,766Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:23,766Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693783531) {}
[INFO ] 2020-02-03T01:36:23,766Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:36:23,989Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0bace1c0-448b-4dce-9fa2-106858588dde, invocation_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, invocation_timestamp=2020-02-03T01:36:23.788Z, origin=Only For Testing, session_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, session_timestamp=2020-02-03T01:36:23.788Z, thread-id=105}
[WARN ] 2020-02-03T01:36:23,989Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0bace1c0-448b-4dce-9fa2-106858588dde, invocation_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, invocation_timestamp=2020-02-03T01:36:23.788Z, origin=Only For Testing, session_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, session_timestamp=2020-02-03T01:36:23.788Z, thread-id=105}
[INFO ] 2020-02-03T01:36:25,283Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0bace1c0-448b-4dce-9fa2-106858588dde, invocation_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, invocation_timestamp=2020-02-03T01:36:23.788Z, origin=Only For Testing, session_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, session_timestamp=2020-02-03T01:36:23.788Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[INFO ] 2020-02-03T01:36:25,283Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0bace1c0-448b-4dce-9fa2-106858588dde, invocation_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, invocation_timestamp=2020-02-03T01:36:23.788Z, origin=Only For Testing, session_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, session_timestamp=2020-02-03T01:36:23.788Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[INFO ] 2020-02-03T01:36:25,332Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0bace1c0-448b-4dce-9fa2-106858588dde, invocation_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, invocation_timestamp=2020-02-03T01:36:23.788Z, origin=Only For Testing, session_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, session_timestamp=2020-02-03T01:36:23.788Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[INFO ] 2020-02-03T01:36:25,482Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[WARN ] 2020-02-03T01:36:25,490Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[INFO ] 2020-02-03T01:36:25,514Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[INFO ] 2020-02-03T01:36:25,553Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0bace1c0-448b-4dce-9fa2-106858588dde, invocation_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, invocation_timestamp=2020-02-03T01:36:23.788Z, origin=Only For Testing, session_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, session_timestamp=2020-02-03T01:36:23.788Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[INFO ] 2020-02-03T01:36:25,553Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0bace1c0-448b-4dce-9fa2-106858588dde, invocation_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, invocation_timestamp=2020-02-03T01:36:23.788Z, origin=Only For Testing, session_id=9f62b0f0-53e1-47a7-8599-cbce2bae3e0b, session_timestamp=2020-02-03T01:36:23.788Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[INFO ] 2020-02-03T01:36:25,578Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:36:25,580Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Invocation, sessionId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1616098171159923601)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), frozenFiber=F02F23A808D4030F8E05BE0842F5EAB68E7D8D35143080BF48066C3EC5AEAFAC), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@7744085b, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@704601e2], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=a84b3859-4ed0-44a9-9552-1c5be045bccb) {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[INFO ] 2020-02-03T01:36:25,582Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] has error [0] {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:36:25,583Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] error allowed to propagate {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[WARN ] 2020-02-03T01:36:25,603Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] errored, dumping all transitions:

 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.456Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fbcc9b60-a65f-4b4f-a5e3-b81474646504], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Invocation, sessionId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=5C20D06579DBCF6C07A160ED2C6FB4B8935FFE1B3A9AFCE03D8D38DC39CA5EEB), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60f3c2f2])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60f3c2f2])
    SignalFlowHasStarted(flowId=[fbcc9b60-a65f-4b4f-a5e3-b81474646504])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2940320142229062807), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1616098171159923601), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2940320142229062807-3838562766719885938-0-0), senderUUID=a84b3859-4ed0-44a9-9552-1c5be045bccb))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-1616098171159923601): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2940320142229062807)), errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60f3c2f2]
    []


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.459Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.461Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.477Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), maySkipCheckpoint=false, fiber=D54BB2440F8C164E88E059931A85A81B9BF05DE941D8075299E469671FCBAB19, )
  Actions: 
    PersistCheckpoint(id=[fbcc9b60-a65f-4b4f-a5e3-b81474646504], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Invocation, sessionId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1616098171159923601)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2940320142229062807)), errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), frozenFiber=D54BB2440F8C164E88E059931A85A81B9BF05DE941D8075299E469671FCBAB19), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=5C20D06579DBCF6C07A160ED2C6FB4B8935FFE1B3A9AFCE03D8D38DC39CA5EEB)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), frozenFiber=D54BB2440F8C164E88E059931A85A81B9BF05DE941D8075299E469671FCBAB19)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.480Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-1616098171159923601).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.490Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.509Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=AF9C45DB5194BCB4D0E73DFEF812F2E01C98123FEBE8D24BC5C8B16C2D0E3746, )
  Actions: 
    PersistCheckpoint(id=[fbcc9b60-a65f-4b4f-a5e3-b81474646504], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Invocation, sessionId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1616098171159923601)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2940320142229062807)), errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=AF9C45DB5194BCB4D0E73DFEF812F2E01C98123FEBE8D24BC5C8B16C2D0E3746), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    D54BB2440F8C164E88E059931A85A81B9BF05DE941D8075299E469671FCBAB19
    AF9C45DB5194BCB4D0E73DFEF812F2E01C98123FEBE8D24BC5C8B16C2D0E3746
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.513Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2940320142229062807), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2940320142229062807-3838562766719885938-2-0), senderUUID=a84b3859-4ed0-44a9-9552-1c5be045bccb))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.514Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.530Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.535Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), maySkipCheckpoint=false, fiber=F02F23A808D4030F8E05BE0842F5EAB68E7D8D35143080BF48066C3EC5AEAFAC, )
  Actions: 
    PersistCheckpoint(id=[fbcc9b60-a65f-4b4f-a5e3-b81474646504], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Invocation, sessionId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1616098171159923601)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2940320142229062807)), errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), frozenFiber=F02F23A808D4030F8E05BE0842F5EAB68E7D8D35143080BF48066C3EC5AEAFAC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))])
checkpoint.flowState.frozenFiber.hash: 
    AF9C45DB5194BCB4D0E73DFEF812F2E01C98123FEBE8D24BC5C8B16C2D0E3746
    F02F23A808D4030F8E05BE0842F5EAB68E7D8D35143080BF48066C3EC5AEAFAC
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.535Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.577Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1616098171159923601), payload=net.corda.node.services.statemachine.EndSessionMessage@8c2cb66), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@704601e2, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1616098171159923601).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2940320142229062807))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@704601e2]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.577Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.578Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.587Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5593162407305686244, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.589Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.590Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[WARN ] 2020-02-03T01:36:25,604Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:36:25,605Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[WARN ] 2020-02-03T01:36:25,631Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] errored, dumping all transitions:

 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.456Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fbcc9b60-a65f-4b4f-a5e3-b81474646504], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Invocation, sessionId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=5C20D06579DBCF6C07A160ED2C6FB4B8935FFE1B3A9AFCE03D8D38DC39CA5EEB), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60f3c2f2])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60f3c2f2])
    SignalFlowHasStarted(flowId=[fbcc9b60-a65f-4b4f-a5e3-b81474646504])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2940320142229062807), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1616098171159923601), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2940320142229062807-3838562766719885938-0-0), senderUUID=a84b3859-4ed0-44a9-9552-1c5be045bccb))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-1616098171159923601): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2940320142229062807)), errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60f3c2f2]
    []


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.459Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.461Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.477Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), maySkipCheckpoint=false, fiber=D54BB2440F8C164E88E059931A85A81B9BF05DE941D8075299E469671FCBAB19, )
  Actions: 
    PersistCheckpoint(id=[fbcc9b60-a65f-4b4f-a5e3-b81474646504], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Invocation, sessionId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1616098171159923601)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2940320142229062807)), errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), frozenFiber=D54BB2440F8C164E88E059931A85A81B9BF05DE941D8075299E469671FCBAB19), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=5C20D06579DBCF6C07A160ED2C6FB4B8935FFE1B3A9AFCE03D8D38DC39CA5EEB)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), frozenFiber=D54BB2440F8C164E88E059931A85A81B9BF05DE941D8075299E469671FCBAB19)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.480Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-1616098171159923601).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.490Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.509Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=AF9C45DB5194BCB4D0E73DFEF812F2E01C98123FEBE8D24BC5C8B16C2D0E3746, )
  Actions: 
    PersistCheckpoint(id=[fbcc9b60-a65f-4b4f-a5e3-b81474646504], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Invocation, sessionId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1616098171159923601)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2940320142229062807)), errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=AF9C45DB5194BCB4D0E73DFEF812F2E01C98123FEBE8D24BC5C8B16C2D0E3746), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    D54BB2440F8C164E88E059931A85A81B9BF05DE941D8075299E469671FCBAB19
    AF9C45DB5194BCB4D0E73DFEF812F2E01C98123FEBE8D24BC5C8B16C2D0E3746
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.513Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2940320142229062807), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2940320142229062807-3838562766719885938-2-0), senderUUID=a84b3859-4ed0-44a9-9552-1c5be045bccb))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.514Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.530Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.535Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), maySkipCheckpoint=false, fiber=F02F23A808D4030F8E05BE0842F5EAB68E7D8D35143080BF48066C3EC5AEAFAC, )
  Actions: 
    PersistCheckpoint(id=[fbcc9b60-a65f-4b4f-a5e3-b81474646504], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Invocation, sessionId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1616098171159923601)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2940320142229062807)), errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), frozenFiber=F02F23A808D4030F8E05BE0842F5EAB68E7D8D35143080BF48066C3EC5AEAFAC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))])
checkpoint.flowState.frozenFiber.hash: 
    AF9C45DB5194BCB4D0E73DFEF812F2E01C98123FEBE8D24BC5C8B16C2D0E3746
    F02F23A808D4030F8E05BE0842F5EAB68E7D8D35143080BF48066C3EC5AEAFAC
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.535Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.577Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1616098171159923601), payload=net.corda.node.services.statemachine.EndSessionMessage@8c2cb66), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@704601e2, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1616098171159923601).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2940320142229062807))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@704601e2]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.577Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.578Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.587Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5593162407305686244, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.589Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.590Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] ---
  Timestamp: 2020-02-03T01:36:25.621Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5593162407305686244)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)], senderUUID=a84b3859-4ed0-44a9-9552-1c5be045bccb)
    CreateTransaction
    RemoveCheckpoint(id=[fbcc9b60-a65f-4b4f-a5e3-b81474646504])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@704601e2])
    ReleaseSoftLocks(uuid=fbcc9b60-a65f-4b4f-a5e3-b81474646504)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@704601e2])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-1616098171159923601)])
    RemoveFlow(flowId=[fbcc9b60-a65f-4b4f-a5e3-b81474646504], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5593162407305686244, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Invocation, sessionId=7560d3c7-11c2-42ad-9575-af15891e6b73, timestamp: 2020-02-03T01:36:25.432Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1616098171159923601)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2940320142229062807-3838562766719885938)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1616098171159923601))]), frozenFiber=F02F23A808D4030F8E05BE0842F5EAB68E7D8D35143080BF48066C3EC5AEAFAC), errorState=Errored(errors=[FlowError(errorId=-5593162407305686244, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@7744085b, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=a84b3859-4ed0-44a9-9552-1c5be045bccb))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@704601e2]
    []
 {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
[WARN ] 2020-02-03T01:36:25,631Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fbcc9b60-a65f-4b4f-a5e3-b81474646504] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=fbcc9b60-a65f-4b4f-a5e3-b81474646504, invocation_id=7560d3c7-11c2-42ad-9575-af15891e6b73, invocation_timestamp=2020-02-03T01:36:25.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7560d3c7-11c2-42ad-9575-af15891e6b73, session_timestamp=2020-02-03T01:36:25.432Z, thread-id=105, tx_id=C0AAF46EB57A647EDD4C21C408A8172A7E45232248102F0EB5C79828392A4F47}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1616098171159923601) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:36:44,547Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:36:45,639Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013640.088/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:36:45,643Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013640.088/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:36:45,665Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013640.088/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:36:45,750Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:36:46,339Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:36:46,417Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:46,418Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:46,418Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:46,567Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:36:40.046Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:36:50,509Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:36:50,512Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013640.088/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:36:50,512Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:36:50,513Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:36:50,555Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:50,559Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:52,224Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:52,762Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:36:52,809Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:36:52,824Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:36:52,824Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:36:53,049Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:36:53,057Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:36:53,059Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693813059) {}
[INFO ] 2020-02-03T01:36:53,063Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:53,191Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693813059) {}
[INFO ] 2020-02-03T01:36:53,238Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:36:53,255Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693813059) {}
[INFO ] 2020-02-03T01:36:53,289Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:53,337Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:36:53,341Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:36:53,343Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:36:53,630Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693813059) {}
[INFO ] 2020-02-03T01:36:53,645Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693813059) {}
[INFO ] 2020-02-03T01:36:53,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:53,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693813059) {}
[INFO ] 2020-02-03T01:36:53,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:53,649Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013640.088/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:36:53,650Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013640.088/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:36:53,650Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013640.088/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:36:53,679Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:36:53,685Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:36:53,711Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:53,712Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:53,714Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:53,717Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:36:40.046Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:36:54,153Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:36:54,159Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013640.088/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:36:54,159Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:36:54,161Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:36:54,163Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:54,163Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:54,253Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:54,263Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:36:54,266Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:36:54,268Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:36:54,285Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:54,285Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:54,380Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:54,386Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:36:54,386Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693814386) {}
[INFO ] 2020-02-03T01:36:54,389Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:54,398Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693814386) {}
[INFO ] 2020-02-03T01:36:54,406Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:36:54,419Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693814386) {}
[INFO ] 2020-02-03T01:36:54,452Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:54,480Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:36:54,488Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693814386) {}
[INFO ] 2020-02-03T01:36:54,491Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693813059) {}
[INFO ] 2020-02-03T01:36:54,494Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:54,503Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693814386) {}
[INFO ] 2020-02-03T01:36:54,504Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:54,513Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693814386) {}
[INFO ] 2020-02-03T01:36:54,513Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:54,513Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693814386) {}
[INFO ] 2020-02-03T01:36:54,513Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:54,515Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013640.088/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:36:54,516Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013640.088/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:36:54,516Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013640.088/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:36:54,542Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:36:54,551Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:36:54,568Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:54,568Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:54,568Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:36:54,573Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:36:40.046Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:36:55,041Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:36:55,043Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013640.088/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:36:55,043Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:36:55,044Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:36:55,046Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:55,046Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:55,124Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:36:55,133Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:36:55,135Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:36:55,136Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:36:55,149Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:55,149Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:55,257Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:36:55,262Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:36:55,263Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693815263) {}
[INFO ] 2020-02-03T01:36:55,265Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:55,302Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693815263) {}
[INFO ] 2020-02-03T01:36:55,309Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:36:55,314Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693815263) {}
[INFO ] 2020-02-03T01:36:55,329Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:55,364Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:36:55,372Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693815263) {}
[INFO ] 2020-02-03T01:36:55,375Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693813059) {}
[INFO ] 2020-02-03T01:36:55,376Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:55,385Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693815263) {}
[INFO ] 2020-02-03T01:36:55,387Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:55,400Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693814386) {}
[INFO ] 2020-02-03T01:36:55,401Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:55,409Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693815263) {}
[INFO ] 2020-02-03T01:36:55,410Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:36:55,418Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693815263) {}
[INFO ] 2020-02-03T01:36:55,418Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:36:55,418Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693815263) {}
[INFO ] 2020-02-03T01:36:55,418Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:36:55,612Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bc5a6a06-7b07-4832-8692-77ae62b415fc, invocation_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, invocation_timestamp=2020-02-03T01:36:55.439Z, origin=Only For Testing, session_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, session_timestamp=2020-02-03T01:36:55.439Z, thread-id=105}
[WARN ] 2020-02-03T01:36:55,612Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bc5a6a06-7b07-4832-8692-77ae62b415fc, invocation_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, invocation_timestamp=2020-02-03T01:36:55.439Z, origin=Only For Testing, session_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, session_timestamp=2020-02-03T01:36:55.439Z, thread-id=105}
[INFO ] 2020-02-03T01:36:56,836Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bc5a6a06-7b07-4832-8692-77ae62b415fc, invocation_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, invocation_timestamp=2020-02-03T01:36:55.439Z, origin=Only For Testing, session_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, session_timestamp=2020-02-03T01:36:55.439Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[INFO ] 2020-02-03T01:36:56,836Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bc5a6a06-7b07-4832-8692-77ae62b415fc, invocation_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, invocation_timestamp=2020-02-03T01:36:55.439Z, origin=Only For Testing, session_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, session_timestamp=2020-02-03T01:36:55.439Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[INFO ] 2020-02-03T01:36:56,888Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bc5a6a06-7b07-4832-8692-77ae62b415fc, invocation_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, invocation_timestamp=2020-02-03T01:36:55.439Z, origin=Only For Testing, session_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, session_timestamp=2020-02-03T01:36:55.439Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[INFO ] 2020-02-03T01:36:57,064Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[WARN ] 2020-02-03T01:36:57,080Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[INFO ] 2020-02-03T01:36:57,106Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[INFO ] 2020-02-03T01:36:57,134Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bc5a6a06-7b07-4832-8692-77ae62b415fc, invocation_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, invocation_timestamp=2020-02-03T01:36:55.439Z, origin=Only For Testing, session_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, session_timestamp=2020-02-03T01:36:55.439Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[INFO ] 2020-02-03T01:36:57,134Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bc5a6a06-7b07-4832-8692-77ae62b415fc, invocation_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, invocation_timestamp=2020-02-03T01:36:55.439Z, origin=Only For Testing, session_id=1c4f6cc9-4056-4d4c-b460-06a2bd9ecdd4, session_timestamp=2020-02-03T01:36:55.439Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[INFO ] 2020-02-03T01:36:57,159Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:36:57,161Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Invocation, sessionId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8667163722666351008)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), frozenFiber=BE490D4CDABDCF609C8A8DBA4F15C93DDACE545A93B26EE8E0B88D64343C3059), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@163fae14, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=50ac513d-b8d1-48df-b365-3e8acc663c6c) {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[INFO ] 2020-02-03T01:36:57,163Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] has error [0] {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:36:57,164Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] error allowed to propagate {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[WARN ] 2020-02-03T01:36:57,193Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] errored, dumping all transitions:

 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.032Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[aea26d08-eb95-4e3a-8429-7fb08b57ca60], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Invocation, sessionId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=0EDA770F87D5453A4C98E77CFB924AD408E7A621EA40FBE9253181CC5B5F8099), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b])
    SignalFlowHasStarted(flowId=[aea26d08-eb95-4e3a-8429-7fb08b57ca60])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7767463019848933011), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8667163722666351008), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7767463019848933011--4990204907721251348-0-0), senderUUID=50ac513d-b8d1-48df-b365-3e8acc663c6c))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8667163722666351008): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7767463019848933011)), errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b]
    []


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.035Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.038Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.054Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), maySkipCheckpoint=false, fiber=B4DC77E6DD3A3C9478FE80551CE5178FECF94A4EEDD2B22A4BED83964808AA55, )
  Actions: 
    PersistCheckpoint(id=[aea26d08-eb95-4e3a-8429-7fb08b57ca60], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Invocation, sessionId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8667163722666351008)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7767463019848933011)), errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), frozenFiber=B4DC77E6DD3A3C9478FE80551CE5178FECF94A4EEDD2B22A4BED83964808AA55), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=0EDA770F87D5453A4C98E77CFB924AD408E7A621EA40FBE9253181CC5B5F8099)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), frozenFiber=B4DC77E6DD3A3C9478FE80551CE5178FECF94A4EEDD2B22A4BED83964808AA55)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.057Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8667163722666351008).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.081Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.101Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=540E3DE539CE5C9F0EFFD389941FC7F909364C28C2A462E969FDB49F0FF66870, )
  Actions: 
    PersistCheckpoint(id=[aea26d08-eb95-4e3a-8429-7fb08b57ca60], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Invocation, sessionId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8667163722666351008)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7767463019848933011)), errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=540E3DE539CE5C9F0EFFD389941FC7F909364C28C2A462E969FDB49F0FF66870), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    B4DC77E6DD3A3C9478FE80551CE5178FECF94A4EEDD2B22A4BED83964808AA55
    540E3DE539CE5C9F0EFFD389941FC7F909364C28C2A462E969FDB49F0FF66870
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.104Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7767463019848933011), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7767463019848933011--4990204907721251348-2-0), senderUUID=50ac513d-b8d1-48df-b365-3e8acc663c6c))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.106Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.112Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.117Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), maySkipCheckpoint=false, fiber=BE490D4CDABDCF609C8A8DBA4F15C93DDACE545A93B26EE8E0B88D64343C3059, )
  Actions: 
    PersistCheckpoint(id=[aea26d08-eb95-4e3a-8429-7fb08b57ca60], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Invocation, sessionId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8667163722666351008)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7767463019848933011)), errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), frozenFiber=BE490D4CDABDCF609C8A8DBA4F15C93DDACE545A93B26EE8E0B88D64343C3059), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))])
checkpoint.flowState.frozenFiber.hash: 
    540E3DE539CE5C9F0EFFD389941FC7F909364C28C2A462E969FDB49F0FF66870
    BE490D4CDABDCF609C8A8DBA4F15C93DDACE545A93B26EE8E0B88D64343C3059
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.117Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.158Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8667163722666351008), payload=net.corda.node.services.statemachine.EndSessionMessage@388ef2f6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8667163722666351008).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=7767463019848933011))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.159Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.159Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.165Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3649216882729720437, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.168Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.178Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[WARN ] 2020-02-03T01:36:57,193Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:36:57,197Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[WARN ] 2020-02-03T01:36:57,240Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] errored, dumping all transitions:

 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.032Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[aea26d08-eb95-4e3a-8429-7fb08b57ca60], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Invocation, sessionId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=0EDA770F87D5453A4C98E77CFB924AD408E7A621EA40FBE9253181CC5B5F8099), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b])
    SignalFlowHasStarted(flowId=[aea26d08-eb95-4e3a-8429-7fb08b57ca60])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7767463019848933011), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8667163722666351008), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7767463019848933011--4990204907721251348-0-0), senderUUID=50ac513d-b8d1-48df-b365-3e8acc663c6c))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8667163722666351008): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7767463019848933011)), errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6e1ffd8b]
    []


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.035Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.038Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.054Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), maySkipCheckpoint=false, fiber=B4DC77E6DD3A3C9478FE80551CE5178FECF94A4EEDD2B22A4BED83964808AA55, )
  Actions: 
    PersistCheckpoint(id=[aea26d08-eb95-4e3a-8429-7fb08b57ca60], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Invocation, sessionId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8667163722666351008)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7767463019848933011)), errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), frozenFiber=B4DC77E6DD3A3C9478FE80551CE5178FECF94A4EEDD2B22A4BED83964808AA55), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=0EDA770F87D5453A4C98E77CFB924AD408E7A621EA40FBE9253181CC5B5F8099)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), frozenFiber=B4DC77E6DD3A3C9478FE80551CE5178FECF94A4EEDD2B22A4BED83964808AA55)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.057Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8667163722666351008).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.081Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.101Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=540E3DE539CE5C9F0EFFD389941FC7F909364C28C2A462E969FDB49F0FF66870, )
  Actions: 
    PersistCheckpoint(id=[aea26d08-eb95-4e3a-8429-7fb08b57ca60], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Invocation, sessionId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8667163722666351008)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7767463019848933011)), errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=540E3DE539CE5C9F0EFFD389941FC7F909364C28C2A462E969FDB49F0FF66870), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    B4DC77E6DD3A3C9478FE80551CE5178FECF94A4EEDD2B22A4BED83964808AA55
    540E3DE539CE5C9F0EFFD389941FC7F909364C28C2A462E969FDB49F0FF66870
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.104Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7767463019848933011), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7767463019848933011--4990204907721251348-2-0), senderUUID=50ac513d-b8d1-48df-b365-3e8acc663c6c))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.106Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.112Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.117Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), maySkipCheckpoint=false, fiber=BE490D4CDABDCF609C8A8DBA4F15C93DDACE545A93B26EE8E0B88D64343C3059, )
  Actions: 
    PersistCheckpoint(id=[aea26d08-eb95-4e3a-8429-7fb08b57ca60], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Invocation, sessionId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8667163722666351008)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7767463019848933011)), errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), frozenFiber=BE490D4CDABDCF609C8A8DBA4F15C93DDACE545A93B26EE8E0B88D64343C3059), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))])
checkpoint.flowState.frozenFiber.hash: 
    540E3DE539CE5C9F0EFFD389941FC7F909364C28C2A462E969FDB49F0FF66870
    BE490D4CDABDCF609C8A8DBA4F15C93DDACE545A93B26EE8E0B88D64343C3059
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.117Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.158Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8667163722666351008), payload=net.corda.node.services.statemachine.EndSessionMessage@388ef2f6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8667163722666351008).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=7767463019848933011))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.159Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.159Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.165Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3649216882729720437, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.168Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.178Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] ---
  Timestamp: 2020-02-03T01:36:57.231Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-3649216882729720437)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)], senderUUID=50ac513d-b8d1-48df-b365-3e8acc663c6c)
    CreateTransaction
    RemoveCheckpoint(id=[aea26d08-eb95-4e3a-8429-7fb08b57ca60])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3])
    ReleaseSoftLocks(uuid=aea26d08-eb95-4e3a-8429-7fb08b57ca60)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8667163722666351008)])
    RemoveFlow(flowId=[aea26d08-eb95-4e3a-8429-7fb08b57ca60], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3649216882729720437, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Invocation, sessionId=095c81e9-262e-4375-9306-e41ec22c3a33, timestamp: 2020-02-03T01:36:56.996Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8667163722666351008)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-7767463019848933011--4990204907721251348)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8667163722666351008))]), frozenFiber=BE490D4CDABDCF609C8A8DBA4F15C93DDACE545A93B26EE8E0B88D64343C3059), errorState=Errored(errors=[FlowError(errorId=-3649216882729720437, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@163fae14, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=50ac513d-b8d1-48df-b365-3e8acc663c6c))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@40170ed3]
    []
 {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
[WARN ] 2020-02-03T01:36:57,240Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [aea26d08-eb95-4e3a-8429-7fb08b57ca60] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=aea26d08-eb95-4e3a-8429-7fb08b57ca60, invocation_id=095c81e9-262e-4375-9306-e41ec22c3a33, invocation_timestamp=2020-02-03T01:36:56.996Z, origin=O=Mock Company 1, L=London, C=GB, session_id=095c81e9-262e-4375-9306-e41ec22c3a33, session_timestamp=2020-02-03T01:36:56.996Z, thread-id=105, tx_id=332240B850E1B1F97383054EA709699FD3BECC8A1ECF231E06CEC0AB33BBCD54}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8667163722666351008) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:37:09,347Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:37:10,478Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013704.667/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:37:10,482Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013704.667/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:37:10,505Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013704.667/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:37:10,588Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:37:11,199Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:37:11,270Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:11,271Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:11,272Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:11,413Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:37:04.624Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:37:15,025Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:37:15,028Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013704.667/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:37:15,028Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:37:15,029Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:37:15,115Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:15,123Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:16,925Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:17,434Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:37:17,489Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:37:17,505Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:37:17,505Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:37:17,731Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:37:17,753Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:37:17,753Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693837753) {}
[INFO ] 2020-02-03T01:37:17,762Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:17,893Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693837753) {}
[INFO ] 2020-02-03T01:37:17,936Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:37:17,952Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693837753) {}
[INFO ] 2020-02-03T01:37:17,978Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:18,034Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:37:18,043Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:37:18,047Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:37:18,367Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693837753) {}
[INFO ] 2020-02-03T01:37:18,381Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693837753) {}
[INFO ] 2020-02-03T01:37:18,382Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:18,382Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693837753) {}
[INFO ] 2020-02-03T01:37:18,382Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:18,385Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013704.667/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:37:18,385Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013704.667/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:37:18,386Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013704.667/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:37:18,421Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:37:18,429Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:37:18,456Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:18,456Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:18,456Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:18,460Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:37:04.624Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:37:18,852Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:37:18,854Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013704.667/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:37:18,855Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:37:18,856Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:37:18,860Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:18,861Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:19,004Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:19,015Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:37:19,019Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:37:19,019Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:37:19,034Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:19,035Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:19,127Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:19,132Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:37:19,132Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693839132) {}
[INFO ] 2020-02-03T01:37:19,134Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:19,144Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693839132) {}
[INFO ] 2020-02-03T01:37:19,155Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:37:19,175Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693839132) {}
[INFO ] 2020-02-03T01:37:19,184Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:19,227Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:37:19,234Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693839132) {}
[INFO ] 2020-02-03T01:37:19,242Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693837753) {}
[INFO ] 2020-02-03T01:37:19,244Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:19,253Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693839132) {}
[INFO ] 2020-02-03T01:37:19,254Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:19,264Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693839132) {}
[INFO ] 2020-02-03T01:37:19,264Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:19,264Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693839132) {}
[INFO ] 2020-02-03T01:37:19,264Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:19,266Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013704.667/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:37:19,266Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013704.667/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:37:19,266Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013704.667/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:37:19,293Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:37:19,298Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:37:19,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:19,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:19,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:19,320Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:37:04.624Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:37:19,735Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:37:19,737Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013704.667/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:37:19,738Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:37:19,739Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:37:19,741Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:19,741Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:19,821Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:19,830Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:37:19,832Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:37:19,833Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:37:19,845Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:19,845Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:19,936Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:19,940Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:37:19,940Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693839940) {}
[INFO ] 2020-02-03T01:37:19,942Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:19,949Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693839940) {}
[INFO ] 2020-02-03T01:37:19,955Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:37:19,960Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693839940) {}
[INFO ] 2020-02-03T01:37:19,977Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:20,011Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:37:20,020Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693839940) {}
[INFO ] 2020-02-03T01:37:20,027Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693837753) {}
[INFO ] 2020-02-03T01:37:20,028Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:20,044Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693839940) {}
[INFO ] 2020-02-03T01:37:20,046Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:20,054Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693839132) {}
[INFO ] 2020-02-03T01:37:20,056Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:20,067Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693839940) {}
[INFO ] 2020-02-03T01:37:20,070Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:20,085Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693839940) {}
[INFO ] 2020-02-03T01:37:20,087Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:20,088Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693839940) {}
[INFO ] 2020-02-03T01:37:20,089Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:37:20,288Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=88d7ad58-5dfd-40ec-9bbe-fd0cba87b50e, invocation_id=8cad069e-bd46-48ea-b090-e2778dd76d84, invocation_timestamp=2020-02-03T01:37:20.114Z, origin=Only For Testing, session_id=8cad069e-bd46-48ea-b090-e2778dd76d84, session_timestamp=2020-02-03T01:37:20.114Z, thread-id=106}
[WARN ] 2020-02-03T01:37:20,288Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=88d7ad58-5dfd-40ec-9bbe-fd0cba87b50e, invocation_id=8cad069e-bd46-48ea-b090-e2778dd76d84, invocation_timestamp=2020-02-03T01:37:20.114Z, origin=Only For Testing, session_id=8cad069e-bd46-48ea-b090-e2778dd76d84, session_timestamp=2020-02-03T01:37:20.114Z, thread-id=106}
[INFO ] 2020-02-03T01:37:21,547Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=88d7ad58-5dfd-40ec-9bbe-fd0cba87b50e, invocation_id=8cad069e-bd46-48ea-b090-e2778dd76d84, invocation_timestamp=2020-02-03T01:37:20.114Z, origin=Only For Testing, session_id=8cad069e-bd46-48ea-b090-e2778dd76d84, session_timestamp=2020-02-03T01:37:20.114Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[INFO ] 2020-02-03T01:37:21,547Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=88d7ad58-5dfd-40ec-9bbe-fd0cba87b50e, invocation_id=8cad069e-bd46-48ea-b090-e2778dd76d84, invocation_timestamp=2020-02-03T01:37:20.114Z, origin=Only For Testing, session_id=8cad069e-bd46-48ea-b090-e2778dd76d84, session_timestamp=2020-02-03T01:37:20.114Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[INFO ] 2020-02-03T01:37:21,600Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=88d7ad58-5dfd-40ec-9bbe-fd0cba87b50e, invocation_id=8cad069e-bd46-48ea-b090-e2778dd76d84, invocation_timestamp=2020-02-03T01:37:20.114Z, origin=Only For Testing, session_id=8cad069e-bd46-48ea-b090-e2778dd76d84, session_timestamp=2020-02-03T01:37:20.114Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[INFO ] 2020-02-03T01:37:21,749Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[WARN ] 2020-02-03T01:37:21,755Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[INFO ] 2020-02-03T01:37:21,780Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[INFO ] 2020-02-03T01:37:21,807Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=88d7ad58-5dfd-40ec-9bbe-fd0cba87b50e, invocation_id=8cad069e-bd46-48ea-b090-e2778dd76d84, invocation_timestamp=2020-02-03T01:37:20.114Z, origin=Only For Testing, session_id=8cad069e-bd46-48ea-b090-e2778dd76d84, session_timestamp=2020-02-03T01:37:20.114Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[INFO ] 2020-02-03T01:37:21,808Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=88d7ad58-5dfd-40ec-9bbe-fd0cba87b50e, invocation_id=8cad069e-bd46-48ea-b090-e2778dd76d84, invocation_timestamp=2020-02-03T01:37:20.114Z, origin=Only For Testing, session_id=8cad069e-bd46-48ea-b090-e2778dd76d84, session_timestamp=2020-02-03T01:37:20.114Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[INFO ] 2020-02-03T01:37:21,835Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:37:21,843Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Invocation, sessionId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5526347183417896546)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), frozenFiber=D18CEF60A479725A4F1327BFB02F00966BBFB52809AD7B220F4005AF3E9F44E0), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@79b51cef, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bbba453], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=8c600d04-4e6c-47a8-88b4-30ea091f9f65) {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[INFO ] 2020-02-03T01:37:21,844Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] has error [0] {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:37:21,845Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] error allowed to propagate {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[WARN ] 2020-02-03T01:37:21,864Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] errored, dumping all transitions:

 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.723Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fcf965dd-22b4-4b9f-88e7-42ab995d105d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Invocation, sessionId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=CB8D1910077E71EA7251EE248B9487F6AC11FA5BC57595D74626095B9F5A5D4C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@555deb1f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@555deb1f])
    SignalFlowHasStarted(flowId=[fcf965dd-22b4-4b9f-88e7-42ab995d105d])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7640752253472232707), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5526347183417896546), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7640752253472232707--4962584004665568639-0-0), senderUUID=8c600d04-4e6c-47a8-88b4-30ea091f9f65))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5526347183417896546): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7640752253472232707)), errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@555deb1f]
    []


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.725Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.729Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.744Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), maySkipCheckpoint=false, fiber=BC67F116B8E738AA87F0CEDC653537A5626DDF63EE19302E45BD1A0438A2A012, )
  Actions: 
    PersistCheckpoint(id=[fcf965dd-22b4-4b9f-88e7-42ab995d105d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Invocation, sessionId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5526347183417896546)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7640752253472232707)), errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), frozenFiber=BC67F116B8E738AA87F0CEDC653537A5626DDF63EE19302E45BD1A0438A2A012), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=CB8D1910077E71EA7251EE248B9487F6AC11FA5BC57595D74626095B9F5A5D4C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), frozenFiber=BC67F116B8E738AA87F0CEDC653537A5626DDF63EE19302E45BD1A0438A2A012)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.746Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5526347183417896546).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.756Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.775Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=665147E056B45B23FDAFA9B5D966E3A031C6CAF989EE317B383FFADDF4E3C5AE, )
  Actions: 
    PersistCheckpoint(id=[fcf965dd-22b4-4b9f-88e7-42ab995d105d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Invocation, sessionId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5526347183417896546)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7640752253472232707)), errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=665147E056B45B23FDAFA9B5D966E3A031C6CAF989EE317B383FFADDF4E3C5AE), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    BC67F116B8E738AA87F0CEDC653537A5626DDF63EE19302E45BD1A0438A2A012
    665147E056B45B23FDAFA9B5D966E3A031C6CAF989EE317B383FFADDF4E3C5AE
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.779Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7640752253472232707), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7640752253472232707--4962584004665568639-2-0), senderUUID=8c600d04-4e6c-47a8-88b4-30ea091f9f65))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.780Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.786Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.791Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), maySkipCheckpoint=false, fiber=D18CEF60A479725A4F1327BFB02F00966BBFB52809AD7B220F4005AF3E9F44E0, )
  Actions: 
    PersistCheckpoint(id=[fcf965dd-22b4-4b9f-88e7-42ab995d105d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Invocation, sessionId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5526347183417896546)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7640752253472232707)), errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), frozenFiber=D18CEF60A479725A4F1327BFB02F00966BBFB52809AD7B220F4005AF3E9F44E0), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))])
checkpoint.flowState.frozenFiber.hash: 
    665147E056B45B23FDAFA9B5D966E3A031C6CAF989EE317B383FFADDF4E3C5AE
    D18CEF60A479725A4F1327BFB02F00966BBFB52809AD7B220F4005AF3E9F44E0
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.791Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.834Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5526347183417896546), payload=net.corda.node.services.statemachine.EndSessionMessage@3e990b35), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bbba453, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-5526347183417896546).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-7640752253472232707))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bbba453]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.835Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.835Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.847Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7119234177123381242, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.850Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.851Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[WARN ] 2020-02-03T01:37:21,864Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:37:21,870Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[WARN ] 2020-02-03T01:37:21,900Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] errored, dumping all transitions:

 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.723Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fcf965dd-22b4-4b9f-88e7-42ab995d105d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Invocation, sessionId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=CB8D1910077E71EA7251EE248B9487F6AC11FA5BC57595D74626095B9F5A5D4C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@555deb1f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@555deb1f])
    SignalFlowHasStarted(flowId=[fcf965dd-22b4-4b9f-88e7-42ab995d105d])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7640752253472232707), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5526347183417896546), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7640752253472232707--4962584004665568639-0-0), senderUUID=8c600d04-4e6c-47a8-88b4-30ea091f9f65))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5526347183417896546): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7640752253472232707)), errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@555deb1f]
    []


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.725Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.729Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.744Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), maySkipCheckpoint=false, fiber=BC67F116B8E738AA87F0CEDC653537A5626DDF63EE19302E45BD1A0438A2A012, )
  Actions: 
    PersistCheckpoint(id=[fcf965dd-22b4-4b9f-88e7-42ab995d105d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Invocation, sessionId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5526347183417896546)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7640752253472232707)), errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), frozenFiber=BC67F116B8E738AA87F0CEDC653537A5626DDF63EE19302E45BD1A0438A2A012), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=CB8D1910077E71EA7251EE248B9487F6AC11FA5BC57595D74626095B9F5A5D4C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), frozenFiber=BC67F116B8E738AA87F0CEDC653537A5626DDF63EE19302E45BD1A0438A2A012)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.746Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5526347183417896546).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.756Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.775Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=665147E056B45B23FDAFA9B5D966E3A031C6CAF989EE317B383FFADDF4E3C5AE, )
  Actions: 
    PersistCheckpoint(id=[fcf965dd-22b4-4b9f-88e7-42ab995d105d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Invocation, sessionId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5526347183417896546)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7640752253472232707)), errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=665147E056B45B23FDAFA9B5D966E3A031C6CAF989EE317B383FFADDF4E3C5AE), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    BC67F116B8E738AA87F0CEDC653537A5626DDF63EE19302E45BD1A0438A2A012
    665147E056B45B23FDAFA9B5D966E3A031C6CAF989EE317B383FFADDF4E3C5AE
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.779Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7640752253472232707), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7640752253472232707--4962584004665568639-2-0), senderUUID=8c600d04-4e6c-47a8-88b4-30ea091f9f65))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.780Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.786Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.791Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), maySkipCheckpoint=false, fiber=D18CEF60A479725A4F1327BFB02F00966BBFB52809AD7B220F4005AF3E9F44E0, )
  Actions: 
    PersistCheckpoint(id=[fcf965dd-22b4-4b9f-88e7-42ab995d105d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Invocation, sessionId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5526347183417896546)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7640752253472232707)), errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), frozenFiber=D18CEF60A479725A4F1327BFB02F00966BBFB52809AD7B220F4005AF3E9F44E0), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))])
checkpoint.flowState.frozenFiber.hash: 
    665147E056B45B23FDAFA9B5D966E3A031C6CAF989EE317B383FFADDF4E3C5AE
    D18CEF60A479725A4F1327BFB02F00966BBFB52809AD7B220F4005AF3E9F44E0
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.791Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.834Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5526347183417896546), payload=net.corda.node.services.statemachine.EndSessionMessage@3e990b35), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bbba453, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-5526347183417896546).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-7640752253472232707))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bbba453]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.835Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.835Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.847Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7119234177123381242, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.850Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.851Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] ---
  Timestamp: 2020-02-03T01:37:21.896Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=7119234177123381242)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)], senderUUID=8c600d04-4e6c-47a8-88b4-30ea091f9f65)
    CreateTransaction
    RemoveCheckpoint(id=[fcf965dd-22b4-4b9f-88e7-42ab995d105d])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bbba453])
    ReleaseSoftLocks(uuid=fcf965dd-22b4-4b9f-88e7-42ab995d105d)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bbba453])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-5526347183417896546)])
    RemoveFlow(flowId=[fcf965dd-22b4-4b9f-88e7-42ab995d105d], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7119234177123381242, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Invocation, sessionId=33547d82-3752-456a-a5bb-4f6c40dd8900, timestamp: 2020-02-03T01:37:21.698Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5526347183417896546)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--7640752253472232707--4962584004665568639)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5526347183417896546))]), frozenFiber=D18CEF60A479725A4F1327BFB02F00966BBFB52809AD7B220F4005AF3E9F44E0), errorState=Errored(errors=[FlowError(errorId=7119234177123381242, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@79b51cef, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=8c600d04-4e6c-47a8-88b4-30ea091f9f65))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bbba453]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
[WARN ] 2020-02-03T01:37:21,900Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fcf965dd-22b4-4b9f-88e7-42ab995d105d] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=fcf965dd-22b4-4b9f-88e7-42ab995d105d, invocation_id=33547d82-3752-456a-a5bb-4f6c40dd8900, invocation_timestamp=2020-02-03T01:37:21.698Z, origin=O=Mock Company 1, L=London, C=GB, session_id=33547d82-3752-456a-a5bb-4f6c40dd8900, session_timestamp=2020-02-03T01:37:21.698Z, thread-id=106, tx_id=66AC9A93A15861C4EE6480636E2355EFA3B7D17DB26352C8F88CB53D14EC47D1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5526347183417896546) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:37:36,014Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:37:37,125Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013731.309/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:37:37,129Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013731.309/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:37:37,152Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013731.309/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:37:37,240Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:37:37,779Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:37:37,839Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:37,840Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:37,841Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:37,975Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:37:31.266Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:37:41,227Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:37:41,229Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013731.309/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:37:41,229Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:37:41,232Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:37:41,304Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:41,309Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:43,073Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:43,602Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:37:43,647Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:37:43,662Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:37:43,662Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:37:43,871Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:37:43,880Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:37:43,882Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693863881) {}
[INFO ] 2020-02-03T01:37:43,887Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:44,016Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693863881) {}
[INFO ] 2020-02-03T01:37:44,064Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:37:44,079Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693863881) {}
[INFO ] 2020-02-03T01:37:44,123Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:44,147Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:37:44,150Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:37:44,153Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:37:44,469Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693863881) {}
[INFO ] 2020-02-03T01:37:44,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693863881) {}
[INFO ] 2020-02-03T01:37:44,486Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:44,488Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693863881) {}
[INFO ] 2020-02-03T01:37:44,489Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:44,493Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013731.309/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:37:44,494Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013731.309/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:37:44,496Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013731.309/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:37:44,519Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:37:44,527Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:37:44,550Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:44,550Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:44,550Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:44,553Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:37:31.266Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:37:44,916Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:37:44,917Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013731.309/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:37:44,917Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:37:44,919Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:37:44,920Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:44,920Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:45,028Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:45,048Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:37:45,059Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:37:45,059Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:37:45,083Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:45,083Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:45,189Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:45,194Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:37:45,194Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693865194) {}
[INFO ] 2020-02-03T01:37:45,198Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:45,205Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693865194) {}
[INFO ] 2020-02-03T01:37:45,213Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:37:45,224Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693865194) {}
[INFO ] 2020-02-03T01:37:45,233Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:45,276Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:37:45,285Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693865194) {}
[INFO ] 2020-02-03T01:37:45,290Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693863881) {}
[INFO ] 2020-02-03T01:37:45,292Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:45,301Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693865194) {}
[INFO ] 2020-02-03T01:37:45,302Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:45,311Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693865194) {}
[INFO ] 2020-02-03T01:37:45,311Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:45,311Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693865194) {}
[INFO ] 2020-02-03T01:37:45,311Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:45,313Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013731.309/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:37:45,314Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013731.309/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:37:45,314Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013731.309/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:37:45,334Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:37:45,340Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:37:45,362Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:45,362Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:45,363Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:37:45,367Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:37:31.266Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:37:45,717Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:37:45,719Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013731.309/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:37:45,719Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:37:45,720Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:37:45,722Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:45,722Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:45,811Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:37:45,820Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:37:45,822Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:37:45,823Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:37:45,837Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:45,837Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:45,939Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:37:45,943Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:37:45,943Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693865943) {}
[INFO ] 2020-02-03T01:37:45,946Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:45,953Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693865943) {}
[INFO ] 2020-02-03T01:37:45,963Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:37:45,967Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693865943) {}
[INFO ] 2020-02-03T01:37:45,979Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:46,023Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:37:46,030Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693865943) {}
[INFO ] 2020-02-03T01:37:46,035Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693863881) {}
[INFO ] 2020-02-03T01:37:46,037Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:46,048Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693865943) {}
[INFO ] 2020-02-03T01:37:46,050Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:46,059Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693865194) {}
[INFO ] 2020-02-03T01:37:46,060Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:46,069Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693865943) {}
[INFO ] 2020-02-03T01:37:46,071Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:37:46,080Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693865943) {}
[INFO ] 2020-02-03T01:37:46,081Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:37:46,081Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693865943) {}
[INFO ] 2020-02-03T01:37:46,082Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:37:46,318Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=435b1a7a-be62-4c44-8a3a-c932e11f1c9b, invocation_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, invocation_timestamp=2020-02-03T01:37:46.104Z, origin=Only For Testing, session_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, session_timestamp=2020-02-03T01:37:46.104Z, thread-id=106}
[WARN ] 2020-02-03T01:37:46,318Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=435b1a7a-be62-4c44-8a3a-c932e11f1c9b, invocation_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, invocation_timestamp=2020-02-03T01:37:46.104Z, origin=Only For Testing, session_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, session_timestamp=2020-02-03T01:37:46.104Z, thread-id=106}
[INFO ] 2020-02-03T01:37:47,487Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=435b1a7a-be62-4c44-8a3a-c932e11f1c9b, invocation_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, invocation_timestamp=2020-02-03T01:37:46.104Z, origin=Only For Testing, session_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, session_timestamp=2020-02-03T01:37:46.104Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[INFO ] 2020-02-03T01:37:47,487Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=435b1a7a-be62-4c44-8a3a-c932e11f1c9b, invocation_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, invocation_timestamp=2020-02-03T01:37:46.104Z, origin=Only For Testing, session_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, session_timestamp=2020-02-03T01:37:46.104Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[INFO ] 2020-02-03T01:37:47,537Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=435b1a7a-be62-4c44-8a3a-c932e11f1c9b, invocation_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, invocation_timestamp=2020-02-03T01:37:46.104Z, origin=Only For Testing, session_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, session_timestamp=2020-02-03T01:37:46.104Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[INFO ] 2020-02-03T01:37:47,690Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[WARN ] 2020-02-03T01:37:47,698Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[INFO ] 2020-02-03T01:37:47,724Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[INFO ] 2020-02-03T01:37:47,755Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=435b1a7a-be62-4c44-8a3a-c932e11f1c9b, invocation_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, invocation_timestamp=2020-02-03T01:37:46.104Z, origin=Only For Testing, session_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, session_timestamp=2020-02-03T01:37:46.104Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[INFO ] 2020-02-03T01:37:47,755Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=435b1a7a-be62-4c44-8a3a-c932e11f1c9b, invocation_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, invocation_timestamp=2020-02-03T01:37:46.104Z, origin=Only For Testing, session_id=5aad5519-2b05-4565-bc1f-ab7e496e9fe8, session_timestamp=2020-02-03T01:37:46.104Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[INFO ] 2020-02-03T01:37:47,782Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:37:47,790Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [34d86975-b127-4fd3-8296-825eda25e6a7] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Invocation, sessionId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6213295535728146975)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), frozenFiber=EF5FEF8CB402877EAF834444FB920A0CA085D300B014FD8126FBEF17DE890CFC), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@1451f6b4, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a72fcfb], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=33b3361b-ebcc-4352-9987-75b9609d652e) {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[INFO ] 2020-02-03T01:37:47,792Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [34d86975-b127-4fd3-8296-825eda25e6a7] has error [0] {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:37:47,793Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [34d86975-b127-4fd3-8296-825eda25e6a7] error allowed to propagate {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[WARN ] 2020-02-03T01:37:47,815Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [34d86975-b127-4fd3-8296-825eda25e6a7] errored, dumping all transitions:

 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.662Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[34d86975-b127-4fd3-8296-825eda25e6a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Invocation, sessionId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B16634AC8CB3390F352FDC685A31A2029A45E547584F58FF4DC7B44D6F26F709), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@635f0434])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@635f0434])
    SignalFlowHasStarted(flowId=[34d86975-b127-4fd3-8296-825eda25e6a7])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5862186893788930831), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6213295535728146975), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5862186893788930831-578874667699559698-0-0), senderUUID=33b3361b-ebcc-4352-9987-75b9609d652e))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6213295535728146975): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5862186893788930831)), errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@635f0434]
    []


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.667Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.669Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.685Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), maySkipCheckpoint=false, fiber=A7F51E417A2C7EE2ED2A559EEC5169061C0F7DD7DEAC5AEC44AE1E6F565F111D, )
  Actions: 
    PersistCheckpoint(id=[34d86975-b127-4fd3-8296-825eda25e6a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Invocation, sessionId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6213295535728146975)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5862186893788930831)), errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), frozenFiber=A7F51E417A2C7EE2ED2A559EEC5169061C0F7DD7DEAC5AEC44AE1E6F565F111D), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B16634AC8CB3390F352FDC685A31A2029A45E547584F58FF4DC7B44D6F26F709)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), frozenFiber=A7F51E417A2C7EE2ED2A559EEC5169061C0F7DD7DEAC5AEC44AE1E6F565F111D)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.687Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6213295535728146975).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.698Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.719Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=B82C0108A814E47DCAAE787F4C66059A6862DF9194E83F5D8FF49A151FE2E33E, )
  Actions: 
    PersistCheckpoint(id=[34d86975-b127-4fd3-8296-825eda25e6a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Invocation, sessionId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6213295535728146975)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5862186893788930831)), errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=B82C0108A814E47DCAAE787F4C66059A6862DF9194E83F5D8FF49A151FE2E33E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    A7F51E417A2C7EE2ED2A559EEC5169061C0F7DD7DEAC5AEC44AE1E6F565F111D
    B82C0108A814E47DCAAE787F4C66059A6862DF9194E83F5D8FF49A151FE2E33E
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.722Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5862186893788930831), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5862186893788930831-578874667699559698-2-0), senderUUID=33b3361b-ebcc-4352-9987-75b9609d652e))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.724Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.730Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.735Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), maySkipCheckpoint=false, fiber=EF5FEF8CB402877EAF834444FB920A0CA085D300B014FD8126FBEF17DE890CFC, )
  Actions: 
    PersistCheckpoint(id=[34d86975-b127-4fd3-8296-825eda25e6a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Invocation, sessionId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6213295535728146975)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5862186893788930831)), errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), frozenFiber=EF5FEF8CB402877EAF834444FB920A0CA085D300B014FD8126FBEF17DE890CFC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))])
checkpoint.flowState.frozenFiber.hash: 
    B82C0108A814E47DCAAE787F4C66059A6862DF9194E83F5D8FF49A151FE2E33E
    EF5FEF8CB402877EAF834444FB920A0CA085D300B014FD8126FBEF17DE890CFC
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.736Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.781Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6213295535728146975), payload=net.corda.node.services.statemachine.EndSessionMessage@59605d), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a72fcfb, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6213295535728146975).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-5862186893788930831))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a72fcfb]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.782Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.782Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.798Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5986516328139195330, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.801Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.802Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[WARN ] 2020-02-03T01:37:47,815Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [34d86975-b127-4fd3-8296-825eda25e6a7] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:37:47,817Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[WARN ] 2020-02-03T01:37:47,852Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [34d86975-b127-4fd3-8296-825eda25e6a7] errored, dumping all transitions:

 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.662Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[34d86975-b127-4fd3-8296-825eda25e6a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Invocation, sessionId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B16634AC8CB3390F352FDC685A31A2029A45E547584F58FF4DC7B44D6F26F709), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@635f0434])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@635f0434])
    SignalFlowHasStarted(flowId=[34d86975-b127-4fd3-8296-825eda25e6a7])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5862186893788930831), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6213295535728146975), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5862186893788930831-578874667699559698-0-0), senderUUID=33b3361b-ebcc-4352-9987-75b9609d652e))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6213295535728146975): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5862186893788930831)), errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@635f0434]
    []


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.667Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.669Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.685Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), maySkipCheckpoint=false, fiber=A7F51E417A2C7EE2ED2A559EEC5169061C0F7DD7DEAC5AEC44AE1E6F565F111D, )
  Actions: 
    PersistCheckpoint(id=[34d86975-b127-4fd3-8296-825eda25e6a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Invocation, sessionId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6213295535728146975)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5862186893788930831)), errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), frozenFiber=A7F51E417A2C7EE2ED2A559EEC5169061C0F7DD7DEAC5AEC44AE1E6F565F111D), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B16634AC8CB3390F352FDC685A31A2029A45E547584F58FF4DC7B44D6F26F709)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), frozenFiber=A7F51E417A2C7EE2ED2A559EEC5169061C0F7DD7DEAC5AEC44AE1E6F565F111D)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.687Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-6213295535728146975).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.698Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.719Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=B82C0108A814E47DCAAE787F4C66059A6862DF9194E83F5D8FF49A151FE2E33E, )
  Actions: 
    PersistCheckpoint(id=[34d86975-b127-4fd3-8296-825eda25e6a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Invocation, sessionId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6213295535728146975)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5862186893788930831)), errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=B82C0108A814E47DCAAE787F4C66059A6862DF9194E83F5D8FF49A151FE2E33E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    A7F51E417A2C7EE2ED2A559EEC5169061C0F7DD7DEAC5AEC44AE1E6F565F111D
    B82C0108A814E47DCAAE787F4C66059A6862DF9194E83F5D8FF49A151FE2E33E
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.722Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5862186893788930831), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5862186893788930831-578874667699559698-2-0), senderUUID=33b3361b-ebcc-4352-9987-75b9609d652e))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.724Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.730Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.735Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), maySkipCheckpoint=false, fiber=EF5FEF8CB402877EAF834444FB920A0CA085D300B014FD8126FBEF17DE890CFC, )
  Actions: 
    PersistCheckpoint(id=[34d86975-b127-4fd3-8296-825eda25e6a7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Invocation, sessionId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6213295535728146975)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5862186893788930831)), errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), frozenFiber=EF5FEF8CB402877EAF834444FB920A0CA085D300B014FD8126FBEF17DE890CFC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))])
checkpoint.flowState.frozenFiber.hash: 
    B82C0108A814E47DCAAE787F4C66059A6862DF9194E83F5D8FF49A151FE2E33E
    EF5FEF8CB402877EAF834444FB920A0CA085D300B014FD8126FBEF17DE890CFC
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.736Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.781Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6213295535728146975), payload=net.corda.node.services.statemachine.EndSessionMessage@59605d), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a72fcfb, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6213295535728146975).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-5862186893788930831))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a72fcfb]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.782Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.782Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.798Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5986516328139195330, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.801Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.802Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [34d86975-b127-4fd3-8296-825eda25e6a7] ---
  Timestamp: 2020-02-03T01:37:47.835Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5986516328139195330)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)], senderUUID=33b3361b-ebcc-4352-9987-75b9609d652e)
    CreateTransaction
    RemoveCheckpoint(id=[34d86975-b127-4fd3-8296-825eda25e6a7])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a72fcfb])
    ReleaseSoftLocks(uuid=34d86975-b127-4fd3-8296-825eda25e6a7)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a72fcfb])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-6213295535728146975)])
    RemoveFlow(flowId=[34d86975-b127-4fd3-8296-825eda25e6a7], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5986516328139195330, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Invocation, sessionId=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, timestamp: 2020-02-03T01:37:47.641Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6213295535728146975)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5862186893788930831-578874667699559698)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6213295535728146975))]), frozenFiber=EF5FEF8CB402877EAF834444FB920A0CA085D300B014FD8126FBEF17DE890CFC), errorState=Errored(errors=[FlowError(errorId=-5986516328139195330, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@1451f6b4, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=33b3361b-ebcc-4352-9987-75b9609d652e))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a72fcfb]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
[WARN ] 2020-02-03T01:37:47,852Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [34d86975-b127-4fd3-8296-825eda25e6a7] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=34d86975-b127-4fd3-8296-825eda25e6a7, invocation_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, invocation_timestamp=2020-02-03T01:37:47.641Z, origin=O=Mock Company 1, L=London, C=GB, session_id=665d8012-a26c-49c4-b6cd-5b95f8c5d0ad, session_timestamp=2020-02-03T01:37:47.641Z, thread-id=106, tx_id=7249BAA034F576931A3A8109A35EE38C247BFE95122D3693B38C4CFC0C05D258}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6213295535728146975) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:37:59,557Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:38:00,748Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013754.851/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:38:00,752Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013754.851/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:38:00,772Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013754.851/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:38:00,864Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:38:01,384Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:38:01,450Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:38:01,451Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:38:01,452Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:38:01,578Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:37:54.807Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:38:04,872Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:38:04,874Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013754.851/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:38:04,875Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:38:04,876Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:38:04,927Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:38:04,931Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:38:06,603Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:38:07,117Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:38:07,163Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:38:07,178Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:38:07,178Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:38:07,426Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:38:07,434Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:38:07,435Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693887435) {}
[INFO ] 2020-02-03T01:38:07,448Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:38:07,605Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693887435) {}
[INFO ] 2020-02-03T01:38:07,653Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:38:07,667Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693887435) {}
[INFO ] 2020-02-03T01:38:07,710Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:38:07,754Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:38:07,761Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:38:07,763Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:38:08,064Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693887435) {}
[INFO ] 2020-02-03T01:38:08,080Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693887435) {}
[INFO ] 2020-02-03T01:38:08,083Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:38:08,084Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693887435) {}
[INFO ] 2020-02-03T01:38:08,086Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:38:08,091Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013754.851/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:38:08,095Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013754.851/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:38:08,098Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013754.851/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:38:08,122Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:38:08,129Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:38:08,155Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:38:08,156Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:38:08,157Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:38:08,162Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:37:54.807Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:38:08,557Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:38:08,560Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013754.851/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:38:08,560Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:38:08,561Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:38:08,563Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:38:08,563Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:38:08,650Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:38:08,660Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:38:08,662Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:38:08,662Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:38:08,677Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:38:08,677Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:38:08,773Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:38:08,777Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:38:08,778Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693888777) {}
[INFO ] 2020-02-03T01:38:08,780Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:38:08,790Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693888777) {}
[INFO ] 2020-02-03T01:38:08,798Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:38:08,804Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693888777) {}
[INFO ] 2020-02-03T01:38:08,814Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:38:08,852Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:38:08,864Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693888777) {}
[INFO ] 2020-02-03T01:38:08,867Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693887435) {}
[INFO ] 2020-02-03T01:38:08,868Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:38:08,885Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693888777) {}
[INFO ] 2020-02-03T01:38:08,887Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:38:08,900Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693888777) {}
[INFO ] 2020-02-03T01:38:08,900Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:38:08,900Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693888777) {}
[INFO ] 2020-02-03T01:38:08,900Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:38:08,902Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-013754.851/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:38:08,902Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013754.851/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:38:08,902Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-013754.851/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:38:08,920Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:38:08,925Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:38:08,944Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:38:08,944Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:38:08,944Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:38:08,947Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:37:54.807Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:38:09,355Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:38:09,356Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-013754.851/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:38:09,357Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:38:09,362Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:38:09,364Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:38:09,365Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:38:09,425Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:38:09,433Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:38:09,437Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:38:09,437Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:38:09,450Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:38:09,450Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:38:09,548Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:38:09,552Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:38:09,554Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693889552) {}
[INFO ] 2020-02-03T01:38:09,557Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:38:09,575Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693889552) {}
[INFO ] 2020-02-03T01:38:09,583Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:38:09,608Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693889552) {}
[INFO ] 2020-02-03T01:38:09,619Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:38:09,644Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:38:09,651Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693889552) {}
[INFO ] 2020-02-03T01:38:09,656Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580693887435) {}
[INFO ] 2020-02-03T01:38:09,657Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:38:09,668Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693889552) {}
[INFO ] 2020-02-03T01:38:09,669Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:38:09,679Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580693888777) {}
[INFO ] 2020-02-03T01:38:09,680Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:38:09,689Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693889552) {}
[INFO ] 2020-02-03T01:38:09,691Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:38:09,699Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693889552) {}
[INFO ] 2020-02-03T01:38:09,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:38:09,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580693889552) {}
[INFO ] 2020-02-03T01:38:09,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:38:09,911Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=abe81df3-f8eb-4b94-9685-f3180c01181e, invocation_id=79246b95-4730-46f0-907e-03025b38085d, invocation_timestamp=2020-02-03T01:38:09.727Z, origin=Only For Testing, session_id=79246b95-4730-46f0-907e-03025b38085d, session_timestamp=2020-02-03T01:38:09.727Z, thread-id=106}
[WARN ] 2020-02-03T01:38:09,911Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=abe81df3-f8eb-4b94-9685-f3180c01181e, invocation_id=79246b95-4730-46f0-907e-03025b38085d, invocation_timestamp=2020-02-03T01:38:09.727Z, origin=Only For Testing, session_id=79246b95-4730-46f0-907e-03025b38085d, session_timestamp=2020-02-03T01:38:09.727Z, thread-id=106}
[INFO ] 2020-02-03T01:38:11,160Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=abe81df3-f8eb-4b94-9685-f3180c01181e, invocation_id=79246b95-4730-46f0-907e-03025b38085d, invocation_timestamp=2020-02-03T01:38:09.727Z, origin=Only For Testing, session_id=79246b95-4730-46f0-907e-03025b38085d, session_timestamp=2020-02-03T01:38:09.727Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[INFO ] 2020-02-03T01:38:11,160Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=abe81df3-f8eb-4b94-9685-f3180c01181e, invocation_id=79246b95-4730-46f0-907e-03025b38085d, invocation_timestamp=2020-02-03T01:38:09.727Z, origin=Only For Testing, session_id=79246b95-4730-46f0-907e-03025b38085d, session_timestamp=2020-02-03T01:38:09.727Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[INFO ] 2020-02-03T01:38:11,214Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=abe81df3-f8eb-4b94-9685-f3180c01181e, invocation_id=79246b95-4730-46f0-907e-03025b38085d, invocation_timestamp=2020-02-03T01:38:09.727Z, origin=Only For Testing, session_id=79246b95-4730-46f0-907e-03025b38085d, session_timestamp=2020-02-03T01:38:09.727Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[INFO ] 2020-02-03T01:38:11,384Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[WARN ] 2020-02-03T01:38:11,395Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[INFO ] 2020-02-03T01:38:11,420Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[INFO ] 2020-02-03T01:38:11,448Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=abe81df3-f8eb-4b94-9685-f3180c01181e, invocation_id=79246b95-4730-46f0-907e-03025b38085d, invocation_timestamp=2020-02-03T01:38:09.727Z, origin=Only For Testing, session_id=79246b95-4730-46f0-907e-03025b38085d, session_timestamp=2020-02-03T01:38:09.727Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[INFO ] 2020-02-03T01:38:11,448Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=abe81df3-f8eb-4b94-9685-f3180c01181e, invocation_id=79246b95-4730-46f0-907e-03025b38085d, invocation_timestamp=2020-02-03T01:38:09.727Z, origin=Only For Testing, session_id=79246b95-4730-46f0-907e-03025b38085d, session_timestamp=2020-02-03T01:38:09.727Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[INFO ] 2020-02-03T01:38:11,474Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:38:11,478Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Invocation, sessionId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2076185270639762520)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), frozenFiber=3AD9EF5D7AB6ED4D2C771573D3C71C7D49E66E5ADC49A41532066B9D905D16C7), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@a9f8f19, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67cdc27f], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=07c1b11d-eb32-4424-baf5-71792e22f57d) {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[INFO ] 2020-02-03T01:38:11,483Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] has error [0] {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:38:11,484Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] error allowed to propagate {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[WARN ] 2020-02-03T01:38:11,508Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] errored, dumping all transitions:

 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.357Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f17f4acd-8a72-4eae-b691-72a5e69c2491], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Invocation, sessionId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=DE723F2CD3A90A0FE6B7134F1D002C38903F8618C97949EF83C1B2E3CD0E39D4), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47c4aad7])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47c4aad7])
    SignalFlowHasStarted(flowId=[f17f4acd-8a72-4eae-b691-72a5e69c2491])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-914080265613012226), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2076185270639762520), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--914080265613012226--5210577901793339234-0-0), senderUUID=07c1b11d-eb32-4424-baf5-71792e22f57d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2076185270639762520): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-914080265613012226)), errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47c4aad7]
    []


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.360Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.363Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.379Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), maySkipCheckpoint=false, fiber=91FB0DDABB1C4A04A71E788A3E67553B0F21AD88EEC8EF7159BD8C41E5D32FDA, )
  Actions: 
    PersistCheckpoint(id=[f17f4acd-8a72-4eae-b691-72a5e69c2491], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Invocation, sessionId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2076185270639762520)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-914080265613012226)), errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), frozenFiber=91FB0DDABB1C4A04A71E788A3E67553B0F21AD88EEC8EF7159BD8C41E5D32FDA), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=DE723F2CD3A90A0FE6B7134F1D002C38903F8618C97949EF83C1B2E3CD0E39D4)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), frozenFiber=91FB0DDABB1C4A04A71E788A3E67553B0F21AD88EEC8EF7159BD8C41E5D32FDA)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.381Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2076185270639762520).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.395Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.415Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=0E4EB3EAA5C574DAC042B9300F5D6895D9EC9F0E9A615B3A165C66F22740F1A4, )
  Actions: 
    PersistCheckpoint(id=[f17f4acd-8a72-4eae-b691-72a5e69c2491], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Invocation, sessionId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2076185270639762520)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-914080265613012226)), errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=0E4EB3EAA5C574DAC042B9300F5D6895D9EC9F0E9A615B3A165C66F22740F1A4), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    91FB0DDABB1C4A04A71E788A3E67553B0F21AD88EEC8EF7159BD8C41E5D32FDA
    0E4EB3EAA5C574DAC042B9300F5D6895D9EC9F0E9A615B3A165C66F22740F1A4
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.418Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-914080265613012226), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--914080265613012226--5210577901793339234-2-0), senderUUID=07c1b11d-eb32-4424-baf5-71792e22f57d))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.420Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.426Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.431Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), maySkipCheckpoint=false, fiber=3AD9EF5D7AB6ED4D2C771573D3C71C7D49E66E5ADC49A41532066B9D905D16C7, )
  Actions: 
    PersistCheckpoint(id=[f17f4acd-8a72-4eae-b691-72a5e69c2491], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Invocation, sessionId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2076185270639762520)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-914080265613012226)), errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), frozenFiber=3AD9EF5D7AB6ED4D2C771573D3C71C7D49E66E5ADC49A41532066B9D905D16C7), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))])
checkpoint.flowState.frozenFiber.hash: 
    0E4EB3EAA5C574DAC042B9300F5D6895D9EC9F0E9A615B3A165C66F22740F1A4
    3AD9EF5D7AB6ED4D2C771573D3C71C7D49E66E5ADC49A41532066B9D905D16C7
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.432Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.473Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2076185270639762520), payload=net.corda.node.services.statemachine.EndSessionMessage@1515fb7e), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67cdc27f, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2076185270639762520).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-914080265613012226))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67cdc27f]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.473Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.474Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.485Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2311134339965507203, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.490Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.490Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[WARN ] 2020-02-03T01:38:11,508Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:38:11,510Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[WARN ] 2020-02-03T01:38:11,567Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] errored, dumping all transitions:

 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.357Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f17f4acd-8a72-4eae-b691-72a5e69c2491], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Invocation, sessionId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=DE723F2CD3A90A0FE6B7134F1D002C38903F8618C97949EF83C1B2E3CD0E39D4), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47c4aad7])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47c4aad7])
    SignalFlowHasStarted(flowId=[f17f4acd-8a72-4eae-b691-72a5e69c2491])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-914080265613012226), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2076185270639762520), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--914080265613012226--5210577901793339234-0-0), senderUUID=07c1b11d-eb32-4424-baf5-71792e22f57d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2076185270639762520): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-914080265613012226)), errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47c4aad7]
    []


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.360Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.363Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.379Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), maySkipCheckpoint=false, fiber=91FB0DDABB1C4A04A71E788A3E67553B0F21AD88EEC8EF7159BD8C41E5D32FDA, )
  Actions: 
    PersistCheckpoint(id=[f17f4acd-8a72-4eae-b691-72a5e69c2491], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Invocation, sessionId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2076185270639762520)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-914080265613012226)), errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), frozenFiber=91FB0DDABB1C4A04A71E788A3E67553B0F21AD88EEC8EF7159BD8C41E5D32FDA), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=DE723F2CD3A90A0FE6B7134F1D002C38903F8618C97949EF83C1B2E3CD0E39D4)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), frozenFiber=91FB0DDABB1C4A04A71E788A3E67553B0F21AD88EEC8EF7159BD8C41E5D32FDA)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.381Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2076185270639762520).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.395Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.415Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=0E4EB3EAA5C574DAC042B9300F5D6895D9EC9F0E9A615B3A165C66F22740F1A4, )
  Actions: 
    PersistCheckpoint(id=[f17f4acd-8a72-4eae-b691-72a5e69c2491], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Invocation, sessionId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2076185270639762520)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-914080265613012226)), errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=0E4EB3EAA5C574DAC042B9300F5D6895D9EC9F0E9A615B3A165C66F22740F1A4), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    91FB0DDABB1C4A04A71E788A3E67553B0F21AD88EEC8EF7159BD8C41E5D32FDA
    0E4EB3EAA5C574DAC042B9300F5D6895D9EC9F0E9A615B3A165C66F22740F1A4
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.418Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-914080265613012226), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--914080265613012226--5210577901793339234-2-0), senderUUID=07c1b11d-eb32-4424-baf5-71792e22f57d))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.420Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.426Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.431Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), maySkipCheckpoint=false, fiber=3AD9EF5D7AB6ED4D2C771573D3C71C7D49E66E5ADC49A41532066B9D905D16C7, )
  Actions: 
    PersistCheckpoint(id=[f17f4acd-8a72-4eae-b691-72a5e69c2491], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Invocation, sessionId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2076185270639762520)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-914080265613012226)), errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), frozenFiber=3AD9EF5D7AB6ED4D2C771573D3C71C7D49E66E5ADC49A41532066B9D905D16C7), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))])
checkpoint.flowState.frozenFiber.hash: 
    0E4EB3EAA5C574DAC042B9300F5D6895D9EC9F0E9A615B3A165C66F22740F1A4
    3AD9EF5D7AB6ED4D2C771573D3C71C7D49E66E5ADC49A41532066B9D905D16C7
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.432Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.473Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2076185270639762520), payload=net.corda.node.services.statemachine.EndSessionMessage@1515fb7e), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67cdc27f, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2076185270639762520).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-914080265613012226))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67cdc27f]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.473Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.474Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.485Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2311134339965507203, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.490Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.490Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] ---
  Timestamp: 2020-02-03T01:38:11.541Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-2311134339965507203)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)], senderUUID=07c1b11d-eb32-4424-baf5-71792e22f57d)
    CreateTransaction
    RemoveCheckpoint(id=[f17f4acd-8a72-4eae-b691-72a5e69c2491])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67cdc27f])
    ReleaseSoftLocks(uuid=f17f4acd-8a72-4eae-b691-72a5e69c2491)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67cdc27f])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2076185270639762520)])
    RemoveFlow(flowId=[f17f4acd-8a72-4eae-b691-72a5e69c2491], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-2311134339965507203, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Invocation, sessionId=8bc1c40b-edce-44c6-b75a-eae4e23968fd, timestamp: 2020-02-03T01:38:11.322Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2076185270639762520)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--914080265613012226--5210577901793339234)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2076185270639762520))]), frozenFiber=3AD9EF5D7AB6ED4D2C771573D3C71C7D49E66E5ADC49A41532066B9D905D16C7), errorState=Errored(errors=[FlowError(errorId=-2311134339965507203, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@a9f8f19, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=07c1b11d-eb32-4424-baf5-71792e22f57d))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@67cdc27f]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
[WARN ] 2020-02-03T01:38:11,567Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f17f4acd-8a72-4eae-b691-72a5e69c2491] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=f17f4acd-8a72-4eae-b691-72a5e69c2491, invocation_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, invocation_timestamp=2020-02-03T01:38:11.322Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8bc1c40b-edce-44c6-b75a-eae4e23968fd, session_timestamp=2020-02-03T01:38:11.322Z, thread-id=106, tx_id=74F97EA76C610618FC24FA3F50BD6DA5C8D704A6CF1E56986BBDEEDDBCBE0C22}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2076185270639762520) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:34,676Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:44:35,984Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014430.111/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:44:35,988Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014430.111/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:36,011Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014430.111/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:36,101Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:36,689Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:36,755Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:36,756Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:36,756Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:36,891Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:29.968Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:40,355Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:40,358Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014430.111/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:40,358Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:40,359Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:40,431Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:40,437Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:42,130Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:42,648Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:42,686Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:42,701Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:42,701Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:42,920Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:42,930Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:42,932Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694282932) {}
[INFO ] 2020-02-03T01:44:42,937Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:43,065Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694282932) {}
[INFO ] 2020-02-03T01:44:43,117Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:43,144Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694282932) {}
[INFO ] 2020-02-03T01:44:43,185Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:43,212Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:43,215Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:44:43,217Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:44:43,532Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694282932) {}
[INFO ] 2020-02-03T01:44:43,548Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694282932) {}
[INFO ] 2020-02-03T01:44:43,549Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:43,549Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694282932) {}
[INFO ] 2020-02-03T01:44:43,549Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:43,553Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014430.111/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:44:43,554Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014430.111/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:43,555Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014430.111/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:43,591Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:43,599Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:43,623Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:43,623Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:43,623Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:43,626Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:29.968Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:44,050Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:44,052Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014430.111/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:44,052Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:44,053Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:44,054Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:44,055Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:44,129Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:44,138Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:44,140Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:44,140Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:44,155Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:44,155Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:44,252Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:44,256Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:44,257Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694284257) {}
[INFO ] 2020-02-03T01:44:44,259Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:44,267Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694284257) {}
[INFO ] 2020-02-03T01:44:44,276Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:44,286Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694284257) {}
[INFO ] 2020-02-03T01:44:44,315Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:44,338Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:44,346Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694284257) {}
[INFO ] 2020-02-03T01:44:44,351Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694282932) {}
[INFO ] 2020-02-03T01:44:44,353Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:44,362Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694284257) {}
[INFO ] 2020-02-03T01:44:44,363Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:44,371Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694284257) {}
[INFO ] 2020-02-03T01:44:44,372Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:44,372Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694284257) {}
[INFO ] 2020-02-03T01:44:44,372Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:44,373Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014430.111/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:44:44,374Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014430.111/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:44,374Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014430.111/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:44,396Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:44,401Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:44,421Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:44,422Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:44,422Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:44,425Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:29.968Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:44,720Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:44,721Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014430.111/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:44,721Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:44,722Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:44,724Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:44,724Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:44,788Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:44,799Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:44,803Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:44,804Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:44,815Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:44,815Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:44,908Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:44,913Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:44,913Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694284913) {}
[INFO ] 2020-02-03T01:44:44,915Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:44,923Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694284913) {}
[INFO ] 2020-02-03T01:44:44,929Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:44,945Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694284913) {}
[INFO ] 2020-02-03T01:44:44,958Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:44,975Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:44,982Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694284913) {}
[INFO ] 2020-02-03T01:44:44,987Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694282932) {}
[INFO ] 2020-02-03T01:44:44,989Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:45,000Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694284913) {}
[INFO ] 2020-02-03T01:44:45,002Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:45,011Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694284257) {}
[INFO ] 2020-02-03T01:44:45,012Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:45,021Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694284913) {}
[INFO ] 2020-02-03T01:44:45,022Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:45,031Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694284913) {}
[INFO ] 2020-02-03T01:44:45,031Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:45,031Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694284913) {}
[INFO ] 2020-02-03T01:44:45,031Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:44:45,236Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=05e9c0e7-b16e-4499-b2fd-7e619eee22c1, invocation_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, invocation_timestamp=2020-02-03T01:44:45.054Z, origin=Only For Testing, session_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, session_timestamp=2020-02-03T01:44:45.054Z, thread-id=102}
[WARN ] 2020-02-03T01:44:45,236Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=05e9c0e7-b16e-4499-b2fd-7e619eee22c1, invocation_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, invocation_timestamp=2020-02-03T01:44:45.054Z, origin=Only For Testing, session_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, session_timestamp=2020-02-03T01:44:45.054Z, thread-id=102}
[INFO ] 2020-02-03T01:44:46,652Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=05e9c0e7-b16e-4499-b2fd-7e619eee22c1, invocation_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, invocation_timestamp=2020-02-03T01:44:45.054Z, origin=Only For Testing, session_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, session_timestamp=2020-02-03T01:44:45.054Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[INFO ] 2020-02-03T01:44:46,652Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=05e9c0e7-b16e-4499-b2fd-7e619eee22c1, invocation_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, invocation_timestamp=2020-02-03T01:44:45.054Z, origin=Only For Testing, session_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, session_timestamp=2020-02-03T01:44:45.054Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[INFO ] 2020-02-03T01:44:46,703Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=05e9c0e7-b16e-4499-b2fd-7e619eee22c1, invocation_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, invocation_timestamp=2020-02-03T01:44:45.054Z, origin=Only For Testing, session_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, session_timestamp=2020-02-03T01:44:45.054Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[INFO ] 2020-02-03T01:44:46,850Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[WARN ] 2020-02-03T01:44:46,860Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[INFO ] 2020-02-03T01:44:46,883Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[INFO ] 2020-02-03T01:44:46,902Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=05e9c0e7-b16e-4499-b2fd-7e619eee22c1, invocation_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, invocation_timestamp=2020-02-03T01:44:45.054Z, origin=Only For Testing, session_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, session_timestamp=2020-02-03T01:44:45.054Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[INFO ] 2020-02-03T01:44:46,902Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=05e9c0e7-b16e-4499-b2fd-7e619eee22c1, invocation_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, invocation_timestamp=2020-02-03T01:44:45.054Z, origin=Only For Testing, session_id=c75d84e6-5f44-4d56-b4eb-4053deb7ef74, session_timestamp=2020-02-03T01:44:45.054Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[INFO ] 2020-02-03T01:44:46,927Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:46,929Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [03ba2252-17e0-4575-a706-7f95550d7ebc] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Invocation, sessionId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5325193458137452130)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), frozenFiber=4F10D211A3BBDF0745A397E6C98078C7E5BFE6FE085CBFB28FC93BD9DED3F92B), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@4565dc5a, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4b5c1c36], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=faa9eeae-c11b-4af2-b16d-0a5266fff3f7) {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[INFO ] 2020-02-03T01:44:46,931Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [03ba2252-17e0-4575-a706-7f95550d7ebc] has error [0] {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:46,932Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [03ba2252-17e0-4575-a706-7f95550d7ebc] error allowed to propagate {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[WARN ] 2020-02-03T01:44:46,953Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [03ba2252-17e0-4575-a706-7f95550d7ebc] errored, dumping all transitions:

 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.825Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[03ba2252-17e0-4575-a706-7f95550d7ebc], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Invocation, sessionId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9CAF88FD74246A469F2DBE037FAE158B66C909D9FACC5E2A813761388C973E49), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7eece2ef])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7eece2ef])
    SignalFlowHasStarted(flowId=[03ba2252-17e0-4575-a706-7f95550d7ebc])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6653957000470862753), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5325193458137452130), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6653957000470862753--2038329724616179185-0-0), senderUUID=faa9eeae-c11b-4af2-b16d-0a5266fff3f7))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5325193458137452130): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6653957000470862753)), errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7eece2ef]
    []


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.828Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.830Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.844Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), maySkipCheckpoint=false, fiber=07BC2921ED4223D1776A003DC381FAE5AD7FEF54BB3E748C643E657B27DD63B4, )
  Actions: 
    PersistCheckpoint(id=[03ba2252-17e0-4575-a706-7f95550d7ebc], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Invocation, sessionId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5325193458137452130)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6653957000470862753)), errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), frozenFiber=07BC2921ED4223D1776A003DC381FAE5AD7FEF54BB3E748C643E657B27DD63B4), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9CAF88FD74246A469F2DBE037FAE158B66C909D9FACC5E2A813761388C973E49)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), frozenFiber=07BC2921ED4223D1776A003DC381FAE5AD7FEF54BB3E748C643E657B27DD63B4)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.846Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5325193458137452130).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.860Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.877Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=7ACBF2A198F764E4B1F906821ACC4F9CF7CB1421BC7D3649291F23E6531051FA, )
  Actions: 
    PersistCheckpoint(id=[03ba2252-17e0-4575-a706-7f95550d7ebc], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Invocation, sessionId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5325193458137452130)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6653957000470862753)), errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=7ACBF2A198F764E4B1F906821ACC4F9CF7CB1421BC7D3649291F23E6531051FA), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    07BC2921ED4223D1776A003DC381FAE5AD7FEF54BB3E748C643E657B27DD63B4
    7ACBF2A198F764E4B1F906821ACC4F9CF7CB1421BC7D3649291F23E6531051FA
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.881Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6653957000470862753), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6653957000470862753--2038329724616179185-2-0), senderUUID=faa9eeae-c11b-4af2-b16d-0a5266fff3f7))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.883Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.889Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.892Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), maySkipCheckpoint=false, fiber=4F10D211A3BBDF0745A397E6C98078C7E5BFE6FE085CBFB28FC93BD9DED3F92B, )
  Actions: 
    PersistCheckpoint(id=[03ba2252-17e0-4575-a706-7f95550d7ebc], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Invocation, sessionId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5325193458137452130)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6653957000470862753)), errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), frozenFiber=4F10D211A3BBDF0745A397E6C98078C7E5BFE6FE085CBFB28FC93BD9DED3F92B), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))])
checkpoint.flowState.frozenFiber.hash: 
    7ACBF2A198F764E4B1F906821ACC4F9CF7CB1421BC7D3649291F23E6531051FA
    4F10D211A3BBDF0745A397E6C98078C7E5BFE6FE085CBFB28FC93BD9DED3F92B
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.892Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.926Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5325193458137452130), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4b5c1c36, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-5325193458137452130).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6653957000470862753))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4b5c1c36]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.927Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.927Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.933Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4195284843830930441, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.940Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.941Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[WARN ] 2020-02-03T01:44:46,953Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [03ba2252-17e0-4575-a706-7f95550d7ebc] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:44:46,955Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[WARN ] 2020-02-03T01:44:46,980Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [03ba2252-17e0-4575-a706-7f95550d7ebc] errored, dumping all transitions:

 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.825Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[03ba2252-17e0-4575-a706-7f95550d7ebc], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Invocation, sessionId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9CAF88FD74246A469F2DBE037FAE158B66C909D9FACC5E2A813761388C973E49), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7eece2ef])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7eece2ef])
    SignalFlowHasStarted(flowId=[03ba2252-17e0-4575-a706-7f95550d7ebc])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6653957000470862753), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5325193458137452130), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6653957000470862753--2038329724616179185-0-0), senderUUID=faa9eeae-c11b-4af2-b16d-0a5266fff3f7))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5325193458137452130): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6653957000470862753)), errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7eece2ef]
    []


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.828Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.830Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.844Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), maySkipCheckpoint=false, fiber=07BC2921ED4223D1776A003DC381FAE5AD7FEF54BB3E748C643E657B27DD63B4, )
  Actions: 
    PersistCheckpoint(id=[03ba2252-17e0-4575-a706-7f95550d7ebc], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Invocation, sessionId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5325193458137452130)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6653957000470862753)), errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), frozenFiber=07BC2921ED4223D1776A003DC381FAE5AD7FEF54BB3E748C643E657B27DD63B4), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9CAF88FD74246A469F2DBE037FAE158B66C909D9FACC5E2A813761388C973E49)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), frozenFiber=07BC2921ED4223D1776A003DC381FAE5AD7FEF54BB3E748C643E657B27DD63B4)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.846Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5325193458137452130).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.860Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.877Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=7ACBF2A198F764E4B1F906821ACC4F9CF7CB1421BC7D3649291F23E6531051FA, )
  Actions: 
    PersistCheckpoint(id=[03ba2252-17e0-4575-a706-7f95550d7ebc], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Invocation, sessionId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5325193458137452130)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6653957000470862753)), errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=7ACBF2A198F764E4B1F906821ACC4F9CF7CB1421BC7D3649291F23E6531051FA), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    07BC2921ED4223D1776A003DC381FAE5AD7FEF54BB3E748C643E657B27DD63B4
    7ACBF2A198F764E4B1F906821ACC4F9CF7CB1421BC7D3649291F23E6531051FA
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.881Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6653957000470862753), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6653957000470862753--2038329724616179185-2-0), senderUUID=faa9eeae-c11b-4af2-b16d-0a5266fff3f7))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.883Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.889Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.892Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), maySkipCheckpoint=false, fiber=4F10D211A3BBDF0745A397E6C98078C7E5BFE6FE085CBFB28FC93BD9DED3F92B, )
  Actions: 
    PersistCheckpoint(id=[03ba2252-17e0-4575-a706-7f95550d7ebc], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Invocation, sessionId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5325193458137452130)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6653957000470862753)), errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), frozenFiber=4F10D211A3BBDF0745A397E6C98078C7E5BFE6FE085CBFB28FC93BD9DED3F92B), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))])
checkpoint.flowState.frozenFiber.hash: 
    7ACBF2A198F764E4B1F906821ACC4F9CF7CB1421BC7D3649291F23E6531051FA
    4F10D211A3BBDF0745A397E6C98078C7E5BFE6FE085CBFB28FC93BD9DED3F92B
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.892Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.926Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5325193458137452130), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4b5c1c36, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-5325193458137452130).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6653957000470862753))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4b5c1c36]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.927Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.927Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.933Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4195284843830930441, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.940Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.941Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [03ba2252-17e0-4575-a706-7f95550d7ebc] ---
  Timestamp: 2020-02-03T01:44:46.976Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4195284843830930441)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)], senderUUID=faa9eeae-c11b-4af2-b16d-0a5266fff3f7)
    CreateTransaction
    RemoveCheckpoint(id=[03ba2252-17e0-4575-a706-7f95550d7ebc])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4b5c1c36])
    ReleaseSoftLocks(uuid=03ba2252-17e0-4575-a706-7f95550d7ebc)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4b5c1c36])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-5325193458137452130)])
    RemoveFlow(flowId=[03ba2252-17e0-4575-a706-7f95550d7ebc], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4195284843830930441, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Invocation, sessionId=d4f9711d-52d7-4168-ab77-4ab461909440, timestamp: 2020-02-03T01:44:46.793Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5325193458137452130)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6653957000470862753--2038329724616179185)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5325193458137452130))]), frozenFiber=4F10D211A3BBDF0745A397E6C98078C7E5BFE6FE085CBFB28FC93BD9DED3F92B), errorState=Errored(errors=[FlowError(errorId=4195284843830930441, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@4565dc5a, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=faa9eeae-c11b-4af2-b16d-0a5266fff3f7))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4b5c1c36]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
[WARN ] 2020-02-03T01:44:46,980Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [03ba2252-17e0-4575-a706-7f95550d7ebc] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=03ba2252-17e0-4575-a706-7f95550d7ebc, invocation_id=d4f9711d-52d7-4168-ab77-4ab461909440, invocation_timestamp=2020-02-03T01:44:46.793Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d4f9711d-52d7-4168-ab77-4ab461909440, session_timestamp=2020-02-03T01:44:46.793Z, thread-id=102, tx_id=446E6813AB133A8B4993F8E7E587335137D67AE9835669FD69F15350BD417624}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5325193458137452130) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:47,065Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014447.009/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:44:47,065Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014447.009/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:47,066Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014447.009/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:47,083Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:47,089Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:47,091Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:47,092Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:47,092Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:47,096Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:47.009Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:47,412Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:47,413Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014447.009/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:47,413Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:47,414Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:47,416Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:47,416Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:47,473Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:47,481Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:47,500Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:47,505Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:47,505Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:47,589Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:47,592Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:47,592Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694287592) {}
[INFO ] 2020-02-03T01:44:47,594Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:47,606Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694287592) {}
[INFO ] 2020-02-03T01:44:47,614Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:47,627Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694287592) {}
[INFO ] 2020-02-03T01:44:47,646Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:47,665Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:47,666Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:44:47,667Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:44:47,672Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694287592) {}
[INFO ] 2020-02-03T01:44:47,675Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694287592) {}
[INFO ] 2020-02-03T01:44:47,675Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:47,675Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694287592) {}
[INFO ] 2020-02-03T01:44:47,675Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:47,677Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014447.009/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:44:47,677Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014447.009/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:47,677Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014447.009/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:47,701Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:47,705Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:47,722Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:47,722Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:47,722Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:47,727Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:47.009Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:48,002Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:48,004Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014447.009/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:48,004Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:48,005Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:48,006Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:48,006Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:48,100Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:48,107Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:48,111Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:48,111Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:48,122Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:48,122Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:48,194Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:48,198Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:48,198Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694288198) {}
[INFO ] 2020-02-03T01:44:48,199Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:48,204Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694288198) {}
[INFO ] 2020-02-03T01:44:48,210Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:48,216Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694288198) {}
[INFO ] 2020-02-03T01:44:48,228Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:48,252Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:48,257Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694288198) {}
[INFO ] 2020-02-03T01:44:48,262Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694287592) {}
[INFO ] 2020-02-03T01:44:48,263Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:48,270Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694288198) {}
[INFO ] 2020-02-03T01:44:48,272Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:48,278Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694288198) {}
[INFO ] 2020-02-03T01:44:48,279Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:48,279Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694288198) {}
[INFO ] 2020-02-03T01:44:48,279Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:48,281Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014447.009/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:44:48,281Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014447.009/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:48,281Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014447.009/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:48,305Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:48,309Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:48,326Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:48,327Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:48,327Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:48,330Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:47.009Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:48,587Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:48,588Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014447.009/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:48,588Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:48,589Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:48,591Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:48,591Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:48,640Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:48,646Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:48,648Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:48,648Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:48,658Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:48,658Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:48,729Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:48,732Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:48,732Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694288732) {}
[INFO ] 2020-02-03T01:44:48,733Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:48,737Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694288732) {}
[INFO ] 2020-02-03T01:44:48,742Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:48,763Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694288732) {}
[INFO ] 2020-02-03T01:44:48,784Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:48,807Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:48,812Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694288732) {}
[INFO ] 2020-02-03T01:44:48,814Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694287592) {}
[INFO ] 2020-02-03T01:44:48,815Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:48,821Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694288732) {}
[INFO ] 2020-02-03T01:44:48,822Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:48,829Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694288198) {}
[INFO ] 2020-02-03T01:44:48,830Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:48,837Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694288732) {}
[INFO ] 2020-02-03T01:44:48,838Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:48,845Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694288732) {}
[INFO ] 2020-02-03T01:44:48,845Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:48,845Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694288732) {}
[INFO ] 2020-02-03T01:44:48,845Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:49,538Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9d0ec0ce-11fe-484f-931e-14a8d4e5afdb, invocation_id=8969cb85-b5c2-45b4-803f-09692eca146e, invocation_timestamp=2020-02-03T01:44:48.845Z, origin=Only For Testing, session_id=8969cb85-b5c2-45b4-803f-09692eca146e, session_timestamp=2020-02-03T01:44:48.845Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[INFO ] 2020-02-03T01:44:49,539Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9d0ec0ce-11fe-484f-931e-14a8d4e5afdb, invocation_id=8969cb85-b5c2-45b4-803f-09692eca146e, invocation_timestamp=2020-02-03T01:44:48.845Z, origin=Only For Testing, session_id=8969cb85-b5c2-45b4-803f-09692eca146e, session_timestamp=2020-02-03T01:44:48.845Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[INFO ] 2020-02-03T01:44:49,551Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9d0ec0ce-11fe-484f-931e-14a8d4e5afdb, invocation_id=8969cb85-b5c2-45b4-803f-09692eca146e, invocation_timestamp=2020-02-03T01:44:48.845Z, origin=Only For Testing, session_id=8969cb85-b5c2-45b4-803f-09692eca146e, session_timestamp=2020-02-03T01:44:48.845Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[INFO ] 2020-02-03T01:44:49,580Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[WARN ] 2020-02-03T01:44:49,580Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[INFO ] 2020-02-03T01:44:49,588Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[INFO ] 2020-02-03T01:44:49,599Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9d0ec0ce-11fe-484f-931e-14a8d4e5afdb, invocation_id=8969cb85-b5c2-45b4-803f-09692eca146e, invocation_timestamp=2020-02-03T01:44:48.845Z, origin=Only For Testing, session_id=8969cb85-b5c2-45b4-803f-09692eca146e, session_timestamp=2020-02-03T01:44:48.845Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[INFO ] 2020-02-03T01:44:49,600Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9d0ec0ce-11fe-484f-931e-14a8d4e5afdb, invocation_id=8969cb85-b5c2-45b4-803f-09692eca146e, invocation_timestamp=2020-02-03T01:44:48.845Z, origin=Only For Testing, session_id=8969cb85-b5c2-45b4-803f-09692eca146e, session_timestamp=2020-02-03T01:44:48.845Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[INFO ] 2020-02-03T01:44:49,605Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:49,607Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Invocation, sessionId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=570124868364979447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), frozenFiber=FB63C1A1C0A8858EB1F98DECC1258E1BDAF1A526769759001225FCA93FC28801), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@16f9d59b, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c229f40], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=ec7b823a-4c95-4dd3-bbc5-5ac6ee542c68) {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[INFO ] 2020-02-03T01:44:49,608Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] has error [0] {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:49,609Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] error allowed to propagate {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[WARN ] 2020-02-03T01:44:49,612Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] errored, dumping all transitions:

 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.575Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Invocation, sessionId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=095A3EB4B1E11E12374B989CD89076D752B8E642E2B3CCFC3F99B64D6499D095), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@365884a7])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@365884a7])
    SignalFlowHasStarted(flowId=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7206114998455099452), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=570124868364979447), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7206114998455099452--4414651851380112011-0-0), senderUUID=ec7b823a-4c95-4dd3-bbc5-5ac6ee542c68))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=570124868364979447): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7206114998455099452)), errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@365884a7]
    []


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.575Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.575Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.578Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), maySkipCheckpoint=false, fiber=A0CC909B63568D38CA488F3B89A1DE2E65F30BB7C71A7FCC1F22B6ADF439C97A, )
  Actions: 
    PersistCheckpoint(id=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Invocation, sessionId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=570124868364979447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7206114998455099452)), errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), frozenFiber=A0CC909B63568D38CA488F3B89A1DE2E65F30BB7C71A7FCC1F22B6ADF439C97A), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=095A3EB4B1E11E12374B989CD89076D752B8E642E2B3CCFC3F99B64D6499D095)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), frozenFiber=A0CC909B63568D38CA488F3B89A1DE2E65F30BB7C71A7FCC1F22B6ADF439C97A)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.578Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=570124868364979447).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.580Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.585Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2C06F684196C15C5D534A76EAF711281C2F36EF371BB61BB0D84E6AA9A8390B4, )
  Actions: 
    PersistCheckpoint(id=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Invocation, sessionId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=570124868364979447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7206114998455099452)), errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2C06F684196C15C5D534A76EAF711281C2F36EF371BB61BB0D84E6AA9A8390B4), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    A0CC909B63568D38CA488F3B89A1DE2E65F30BB7C71A7FCC1F22B6ADF439C97A
    2C06F684196C15C5D534A76EAF711281C2F36EF371BB61BB0D84E6AA9A8390B4
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.587Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7206114998455099452), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7206114998455099452--4414651851380112011-2-0), senderUUID=ec7b823a-4c95-4dd3-bbc5-5ac6ee542c68))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.588Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.591Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.593Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), maySkipCheckpoint=false, fiber=FB63C1A1C0A8858EB1F98DECC1258E1BDAF1A526769759001225FCA93FC28801, )
  Actions: 
    PersistCheckpoint(id=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Invocation, sessionId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=570124868364979447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7206114998455099452)), errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), frozenFiber=FB63C1A1C0A8858EB1F98DECC1258E1BDAF1A526769759001225FCA93FC28801), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))])
checkpoint.flowState.frozenFiber.hash: 
    2C06F684196C15C5D534A76EAF711281C2F36EF371BB61BB0D84E6AA9A8390B4
    FB63C1A1C0A8858EB1F98DECC1258E1BDAF1A526769759001225FCA93FC28801
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.595Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.605Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=570124868364979447), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c229f40, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=570124868364979447).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-7206114998455099452))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c229f40]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.605Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.605Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.609Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-27708330642748040, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.609Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.609Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[WARN ] 2020-02-03T01:44:49,613Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:44:49,614Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[WARN ] 2020-02-03T01:44:49,621Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] errored, dumping all transitions:

 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.575Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Invocation, sessionId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=095A3EB4B1E11E12374B989CD89076D752B8E642E2B3CCFC3F99B64D6499D095), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@365884a7])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@365884a7])
    SignalFlowHasStarted(flowId=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7206114998455099452), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=570124868364979447), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7206114998455099452--4414651851380112011-0-0), senderUUID=ec7b823a-4c95-4dd3-bbc5-5ac6ee542c68))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=570124868364979447): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7206114998455099452)), errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@365884a7]
    []


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.575Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.575Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.578Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), maySkipCheckpoint=false, fiber=A0CC909B63568D38CA488F3B89A1DE2E65F30BB7C71A7FCC1F22B6ADF439C97A, )
  Actions: 
    PersistCheckpoint(id=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Invocation, sessionId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=570124868364979447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7206114998455099452)), errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), frozenFiber=A0CC909B63568D38CA488F3B89A1DE2E65F30BB7C71A7FCC1F22B6ADF439C97A), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=095A3EB4B1E11E12374B989CD89076D752B8E642E2B3CCFC3F99B64D6499D095)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), frozenFiber=A0CC909B63568D38CA488F3B89A1DE2E65F30BB7C71A7FCC1F22B6ADF439C97A)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.578Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=570124868364979447).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.580Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.585Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2C06F684196C15C5D534A76EAF711281C2F36EF371BB61BB0D84E6AA9A8390B4, )
  Actions: 
    PersistCheckpoint(id=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Invocation, sessionId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=570124868364979447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7206114998455099452)), errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2C06F684196C15C5D534A76EAF711281C2F36EF371BB61BB0D84E6AA9A8390B4), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    A0CC909B63568D38CA488F3B89A1DE2E65F30BB7C71A7FCC1F22B6ADF439C97A
    2C06F684196C15C5D534A76EAF711281C2F36EF371BB61BB0D84E6AA9A8390B4
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.587Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7206114998455099452), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7206114998455099452--4414651851380112011-2-0), senderUUID=ec7b823a-4c95-4dd3-bbc5-5ac6ee542c68))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.588Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.591Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.593Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), maySkipCheckpoint=false, fiber=FB63C1A1C0A8858EB1F98DECC1258E1BDAF1A526769759001225FCA93FC28801, )
  Actions: 
    PersistCheckpoint(id=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Invocation, sessionId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=570124868364979447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7206114998455099452)), errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), frozenFiber=FB63C1A1C0A8858EB1F98DECC1258E1BDAF1A526769759001225FCA93FC28801), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))])
checkpoint.flowState.frozenFiber.hash: 
    2C06F684196C15C5D534A76EAF711281C2F36EF371BB61BB0D84E6AA9A8390B4
    FB63C1A1C0A8858EB1F98DECC1258E1BDAF1A526769759001225FCA93FC28801
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.595Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.605Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=570124868364979447), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c229f40, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=570124868364979447).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-7206114998455099452))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c229f40]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.605Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.605Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.609Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-27708330642748040, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.609Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.609Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] ---
  Timestamp: 2020-02-03T01:44:49.619Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-27708330642748040)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)], senderUUID=ec7b823a-4c95-4dd3-bbc5-5ac6ee542c68)
    CreateTransaction
    RemoveCheckpoint(id=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c229f40])
    ReleaseSoftLocks(uuid=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c229f40])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=570124868364979447)])
    RemoveFlow(flowId=[e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-27708330642748040, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Invocation, sessionId=63affa7c-c54e-47ae-a201-df385373acb4, timestamp: 2020-02-03T01:44:49.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=570124868364979447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--7206114998455099452--4414651851380112011)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=570124868364979447))]), frozenFiber=FB63C1A1C0A8858EB1F98DECC1258E1BDAF1A526769759001225FCA93FC28801), errorState=Errored(errors=[FlowError(errorId=-27708330642748040, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@16f9d59b, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=ec7b823a-4c95-4dd3-bbc5-5ac6ee542c68))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c229f40]
    []
isRemoved: 
    false
    true
 {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
[WARN ] 2020-02-03T01:44:49,622Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000004, flow-id=e18c0e7c-63b3-48a8-8cdd-e53cbd8dc3f1, invocation_id=63affa7c-c54e-47ae-a201-df385373acb4, invocation_timestamp=2020-02-03T01:44:49.567Z, origin=O=Mock Company 1, L=London, C=GB, session_id=63affa7c-c54e-47ae-a201-df385373acb4, session_timestamp=2020-02-03T01:44:49.567Z, thread-id=194, tx_id=7AF19616A13C5F844FA8A220E5C75BAABB556672370B7F3E1176491EE37CE4CC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=570124868364979447) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:49,674Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014449.639/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:44:49,674Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014449.639/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:49,674Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014449.639/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:49,700Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:49,705Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:49,708Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:49,708Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:49,708Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:49,713Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:49.639Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:50,045Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:50,048Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014449.639/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:50,048Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:50,049Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:50,051Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:50,051Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:50,103Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:50,110Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:50,128Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:50,134Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:50,134Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:50,218Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:50,222Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:50,222Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694290222) {}
[INFO ] 2020-02-03T01:44:50,223Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:50,234Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694290222) {}
[INFO ] 2020-02-03T01:44:50,240Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:50,253Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694290222) {}
[INFO ] 2020-02-03T01:44:50,264Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:50,272Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:50,273Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:44:50,273Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:44:50,277Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694290222) {}
[INFO ] 2020-02-03T01:44:50,279Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694290222) {}
[INFO ] 2020-02-03T01:44:50,279Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:50,279Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694290222) {}
[INFO ] 2020-02-03T01:44:50,279Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:50,280Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014449.639/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:44:50,282Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014449.639/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:50,282Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014449.639/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:50,303Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:50,308Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:50,322Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:50,323Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:50,324Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:50,326Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:49.639Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:50,585Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:50,586Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014449.639/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:50,586Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:50,587Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:50,588Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:50,589Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:50,636Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:50,642Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:50,643Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:50,644Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:50,653Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:50,653Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:50,730Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:50,734Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:50,734Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694290734) {}
[INFO ] 2020-02-03T01:44:50,736Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:50,741Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694290734) {}
[INFO ] 2020-02-03T01:44:50,746Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:50,759Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694290734) {}
[INFO ] 2020-02-03T01:44:50,768Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:50,794Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:50,802Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694290734) {}
[INFO ] 2020-02-03T01:44:50,804Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694290222) {}
[INFO ] 2020-02-03T01:44:50,805Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:50,812Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694290734) {}
[INFO ] 2020-02-03T01:44:50,813Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:50,820Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694290734) {}
[INFO ] 2020-02-03T01:44:50,820Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:50,820Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694290734) {}
[INFO ] 2020-02-03T01:44:50,820Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:50,821Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014449.639/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:44:50,822Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014449.639/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:50,822Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014449.639/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:50,838Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:50,845Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:50,859Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:50,860Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:50,861Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:50,864Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:49.639Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:51,111Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:51,112Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014449.639/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:51,112Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:51,113Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:51,114Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:51,115Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:51,160Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:51,166Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:51,167Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:51,167Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:51,177Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:51,177Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:51,240Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:51,244Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:51,245Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694291245) {}
[INFO ] 2020-02-03T01:44:51,247Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:51,252Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694291245) {}
[INFO ] 2020-02-03T01:44:51,256Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:51,259Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694291245) {}
[INFO ] 2020-02-03T01:44:51,262Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:51,311Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:51,316Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694291245) {}
[INFO ] 2020-02-03T01:44:51,319Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694290222) {}
[INFO ] 2020-02-03T01:44:51,320Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:51,325Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694291245) {}
[INFO ] 2020-02-03T01:44:51,326Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:51,332Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694290734) {}
[INFO ] 2020-02-03T01:44:51,333Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:51,339Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694291245) {}
[INFO ] 2020-02-03T01:44:51,340Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:51,346Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694291245) {}
[INFO ] 2020-02-03T01:44:51,346Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:51,346Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694291245) {}
[INFO ] 2020-02-03T01:44:51,346Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:52,016Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e3c8f367-c08b-4a80-bca9-61e82ae0841c, invocation_id=ce5fe430-77b7-4a68-bce0-87f102a46fe5, invocation_timestamp=2020-02-03T01:44:51.350Z, origin=Only For Testing, session_id=ce5fe430-77b7-4a68-bce0-87f102a46fe5, session_timestamp=2020-02-03T01:44:51.350Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[INFO ] 2020-02-03T01:44:52,016Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e3c8f367-c08b-4a80-bca9-61e82ae0841c, invocation_id=ce5fe430-77b7-4a68-bce0-87f102a46fe5, invocation_timestamp=2020-02-03T01:44:51.350Z, origin=Only For Testing, session_id=ce5fe430-77b7-4a68-bce0-87f102a46fe5, session_timestamp=2020-02-03T01:44:51.350Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[INFO ] 2020-02-03T01:44:52,027Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e3c8f367-c08b-4a80-bca9-61e82ae0841c, invocation_id=ce5fe430-77b7-4a68-bce0-87f102a46fe5, invocation_timestamp=2020-02-03T01:44:51.350Z, origin=Only For Testing, session_id=ce5fe430-77b7-4a68-bce0-87f102a46fe5, session_timestamp=2020-02-03T01:44:51.350Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[INFO ] 2020-02-03T01:44:52,054Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[WARN ] 2020-02-03T01:44:52,054Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[INFO ] 2020-02-03T01:44:52,063Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[INFO ] 2020-02-03T01:44:52,074Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e3c8f367-c08b-4a80-bca9-61e82ae0841c, invocation_id=ce5fe430-77b7-4a68-bce0-87f102a46fe5, invocation_timestamp=2020-02-03T01:44:51.350Z, origin=Only For Testing, session_id=ce5fe430-77b7-4a68-bce0-87f102a46fe5, session_timestamp=2020-02-03T01:44:51.350Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[INFO ] 2020-02-03T01:44:52,074Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e3c8f367-c08b-4a80-bca9-61e82ae0841c, invocation_id=ce5fe430-77b7-4a68-bce0-87f102a46fe5, invocation_timestamp=2020-02-03T01:44:51.350Z, origin=Only For Testing, session_id=ce5fe430-77b7-4a68-bce0-87f102a46fe5, session_timestamp=2020-02-03T01:44:51.350Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[INFO ] 2020-02-03T01:44:52,078Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:52,079Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [9fb93f82-71a9-4d87-af50-7683218ea810] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Invocation, sessionId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9213477194624019068)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), frozenFiber=B7B40F25BC8133EB346234C551A9C8CD95E1C455B0372E6E48B64C416C7FAA49), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@3b1d9c30, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@619c4dc2], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=9677231a-7e50-4ebf-812e-d2cdda56bb3c) {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[INFO ] 2020-02-03T01:44:52,079Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [9fb93f82-71a9-4d87-af50-7683218ea810] has error [0] {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:52,079Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [9fb93f82-71a9-4d87-af50-7683218ea810] error allowed to propagate {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[WARN ] 2020-02-03T01:44:52,082Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9fb93f82-71a9-4d87-af50-7683218ea810] errored, dumping all transitions:

 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.049Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9fb93f82-71a9-4d87-af50-7683218ea810], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Invocation, sessionId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=8C0959A668578A416156CE8BB34B1F45FF3C4F4AAC0471D85C9BEFFA7A8C06DA), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7561b67c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7561b67c])
    SignalFlowHasStarted(flowId=[9fb93f82-71a9-4d87-af50-7683218ea810])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6593402063851409328), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-9213477194624019068), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6593402063851409328--7942284971708721494-0-0), senderUUID=9677231a-7e50-4ebf-812e-d2cdda56bb3c))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-9213477194624019068): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6593402063851409328)), errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7561b67c]
    []


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.049Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.049Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.052Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), maySkipCheckpoint=false, fiber=F7FD8D9631D5D3644A9EE9CED10CD98632EE98FAFD43BF341B443E3C3E1C62C9, )
  Actions: 
    PersistCheckpoint(id=[9fb93f82-71a9-4d87-af50-7683218ea810], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Invocation, sessionId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9213477194624019068)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6593402063851409328)), errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), frozenFiber=F7FD8D9631D5D3644A9EE9CED10CD98632EE98FAFD43BF341B443E3C3E1C62C9), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=8C0959A668578A416156CE8BB34B1F45FF3C4F4AAC0471D85C9BEFFA7A8C06DA)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), frozenFiber=F7FD8D9631D5D3644A9EE9CED10CD98632EE98FAFD43BF341B443E3C3E1C62C9)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.052Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-9213477194624019068).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.055Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.060Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=44F9B3A45AB0D315FE5FC4737CD3CCA5DB182CE710E09721C87FC1AAF3A0FAE7, )
  Actions: 
    PersistCheckpoint(id=[9fb93f82-71a9-4d87-af50-7683218ea810], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Invocation, sessionId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9213477194624019068)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6593402063851409328)), errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=44F9B3A45AB0D315FE5FC4737CD3CCA5DB182CE710E09721C87FC1AAF3A0FAE7), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    F7FD8D9631D5D3644A9EE9CED10CD98632EE98FAFD43BF341B443E3C3E1C62C9
    44F9B3A45AB0D315FE5FC4737CD3CCA5DB182CE710E09721C87FC1AAF3A0FAE7
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.063Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6593402063851409328), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6593402063851409328--7942284971708721494-2-0), senderUUID=9677231a-7e50-4ebf-812e-d2cdda56bb3c))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.063Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.066Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.068Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), maySkipCheckpoint=false, fiber=B7B40F25BC8133EB346234C551A9C8CD95E1C455B0372E6E48B64C416C7FAA49, )
  Actions: 
    PersistCheckpoint(id=[9fb93f82-71a9-4d87-af50-7683218ea810], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Invocation, sessionId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9213477194624019068)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6593402063851409328)), errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), frozenFiber=B7B40F25BC8133EB346234C551A9C8CD95E1C455B0372E6E48B64C416C7FAA49), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))])
checkpoint.flowState.frozenFiber.hash: 
    44F9B3A45AB0D315FE5FC4737CD3CCA5DB182CE710E09721C87FC1AAF3A0FAE7
    B7B40F25BC8133EB346234C551A9C8CD95E1C455B0372E6E48B64C416C7FAA49
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.070Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.078Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9213477194624019068), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@619c4dc2, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-9213477194624019068).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6593402063851409328))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@619c4dc2]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.078Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.078Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.079Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5809040409646685570, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.079Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.079Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[WARN ] 2020-02-03T01:44:52,082Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9fb93f82-71a9-4d87-af50-7683218ea810] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:44:52,082Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[WARN ] 2020-02-03T01:44:52,089Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9fb93f82-71a9-4d87-af50-7683218ea810] errored, dumping all transitions:

 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.049Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9fb93f82-71a9-4d87-af50-7683218ea810], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Invocation, sessionId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=8C0959A668578A416156CE8BB34B1F45FF3C4F4AAC0471D85C9BEFFA7A8C06DA), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7561b67c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7561b67c])
    SignalFlowHasStarted(flowId=[9fb93f82-71a9-4d87-af50-7683218ea810])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6593402063851409328), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-9213477194624019068), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6593402063851409328--7942284971708721494-0-0), senderUUID=9677231a-7e50-4ebf-812e-d2cdda56bb3c))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-9213477194624019068): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6593402063851409328)), errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7561b67c]
    []


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.049Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.049Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.052Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), maySkipCheckpoint=false, fiber=F7FD8D9631D5D3644A9EE9CED10CD98632EE98FAFD43BF341B443E3C3E1C62C9, )
  Actions: 
    PersistCheckpoint(id=[9fb93f82-71a9-4d87-af50-7683218ea810], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Invocation, sessionId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9213477194624019068)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6593402063851409328)), errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), frozenFiber=F7FD8D9631D5D3644A9EE9CED10CD98632EE98FAFD43BF341B443E3C3E1C62C9), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=8C0959A668578A416156CE8BB34B1F45FF3C4F4AAC0471D85C9BEFFA7A8C06DA)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), frozenFiber=F7FD8D9631D5D3644A9EE9CED10CD98632EE98FAFD43BF341B443E3C3E1C62C9)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.052Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-9213477194624019068).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.055Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.060Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=44F9B3A45AB0D315FE5FC4737CD3CCA5DB182CE710E09721C87FC1AAF3A0FAE7, )
  Actions: 
    PersistCheckpoint(id=[9fb93f82-71a9-4d87-af50-7683218ea810], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Invocation, sessionId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9213477194624019068)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6593402063851409328)), errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=44F9B3A45AB0D315FE5FC4737CD3CCA5DB182CE710E09721C87FC1AAF3A0FAE7), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    F7FD8D9631D5D3644A9EE9CED10CD98632EE98FAFD43BF341B443E3C3E1C62C9
    44F9B3A45AB0D315FE5FC4737CD3CCA5DB182CE710E09721C87FC1AAF3A0FAE7
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.063Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6593402063851409328), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6593402063851409328--7942284971708721494-2-0), senderUUID=9677231a-7e50-4ebf-812e-d2cdda56bb3c))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.063Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.066Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.068Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), maySkipCheckpoint=false, fiber=B7B40F25BC8133EB346234C551A9C8CD95E1C455B0372E6E48B64C416C7FAA49, )
  Actions: 
    PersistCheckpoint(id=[9fb93f82-71a9-4d87-af50-7683218ea810], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Invocation, sessionId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9213477194624019068)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6593402063851409328)), errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), frozenFiber=B7B40F25BC8133EB346234C551A9C8CD95E1C455B0372E6E48B64C416C7FAA49), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))])
checkpoint.flowState.frozenFiber.hash: 
    44F9B3A45AB0D315FE5FC4737CD3CCA5DB182CE710E09721C87FC1AAF3A0FAE7
    B7B40F25BC8133EB346234C551A9C8CD95E1C455B0372E6E48B64C416C7FAA49
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.070Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.078Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9213477194624019068), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@619c4dc2, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-9213477194624019068).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6593402063851409328))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@619c4dc2]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.078Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.078Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.079Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5809040409646685570, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.079Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.079Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [9fb93f82-71a9-4d87-af50-7683218ea810] ---
  Timestamp: 2020-02-03T01:44:52.087Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5809040409646685570)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)], senderUUID=9677231a-7e50-4ebf-812e-d2cdda56bb3c)
    CreateTransaction
    RemoveCheckpoint(id=[9fb93f82-71a9-4d87-af50-7683218ea810])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@619c4dc2])
    ReleaseSoftLocks(uuid=9fb93f82-71a9-4d87-af50-7683218ea810)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@619c4dc2])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-9213477194624019068)])
    RemoveFlow(flowId=[9fb93f82-71a9-4d87-af50-7683218ea810], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5809040409646685570, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Invocation, sessionId=bb305861-82fa-4b34-b340-9adbf48e991d, timestamp: 2020-02-03T01:44:52.043Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9213477194624019068)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6593402063851409328--7942284971708721494)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9213477194624019068))]), frozenFiber=B7B40F25BC8133EB346234C551A9C8CD95E1C455B0372E6E48B64C416C7FAA49), errorState=Errored(errors=[FlowError(errorId=-5809040409646685570, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@3b1d9c30, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=9677231a-7e50-4ebf-812e-d2cdda56bb3c))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@619c4dc2]
    []
isRemoved: 
    false
    true
 {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
[WARN ] 2020-02-03T01:44:52,089Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9fb93f82-71a9-4d87-af50-7683218ea810] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000006, flow-id=9fb93f82-71a9-4d87-af50-7683218ea810, invocation_id=bb305861-82fa-4b34-b340-9adbf48e991d, invocation_timestamp=2020-02-03T01:44:52.043Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bb305861-82fa-4b34-b340-9adbf48e991d, session_timestamp=2020-02-03T01:44:52.043Z, thread-id=283, tx_id=61775F8A00194DDF987DE206A9A5A84E07BDB163072B3352C5419D5377487C83}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9213477194624019068) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:52,133Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014452.101/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:44:52,134Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014452.101/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:52,134Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014452.101/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:52,148Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:52,152Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:52,154Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:52,154Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:52,154Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:52,159Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:52.101Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:52,452Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:52,455Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014452.101/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:52,456Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:52,458Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:52,461Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:52,462Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:52,550Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:52,557Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:52,579Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:52,583Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:52,584Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:52,651Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:52,654Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:52,654Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694292654) {}
[INFO ] 2020-02-03T01:44:52,655Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:52,664Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694292654) {}
[INFO ] 2020-02-03T01:44:52,670Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:52,674Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694292654) {}
[INFO ] 2020-02-03T01:44:52,680Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:52,706Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:52,707Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:44:52,708Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:44:52,711Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694292654) {}
[INFO ] 2020-02-03T01:44:52,715Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694292654) {}
[INFO ] 2020-02-03T01:44:52,715Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:52,715Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694292654) {}
[INFO ] 2020-02-03T01:44:52,715Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:52,718Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014452.101/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:44:52,718Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014452.101/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:52,719Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014452.101/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:52,737Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:52,740Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:52,752Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:52,752Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:52,752Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:52,754Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:52.101Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:52,994Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:52,995Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014452.101/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:52,995Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:52,996Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:52,997Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:52,998Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:53,040Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:53,045Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:53,046Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:53,047Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:53,056Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:53,056Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:53,119Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:53,122Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:53,122Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694293122) {}
[INFO ] 2020-02-03T01:44:53,123Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:53,128Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694293122) {}
[INFO ] 2020-02-03T01:44:53,132Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:53,138Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694293122) {}
[INFO ] 2020-02-03T01:44:53,145Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:53,177Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:53,183Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694293122) {}
[INFO ] 2020-02-03T01:44:53,187Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694292654) {}
[INFO ] 2020-02-03T01:44:53,188Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:53,194Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694293122) {}
[INFO ] 2020-02-03T01:44:53,194Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:53,201Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694293122) {}
[INFO ] 2020-02-03T01:44:53,201Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:53,201Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694293122) {}
[INFO ] 2020-02-03T01:44:53,202Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:53,203Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014452.101/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:44:53,203Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014452.101/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:53,203Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014452.101/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:53,228Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:53,231Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:53,243Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:53,244Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:53,244Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:53,245Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:52.101Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:53,482Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:53,483Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014452.101/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:53,483Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:53,484Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:53,485Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:53,485Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:53,530Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:53,536Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:53,537Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:53,538Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:53,546Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:53,547Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:53,615Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:53,618Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:53,618Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694293618) {}
[INFO ] 2020-02-03T01:44:53,620Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:53,624Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694293618) {}
[INFO ] 2020-02-03T01:44:53,629Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:53,641Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694293618) {}
[INFO ] 2020-02-03T01:44:53,649Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:53,679Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:53,684Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694293618) {}
[INFO ] 2020-02-03T01:44:53,689Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694292654) {}
[INFO ] 2020-02-03T01:44:53,690Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:53,696Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694293618) {}
[INFO ] 2020-02-03T01:44:53,698Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:53,704Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694293122) {}
[INFO ] 2020-02-03T01:44:53,705Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:53,710Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694293618) {}
[INFO ] 2020-02-03T01:44:53,711Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:53,716Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694293618) {}
[INFO ] 2020-02-03T01:44:53,717Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:53,717Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694293618) {}
[INFO ] 2020-02-03T01:44:53,717Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:54,633Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=f5de21b1-e0ff-41dc-9cf4-a454376c5d7d, invocation_id=d2eac501-5b6f-445e-bd9b-9de66d6b7287, invocation_timestamp=2020-02-03T01:44:53.717Z, origin=Only For Testing, session_id=d2eac501-5b6f-445e-bd9b-9de66d6b7287, session_timestamp=2020-02-03T01:44:53.717Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[INFO ] 2020-02-03T01:44:54,633Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=f5de21b1-e0ff-41dc-9cf4-a454376c5d7d, invocation_id=d2eac501-5b6f-445e-bd9b-9de66d6b7287, invocation_timestamp=2020-02-03T01:44:53.717Z, origin=Only For Testing, session_id=d2eac501-5b6f-445e-bd9b-9de66d6b7287, session_timestamp=2020-02-03T01:44:53.717Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[INFO ] 2020-02-03T01:44:54,644Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=f5de21b1-e0ff-41dc-9cf4-a454376c5d7d, invocation_id=d2eac501-5b6f-445e-bd9b-9de66d6b7287, invocation_timestamp=2020-02-03T01:44:53.717Z, origin=Only For Testing, session_id=d2eac501-5b6f-445e-bd9b-9de66d6b7287, session_timestamp=2020-02-03T01:44:53.717Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[INFO ] 2020-02-03T01:44:54,670Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[WARN ] 2020-02-03T01:44:54,670Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[INFO ] 2020-02-03T01:44:54,676Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[INFO ] 2020-02-03T01:44:54,686Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=f5de21b1-e0ff-41dc-9cf4-a454376c5d7d, invocation_id=d2eac501-5b6f-445e-bd9b-9de66d6b7287, invocation_timestamp=2020-02-03T01:44:53.717Z, origin=Only For Testing, session_id=d2eac501-5b6f-445e-bd9b-9de66d6b7287, session_timestamp=2020-02-03T01:44:53.717Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[INFO ] 2020-02-03T01:44:54,686Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=f5de21b1-e0ff-41dc-9cf4-a454376c5d7d, invocation_id=d2eac501-5b6f-445e-bd9b-9de66d6b7287, invocation_timestamp=2020-02-03T01:44:53.717Z, origin=Only For Testing, session_id=d2eac501-5b6f-445e-bd9b-9de66d6b7287, session_timestamp=2020-02-03T01:44:53.717Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[INFO ] 2020-02-03T01:44:54,690Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:54,691Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [fc27dc71-a267-42bf-a805-afd5ab687b37] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Invocation, sessionId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9024033231394970845)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), frozenFiber=9399A06FEF7DC5D66B932C0B372F1B0EADBF474F9EF1EDB7580CE6459C7C059C), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@585a4068, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@64a6e959], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=63d2c168-b201-4610-b664-a56a330da45a) {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[INFO ] 2020-02-03T01:44:54,691Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [fc27dc71-a267-42bf-a805-afd5ab687b37] has error [0] {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:54,691Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [fc27dc71-a267-42bf-a805-afd5ab687b37] error allowed to propagate {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[WARN ] 2020-02-03T01:44:54,696Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fc27dc71-a267-42bf-a805-afd5ab687b37] errored, dumping all transitions:

 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.666Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fc27dc71-a267-42bf-a805-afd5ab687b37], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Invocation, sessionId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=A7885FEA9D15DB40F9F17DDC2C958EAD249055B7F3FAEEA8886DB9232DBC3E8B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5c602287])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5c602287])
    SignalFlowHasStarted(flowId=[fc27dc71-a267-42bf-a805-afd5ab687b37])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7568469178797261387), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-9024033231394970845), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7568469178797261387--4215493773677448208-0-0), senderUUID=63d2c168-b201-4610-b664-a56a330da45a))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-9024033231394970845): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7568469178797261387)), errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5c602287]
    []


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.666Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.666Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.668Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), maySkipCheckpoint=false, fiber=42C15724B5415ACC432AFDB17525D7E9452ABAAD67374186516A2B23871410E3, )
  Actions: 
    PersistCheckpoint(id=[fc27dc71-a267-42bf-a805-afd5ab687b37], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Invocation, sessionId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9024033231394970845)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7568469178797261387)), errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), frozenFiber=42C15724B5415ACC432AFDB17525D7E9452ABAAD67374186516A2B23871410E3), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=A7885FEA9D15DB40F9F17DDC2C958EAD249055B7F3FAEEA8886DB9232DBC3E8B)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), frozenFiber=42C15724B5415ACC432AFDB17525D7E9452ABAAD67374186516A2B23871410E3)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.668Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-9024033231394970845).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.670Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.674Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=1D054BD670A13BFB7DBFC0861CB206CDF5718175A5DB675C88F13BA34ED1C4FE, )
  Actions: 
    PersistCheckpoint(id=[fc27dc71-a267-42bf-a805-afd5ab687b37], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Invocation, sessionId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9024033231394970845)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7568469178797261387)), errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=1D054BD670A13BFB7DBFC0861CB206CDF5718175A5DB675C88F13BA34ED1C4FE), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    42C15724B5415ACC432AFDB17525D7E9452ABAAD67374186516A2B23871410E3
    1D054BD670A13BFB7DBFC0861CB206CDF5718175A5DB675C88F13BA34ED1C4FE
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.675Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7568469178797261387), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7568469178797261387--4215493773677448208-2-0), senderUUID=63d2c168-b201-4610-b664-a56a330da45a))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.675Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.678Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.680Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), maySkipCheckpoint=false, fiber=9399A06FEF7DC5D66B932C0B372F1B0EADBF474F9EF1EDB7580CE6459C7C059C, )
  Actions: 
    PersistCheckpoint(id=[fc27dc71-a267-42bf-a805-afd5ab687b37], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Invocation, sessionId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9024033231394970845)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7568469178797261387)), errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), frozenFiber=9399A06FEF7DC5D66B932C0B372F1B0EADBF474F9EF1EDB7580CE6459C7C059C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))])
checkpoint.flowState.frozenFiber.hash: 
    1D054BD670A13BFB7DBFC0861CB206CDF5718175A5DB675C88F13BA34ED1C4FE
    9399A06FEF7DC5D66B932C0B372F1B0EADBF474F9EF1EDB7580CE6459C7C059C
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.682Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.690Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9024033231394970845), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@64a6e959, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-9024033231394970845).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-7568469178797261387))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@64a6e959]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.690Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.690Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.691Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3407961324025309506, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.694Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.694Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[WARN ] 2020-02-03T01:44:54,696Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fc27dc71-a267-42bf-a805-afd5ab687b37] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:44:54,696Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[WARN ] 2020-02-03T01:44:54,704Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fc27dc71-a267-42bf-a805-afd5ab687b37] errored, dumping all transitions:

 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.666Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fc27dc71-a267-42bf-a805-afd5ab687b37], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Invocation, sessionId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=A7885FEA9D15DB40F9F17DDC2C958EAD249055B7F3FAEEA8886DB9232DBC3E8B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5c602287])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5c602287])
    SignalFlowHasStarted(flowId=[fc27dc71-a267-42bf-a805-afd5ab687b37])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7568469178797261387), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-9024033231394970845), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7568469178797261387--4215493773677448208-0-0), senderUUID=63d2c168-b201-4610-b664-a56a330da45a))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-9024033231394970845): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7568469178797261387)), errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5c602287]
    []


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.666Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.666Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.668Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), maySkipCheckpoint=false, fiber=42C15724B5415ACC432AFDB17525D7E9452ABAAD67374186516A2B23871410E3, )
  Actions: 
    PersistCheckpoint(id=[fc27dc71-a267-42bf-a805-afd5ab687b37], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Invocation, sessionId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9024033231394970845)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7568469178797261387)), errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), frozenFiber=42C15724B5415ACC432AFDB17525D7E9452ABAAD67374186516A2B23871410E3), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=A7885FEA9D15DB40F9F17DDC2C958EAD249055B7F3FAEEA8886DB9232DBC3E8B)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), frozenFiber=42C15724B5415ACC432AFDB17525D7E9452ABAAD67374186516A2B23871410E3)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.668Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-9024033231394970845).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.670Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.674Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=1D054BD670A13BFB7DBFC0861CB206CDF5718175A5DB675C88F13BA34ED1C4FE, )
  Actions: 
    PersistCheckpoint(id=[fc27dc71-a267-42bf-a805-afd5ab687b37], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Invocation, sessionId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9024033231394970845)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7568469178797261387)), errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=1D054BD670A13BFB7DBFC0861CB206CDF5718175A5DB675C88F13BA34ED1C4FE), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    42C15724B5415ACC432AFDB17525D7E9452ABAAD67374186516A2B23871410E3
    1D054BD670A13BFB7DBFC0861CB206CDF5718175A5DB675C88F13BA34ED1C4FE
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.675Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7568469178797261387), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7568469178797261387--4215493773677448208-2-0), senderUUID=63d2c168-b201-4610-b664-a56a330da45a))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.675Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.678Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.680Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), maySkipCheckpoint=false, fiber=9399A06FEF7DC5D66B932C0B372F1B0EADBF474F9EF1EDB7580CE6459C7C059C, )
  Actions: 
    PersistCheckpoint(id=[fc27dc71-a267-42bf-a805-afd5ab687b37], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Invocation, sessionId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9024033231394970845)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7568469178797261387)), errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), frozenFiber=9399A06FEF7DC5D66B932C0B372F1B0EADBF474F9EF1EDB7580CE6459C7C059C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))])
checkpoint.flowState.frozenFiber.hash: 
    1D054BD670A13BFB7DBFC0861CB206CDF5718175A5DB675C88F13BA34ED1C4FE
    9399A06FEF7DC5D66B932C0B372F1B0EADBF474F9EF1EDB7580CE6459C7C059C
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.682Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.690Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9024033231394970845), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@64a6e959, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-9024033231394970845).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-7568469178797261387))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@64a6e959]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.690Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.690Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.691Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3407961324025309506, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.694Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.694Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [fc27dc71-a267-42bf-a805-afd5ab687b37] ---
  Timestamp: 2020-02-03T01:44:54.702Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=3407961324025309506)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)], senderUUID=63d2c168-b201-4610-b664-a56a330da45a)
    CreateTransaction
    RemoveCheckpoint(id=[fc27dc71-a267-42bf-a805-afd5ab687b37])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@64a6e959])
    ReleaseSoftLocks(uuid=fc27dc71-a267-42bf-a805-afd5ab687b37)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@64a6e959])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-9024033231394970845)])
    RemoveFlow(flowId=[fc27dc71-a267-42bf-a805-afd5ab687b37], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=3407961324025309506, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Invocation, sessionId=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, timestamp: 2020-02-03T01:44:54.660Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-9024033231394970845)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--7568469178797261387--4215493773677448208)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-9024033231394970845))]), frozenFiber=9399A06FEF7DC5D66B932C0B372F1B0EADBF474F9EF1EDB7580CE6459C7C059C), errorState=Errored(errors=[FlowError(errorId=3407961324025309506, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@585a4068, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=63d2c168-b201-4610-b664-a56a330da45a))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@64a6e959]
    []
isRemoved: 
    false
    true
 {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
[WARN ] 2020-02-03T01:44:54,704Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fc27dc71-a267-42bf-a805-afd5ab687b37] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000008, flow-id=fc27dc71-a267-42bf-a805-afd5ab687b37, invocation_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, invocation_timestamp=2020-02-03T01:44:54.660Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0c51f026-67e3-48e5-a81c-d9a8fb4acad4, session_timestamp=2020-02-03T01:44:54.660Z, thread-id=373, tx_id=67817302D9B84FF56CA94C4FB5DDC1D2E4EF55F273DFA6FBCD5537D0F865847C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-9024033231394970845) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:54,753Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014454.721/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:44:54,753Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014454.721/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:54,754Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014454.721/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:54,777Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:54,780Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:54,783Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:54,784Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:54,784Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:54,787Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:54.721Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:55,043Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:55,044Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014454.721/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:55,044Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:55,044Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:55,046Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:55,046Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:55,087Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:55,093Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:55,108Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:55,112Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:55,112Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:55,173Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:55,176Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:55,176Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694295176) {}
[INFO ] 2020-02-03T01:44:55,177Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:55,186Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694295176) {}
[INFO ] 2020-02-03T01:44:55,192Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:55,202Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694295176) {}
[INFO ] 2020-02-03T01:44:55,205Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:55,221Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:55,222Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:44:55,222Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:44:55,228Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694295176) {}
[INFO ] 2020-02-03T01:44:55,231Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694295176) {}
[INFO ] 2020-02-03T01:44:55,231Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:55,231Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694295176) {}
[INFO ] 2020-02-03T01:44:55,231Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:55,232Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014454.721/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:44:55,232Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014454.721/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:55,233Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014454.721/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:55,256Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:55,259Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:55,273Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:55,273Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:55,273Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:55,275Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:54.721Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:55,512Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:55,513Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014454.721/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:55,513Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:55,514Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:55,515Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:55,515Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:55,556Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:55,561Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:55,563Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:55,563Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:55,572Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:55,572Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:55,649Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:55,652Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:55,652Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694295652) {}
[INFO ] 2020-02-03T01:44:55,653Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:55,658Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694295652) {}
[INFO ] 2020-02-03T01:44:55,662Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:55,671Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694295652) {}
[INFO ] 2020-02-03T01:44:55,680Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:55,710Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:55,715Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694295652) {}
[INFO ] 2020-02-03T01:44:55,718Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694295176) {}
[INFO ] 2020-02-03T01:44:55,719Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:55,724Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694295652) {}
[INFO ] 2020-02-03T01:44:55,725Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:55,731Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694295652) {}
[INFO ] 2020-02-03T01:44:55,731Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:55,731Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694295652) {}
[INFO ] 2020-02-03T01:44:55,731Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:55,732Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014454.721/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:44:55,733Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014454.721/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:55,733Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014454.721/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:55,756Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:55,760Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:55,773Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:55,774Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:55,774Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:55,776Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:54.721Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:55,996Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:55,997Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014454.721/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:55,997Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:55,998Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:55,999Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:55,999Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:56,040Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:56,045Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:56,046Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:56,047Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:56,055Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:56,056Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:56,122Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:56,126Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:56,126Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694296126) {}
[INFO ] 2020-02-03T01:44:56,128Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:56,133Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694296126) {}
[INFO ] 2020-02-03T01:44:56,136Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:56,139Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694296126) {}
[INFO ] 2020-02-03T01:44:56,143Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:56,171Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:56,174Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694296126) {}
[INFO ] 2020-02-03T01:44:56,176Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694295176) {}
[INFO ] 2020-02-03T01:44:56,177Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:56,181Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694296126) {}
[INFO ] 2020-02-03T01:44:56,182Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:56,187Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694295652) {}
[INFO ] 2020-02-03T01:44:56,188Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:56,193Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694296126) {}
[INFO ] 2020-02-03T01:44:56,194Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:56,199Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694296126) {}
[INFO ] 2020-02-03T01:44:56,200Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:56,200Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694296126) {}
[INFO ] 2020-02-03T01:44:56,200Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:56,764Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=807bf43f-66a4-484e-a3c6-208689c9e2f7, invocation_id=99d7a906-8356-445a-9f93-406213b435a2, invocation_timestamp=2020-02-03T01:44:56.202Z, origin=Only For Testing, session_id=99d7a906-8356-445a-9f93-406213b435a2, session_timestamp=2020-02-03T01:44:56.202Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[INFO ] 2020-02-03T01:44:56,764Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=807bf43f-66a4-484e-a3c6-208689c9e2f7, invocation_id=99d7a906-8356-445a-9f93-406213b435a2, invocation_timestamp=2020-02-03T01:44:56.202Z, origin=Only For Testing, session_id=99d7a906-8356-445a-9f93-406213b435a2, session_timestamp=2020-02-03T01:44:56.202Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[INFO ] 2020-02-03T01:44:56,774Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=807bf43f-66a4-484e-a3c6-208689c9e2f7, invocation_id=99d7a906-8356-445a-9f93-406213b435a2, invocation_timestamp=2020-02-03T01:44:56.202Z, origin=Only For Testing, session_id=99d7a906-8356-445a-9f93-406213b435a2, session_timestamp=2020-02-03T01:44:56.202Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[INFO ] 2020-02-03T01:44:56,796Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[WARN ] 2020-02-03T01:44:56,796Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[INFO ] 2020-02-03T01:44:56,802Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[INFO ] 2020-02-03T01:44:56,811Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=807bf43f-66a4-484e-a3c6-208689c9e2f7, invocation_id=99d7a906-8356-445a-9f93-406213b435a2, invocation_timestamp=2020-02-03T01:44:56.202Z, origin=Only For Testing, session_id=99d7a906-8356-445a-9f93-406213b435a2, session_timestamp=2020-02-03T01:44:56.202Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[INFO ] 2020-02-03T01:44:56,811Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=807bf43f-66a4-484e-a3c6-208689c9e2f7, invocation_id=99d7a906-8356-445a-9f93-406213b435a2, invocation_timestamp=2020-02-03T01:44:56.202Z, origin=Only For Testing, session_id=99d7a906-8356-445a-9f93-406213b435a2, session_timestamp=2020-02-03T01:44:56.202Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[INFO ] 2020-02-03T01:44:56,815Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:56,816Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Invocation, sessionId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5711453247857418000)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), frozenFiber=8ACDDB297DF36ED4E42DD32158F58B7C7CEE40347DC457D820EE32E48C4D1FE6), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@1c3e20fc, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685084f7], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=d7a85c03-40c9-4d2c-b60b-405316be9996) {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[INFO ] 2020-02-03T01:44:56,816Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] has error [0] {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:56,816Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] error allowed to propagate {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[WARN ] 2020-02-03T01:44:56,819Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] errored, dumping all transitions:

 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.792Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Invocation, sessionId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=1F60A090FFFC5A658D42FBEDDFD14992DB839A3144892867A5FBFBBE8B07690A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6b57feea])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6b57feea])
    SignalFlowHasStarted(flowId=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2854905779329445743), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5711453247857418000), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2854905779329445743-1075480481726543992-0-0), senderUUID=d7a85c03-40c9-4d2c-b60b-405316be9996))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5711453247857418000): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2854905779329445743)), errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6b57feea]
    []


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.792Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.793Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.794Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), maySkipCheckpoint=false, fiber=1688BF78D6943218C3574FD99FE53C08FDBA788C2A1E63B32526755719EA1520, )
  Actions: 
    PersistCheckpoint(id=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Invocation, sessionId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5711453247857418000)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2854905779329445743)), errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), frozenFiber=1688BF78D6943218C3574FD99FE53C08FDBA788C2A1E63B32526755719EA1520), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=1F60A090FFFC5A658D42FBEDDFD14992DB839A3144892867A5FBFBBE8B07690A)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), frozenFiber=1688BF78D6943218C3574FD99FE53C08FDBA788C2A1E63B32526755719EA1520)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.795Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5711453247857418000).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.796Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.800Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=FEF37228664588A8D1EF7C3C059A2D816DD60711E977277E5D1483BD350F2CD5, )
  Actions: 
    PersistCheckpoint(id=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Invocation, sessionId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5711453247857418000)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2854905779329445743)), errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=FEF37228664588A8D1EF7C3C059A2D816DD60711E977277E5D1483BD350F2CD5), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    1688BF78D6943218C3574FD99FE53C08FDBA788C2A1E63B32526755719EA1520
    FEF37228664588A8D1EF7C3C059A2D816DD60711E977277E5D1483BD350F2CD5
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.802Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2854905779329445743), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2854905779329445743-1075480481726543992-2-0), senderUUID=d7a85c03-40c9-4d2c-b60b-405316be9996))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.802Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.805Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.807Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), maySkipCheckpoint=false, fiber=8ACDDB297DF36ED4E42DD32158F58B7C7CEE40347DC457D820EE32E48C4D1FE6, )
  Actions: 
    PersistCheckpoint(id=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Invocation, sessionId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5711453247857418000)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2854905779329445743)), errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), frozenFiber=8ACDDB297DF36ED4E42DD32158F58B7C7CEE40347DC457D820EE32E48C4D1FE6), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))])
checkpoint.flowState.frozenFiber.hash: 
    FEF37228664588A8D1EF7C3C059A2D816DD60711E977277E5D1483BD350F2CD5
    8ACDDB297DF36ED4E42DD32158F58B7C7CEE40347DC457D820EE32E48C4D1FE6
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.807Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.815Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5711453247857418000), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685084f7, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-5711453247857418000).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2854905779329445743))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685084f7]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.815Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.815Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.816Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6192906942081076462, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.816Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.817Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[WARN ] 2020-02-03T01:44:56,819Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:44:56,819Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[WARN ] 2020-02-03T01:44:56,827Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] errored, dumping all transitions:

 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.792Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Invocation, sessionId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=1F60A090FFFC5A658D42FBEDDFD14992DB839A3144892867A5FBFBBE8B07690A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6b57feea])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6b57feea])
    SignalFlowHasStarted(flowId=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2854905779329445743), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5711453247857418000), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2854905779329445743-1075480481726543992-0-0), senderUUID=d7a85c03-40c9-4d2c-b60b-405316be9996))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5711453247857418000): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2854905779329445743)), errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6b57feea]
    []


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.792Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.793Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.794Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), maySkipCheckpoint=false, fiber=1688BF78D6943218C3574FD99FE53C08FDBA788C2A1E63B32526755719EA1520, )
  Actions: 
    PersistCheckpoint(id=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Invocation, sessionId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5711453247857418000)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2854905779329445743)), errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), frozenFiber=1688BF78D6943218C3574FD99FE53C08FDBA788C2A1E63B32526755719EA1520), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=1F60A090FFFC5A658D42FBEDDFD14992DB839A3144892867A5FBFBBE8B07690A)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), frozenFiber=1688BF78D6943218C3574FD99FE53C08FDBA788C2A1E63B32526755719EA1520)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.795Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5711453247857418000).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.796Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.800Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=FEF37228664588A8D1EF7C3C059A2D816DD60711E977277E5D1483BD350F2CD5, )
  Actions: 
    PersistCheckpoint(id=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Invocation, sessionId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5711453247857418000)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2854905779329445743)), errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=FEF37228664588A8D1EF7C3C059A2D816DD60711E977277E5D1483BD350F2CD5), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    1688BF78D6943218C3574FD99FE53C08FDBA788C2A1E63B32526755719EA1520
    FEF37228664588A8D1EF7C3C059A2D816DD60711E977277E5D1483BD350F2CD5
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.802Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2854905779329445743), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2854905779329445743-1075480481726543992-2-0), senderUUID=d7a85c03-40c9-4d2c-b60b-405316be9996))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.802Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.805Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.807Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), maySkipCheckpoint=false, fiber=8ACDDB297DF36ED4E42DD32158F58B7C7CEE40347DC457D820EE32E48C4D1FE6, )
  Actions: 
    PersistCheckpoint(id=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Invocation, sessionId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5711453247857418000)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2854905779329445743)), errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), frozenFiber=8ACDDB297DF36ED4E42DD32158F58B7C7CEE40347DC457D820EE32E48C4D1FE6), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))])
checkpoint.flowState.frozenFiber.hash: 
    FEF37228664588A8D1EF7C3C059A2D816DD60711E977277E5D1483BD350F2CD5
    8ACDDB297DF36ED4E42DD32158F58B7C7CEE40347DC457D820EE32E48C4D1FE6
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.807Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.815Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5711453247857418000), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685084f7, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-5711453247857418000).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2854905779329445743))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685084f7]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.815Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.815Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.816Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6192906942081076462, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.816Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.817Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] ---
  Timestamp: 2020-02-03T01:44:56.825Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=6192906942081076462)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)], senderUUID=d7a85c03-40c9-4d2c-b60b-405316be9996)
    CreateTransaction
    RemoveCheckpoint(id=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685084f7])
    ReleaseSoftLocks(uuid=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685084f7])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-5711453247857418000)])
    RemoveFlow(flowId=[6154f9c0-4719-4b64-b3ef-8bbbaf3fd104], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=6192906942081076462, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Invocation, sessionId=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, timestamp: 2020-02-03T01:44:56.787Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5711453247857418000)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2854905779329445743-1075480481726543992)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5711453247857418000))]), frozenFiber=8ACDDB297DF36ED4E42DD32158F58B7C7CEE40347DC457D820EE32E48C4D1FE6), errorState=Errored(errors=[FlowError(errorId=6192906942081076462, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@1c3e20fc, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=d7a85c03-40c9-4d2c-b60b-405316be9996))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685084f7]
    []
isRemoved: 
    false
    true
 {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
[WARN ] 2020-02-03T01:44:56,827Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6154f9c0-4719-4b64-b3ef-8bbbaf3fd104] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000010, flow-id=6154f9c0-4719-4b64-b3ef-8bbbaf3fd104, invocation_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, invocation_timestamp=2020-02-03T01:44:56.787Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4146ffc0-fc4a-4d74-8b08-e1eb909b88d5, session_timestamp=2020-02-03T01:44:56.787Z, thread-id=462, tx_id=96EC07C40742490F77F6371EA99FDAE9EA0BCD2A9D5900EDB52BDE7C33AD1C8C}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5711453247857418000) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:56,886Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014456.851/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:44:56,886Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014456.851/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:56,886Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014456.851/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:56,910Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:56,914Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:56,916Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:56,917Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:56,917Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:56,921Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:56.851Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:57,161Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:57,162Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014456.851/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:57,162Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:57,162Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:57,164Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:57,164Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:57,205Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:57,210Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:57,224Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:57,229Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:57,229Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:57,285Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:44:57,288Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:57,288Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694297288) {}
[INFO ] 2020-02-03T01:44:57,289Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:57,296Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694297288) {}
[INFO ] 2020-02-03T01:44:57,302Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:57,305Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694297288) {}
[INFO ] 2020-02-03T01:44:57,312Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:57,339Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:57,340Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:44:57,340Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:44:57,348Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694297288) {}
[INFO ] 2020-02-03T01:44:57,351Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694297288) {}
[INFO ] 2020-02-03T01:44:57,351Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:57,351Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694297288) {}
[INFO ] 2020-02-03T01:44:57,351Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:57,352Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014456.851/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:44:57,352Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014456.851/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:57,352Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014456.851/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:57,368Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:57,371Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:57,383Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:57,383Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:57,383Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:57,385Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:56.851Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:57,626Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:57,626Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014456.851/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:57,627Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:57,627Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:57,628Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:57,629Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:57,667Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:57,672Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:57,673Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:57,673Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:57,681Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:57,682Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:57,736Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:57,738Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:57,738Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694297738) {}
[INFO ] 2020-02-03T01:44:57,740Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:57,743Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694297738) {}
[INFO ] 2020-02-03T01:44:57,746Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:57,756Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694297738) {}
[INFO ] 2020-02-03T01:44:57,763Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:57,775Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:57,779Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694297738) {}
[INFO ] 2020-02-03T01:44:57,783Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694297288) {}
[INFO ] 2020-02-03T01:44:57,784Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:57,789Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694297738) {}
[INFO ] 2020-02-03T01:44:57,789Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:57,794Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694297738) {}
[INFO ] 2020-02-03T01:44:57,795Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:57,795Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694297738) {}
[INFO ] 2020-02-03T01:44:57,795Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:57,796Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014456.851/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:44:57,796Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014456.851/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:44:57,796Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014456.851/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:44:57,810Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:44:57,816Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:44:57,827Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:57,827Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:57,827Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:44:57,829Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:44:56.851Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:44:58,035Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:44:58,036Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014456.851/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:44:58,036Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:44:58,037Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:44:58,038Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:58,038Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:58,077Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:44:58,082Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:44:58,084Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:44:58,084Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:44:58,092Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:58,092Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:58,145Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:44:58,148Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:44:58,148Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694298148) {}
[INFO ] 2020-02-03T01:44:58,150Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:58,153Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694298148) {}
[INFO ] 2020-02-03T01:44:58,156Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:44:58,159Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694298148) {}
[INFO ] 2020-02-03T01:44:58,165Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:58,186Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3 uploader=app filename=null {}
[INFO ] 2020-02-03T01:44:58,190Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694298148) {}
[INFO ] 2020-02-03T01:44:58,193Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694297288) {}
[INFO ] 2020-02-03T01:44:58,194Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:58,199Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694298148) {}
[INFO ] 2020-02-03T01:44:58,199Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:58,204Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694297738) {}
[INFO ] 2020-02-03T01:44:58,205Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:58,209Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694298148) {}
[INFO ] 2020-02-03T01:44:58,210Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:44:58,214Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694298148) {}
[INFO ] 2020-02-03T01:44:58,214Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:58,214Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694298148) {}
[INFO ] 2020-02-03T01:44:58,214Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:44:58,783Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=3137e14c-4d7b-474e-b5aa-afa0234c923d, invocation_id=cb469beb-a52e-4d6a-83c0-32697244ef15, invocation_timestamp=2020-02-03T01:44:58.215Z, origin=Only For Testing, session_id=cb469beb-a52e-4d6a-83c0-32697244ef15, session_timestamp=2020-02-03T01:44:58.215Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[INFO ] 2020-02-03T01:44:58,784Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=3137e14c-4d7b-474e-b5aa-afa0234c923d, invocation_id=cb469beb-a52e-4d6a-83c0-32697244ef15, invocation_timestamp=2020-02-03T01:44:58.215Z, origin=Only For Testing, session_id=cb469beb-a52e-4d6a-83c0-32697244ef15, session_timestamp=2020-02-03T01:44:58.215Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[INFO ] 2020-02-03T01:44:58,792Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=3137e14c-4d7b-474e-b5aa-afa0234c923d, invocation_id=cb469beb-a52e-4d6a-83c0-32697244ef15, invocation_timestamp=2020-02-03T01:44:58.215Z, origin=Only For Testing, session_id=cb469beb-a52e-4d6a-83c0-32697244ef15, session_timestamp=2020-02-03T01:44:58.215Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[INFO ] 2020-02-03T01:44:58,814Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[WARN ] 2020-02-03T01:44:58,815Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[INFO ] 2020-02-03T01:44:58,821Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[INFO ] 2020-02-03T01:44:58,830Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=3137e14c-4d7b-474e-b5aa-afa0234c923d, invocation_id=cb469beb-a52e-4d6a-83c0-32697244ef15, invocation_timestamp=2020-02-03T01:44:58.215Z, origin=Only For Testing, session_id=cb469beb-a52e-4d6a-83c0-32697244ef15, session_timestamp=2020-02-03T01:44:58.215Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[INFO ] 2020-02-03T01:44:58,830Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=3137e14c-4d7b-474e-b5aa-afa0234c923d, invocation_id=cb469beb-a52e-4d6a-83c0-32697244ef15, invocation_timestamp=2020-02-03T01:44:58.215Z, origin=Only For Testing, session_id=cb469beb-a52e-4d6a-83c0-32697244ef15, session_timestamp=2020-02-03T01:44:58.215Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[INFO ] 2020-02-03T01:44:58,834Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:58,835Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Invocation, sessionId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8071846671401046352)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), frozenFiber=6E314C86CEBA84CEAAFC6B59411137B97B17A69694EA2E68A11A33F4D75B71E9), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@6615465e, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@261dd67a], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=14ad8d0d-0691-4364-829e-d65e1f7adb35) {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[INFO ] 2020-02-03T01:44:58,835Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] has error [0] {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:44:58,835Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] error allowed to propagate {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[WARN ] 2020-02-03T01:44:58,836Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] errored, dumping all transitions:

 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.811Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[8f8a6d37-547b-42a4-8886-4017e0bcad7b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Invocation, sessionId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=92B3E5C154BF8A0A155900EA286B6791BD1203DF5A063CCEF7CEB532BF56B918), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22e6510b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22e6510b])
    SignalFlowHasStarted(flowId=[8f8a6d37-547b-42a4-8886-4017e0bcad7b])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4083067643096857809), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8071846671401046352), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4083067643096857809--376824785772422873-0-0), senderUUID=14ad8d0d-0691-4364-829e-d65e1f7adb35))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8071846671401046352): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4083067643096857809)), errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22e6510b]
    []


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.811Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.811Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.813Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), maySkipCheckpoint=false, fiber=C1E73D64A633F2E76E89ABD8620C5B4ED4BA93F2A2A84B5046025011EDE5D15E, )
  Actions: 
    PersistCheckpoint(id=[8f8a6d37-547b-42a4-8886-4017e0bcad7b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Invocation, sessionId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8071846671401046352)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4083067643096857809)), errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), frozenFiber=C1E73D64A633F2E76E89ABD8620C5B4ED4BA93F2A2A84B5046025011EDE5D15E), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=92B3E5C154BF8A0A155900EA286B6791BD1203DF5A063CCEF7CEB532BF56B918)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), frozenFiber=C1E73D64A633F2E76E89ABD8620C5B4ED4BA93F2A2A84B5046025011EDE5D15E)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.813Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8071846671401046352).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.816Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.820Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=8A80B084953FD016B0538751AEFFC863219E0DE993179FF1809EA5A427D22459, )
  Actions: 
    PersistCheckpoint(id=[8f8a6d37-547b-42a4-8886-4017e0bcad7b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Invocation, sessionId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8071846671401046352)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4083067643096857809)), errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=8A80B084953FD016B0538751AEFFC863219E0DE993179FF1809EA5A427D22459), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    C1E73D64A633F2E76E89ABD8620C5B4ED4BA93F2A2A84B5046025011EDE5D15E
    8A80B084953FD016B0538751AEFFC863219E0DE993179FF1809EA5A427D22459
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.821Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4083067643096857809), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4083067643096857809--376824785772422873-2-0), senderUUID=14ad8d0d-0691-4364-829e-d65e1f7adb35))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.821Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.824Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.826Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), maySkipCheckpoint=false, fiber=6E314C86CEBA84CEAAFC6B59411137B97B17A69694EA2E68A11A33F4D75B71E9, )
  Actions: 
    PersistCheckpoint(id=[8f8a6d37-547b-42a4-8886-4017e0bcad7b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Invocation, sessionId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8071846671401046352)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4083067643096857809)), errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), frozenFiber=6E314C86CEBA84CEAAFC6B59411137B97B17A69694EA2E68A11A33F4D75B71E9), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))])
checkpoint.flowState.frozenFiber.hash: 
    8A80B084953FD016B0538751AEFFC863219E0DE993179FF1809EA5A427D22459
    6E314C86CEBA84CEAAFC6B59411137B97B17A69694EA2E68A11A33F4D75B71E9
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.826Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.834Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8071846671401046352), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@261dd67a, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8071846671401046352).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=4083067643096857809))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@261dd67a]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.834Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.834Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.835Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5197758639738046520, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.835Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.835Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[WARN ] 2020-02-03T01:44:58,837Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-03T01:44:58,837Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[WARN ] 2020-02-03T01:44:58,844Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] errored, dumping all transitions:

 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.811Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[8f8a6d37-547b-42a4-8886-4017e0bcad7b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Invocation, sessionId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=92B3E5C154BF8A0A155900EA286B6791BD1203DF5A063CCEF7CEB532BF56B918), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22e6510b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22e6510b])
    SignalFlowHasStarted(flowId=[8f8a6d37-547b-42a4-8886-4017e0bcad7b])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4083067643096857809), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8071846671401046352), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4083067643096857809--376824785772422873-0-0), senderUUID=14ad8d0d-0691-4364-829e-d65e1f7adb35))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8071846671401046352): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4083067643096857809)), errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22e6510b]
    []


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.811Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.811Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.813Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), maySkipCheckpoint=false, fiber=C1E73D64A633F2E76E89ABD8620C5B4ED4BA93F2A2A84B5046025011EDE5D15E, )
  Actions: 
    PersistCheckpoint(id=[8f8a6d37-547b-42a4-8886-4017e0bcad7b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Invocation, sessionId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8071846671401046352)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4083067643096857809)), errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), frozenFiber=C1E73D64A633F2E76E89ABD8620C5B4ED4BA93F2A2A84B5046025011EDE5D15E), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=92B3E5C154BF8A0A155900EA286B6791BD1203DF5A063CCEF7CEB532BF56B918)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), frozenFiber=C1E73D64A633F2E76E89ABD8620C5B4ED4BA93F2A2A84B5046025011EDE5D15E)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.813Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8071846671401046352).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.816Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.820Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=8A80B084953FD016B0538751AEFFC863219E0DE993179FF1809EA5A427D22459, )
  Actions: 
    PersistCheckpoint(id=[8f8a6d37-547b-42a4-8886-4017e0bcad7b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Invocation, sessionId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8071846671401046352)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4083067643096857809)), errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=8A80B084953FD016B0538751AEFFC863219E0DE993179FF1809EA5A427D22459), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    C1E73D64A633F2E76E89ABD8620C5B4ED4BA93F2A2A84B5046025011EDE5D15E
    8A80B084953FD016B0538751AEFFC863219E0DE993179FF1809EA5A427D22459
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.821Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4083067643096857809), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4083067643096857809--376824785772422873-2-0), senderUUID=14ad8d0d-0691-4364-829e-d65e1f7adb35))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.821Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.824Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.826Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), maySkipCheckpoint=false, fiber=6E314C86CEBA84CEAAFC6B59411137B97B17A69694EA2E68A11A33F4D75B71E9, )
  Actions: 
    PersistCheckpoint(id=[8f8a6d37-547b-42a4-8886-4017e0bcad7b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Invocation, sessionId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8071846671401046352)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4083067643096857809)), errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), frozenFiber=6E314C86CEBA84CEAAFC6B59411137B97B17A69694EA2E68A11A33F4D75B71E9), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))])
checkpoint.flowState.frozenFiber.hash: 
    8A80B084953FD016B0538751AEFFC863219E0DE993179FF1809EA5A427D22459
    6E314C86CEBA84CEAAFC6B59411137B97B17A69694EA2E68A11A33F4D75B71E9
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.826Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.834Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8071846671401046352), payload=net.corda.node.services.statemachine.EndSessionMessage@38ec1efa), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@261dd67a, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8071846671401046352).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=4083067643096857809))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@261dd67a]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.834Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.834Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)]


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.835Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5197758639738046520, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.835Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.835Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] ---
  Timestamp: 2020-02-03T01:44:58.842Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=5197758639738046520)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)], senderUUID=14ad8d0d-0691-4364-829e-d65e1f7adb35)
    CreateTransaction
    RemoveCheckpoint(id=[8f8a6d37-547b-42a4-8886-4017e0bcad7b])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@261dd67a])
    ReleaseSoftLocks(uuid=8f8a6d37-547b-42a4-8886-4017e0bcad7b)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@261dd67a])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8071846671401046352)])
    RemoveFlow(flowId=[8f8a6d37-547b-42a4-8886-4017e0bcad7b], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=5197758639738046520, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Invocation, sessionId=91154358-b73c-49f7-b50f-9fe01a10261e, timestamp: 2020-02-03T01:44:58.805Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8071846671401046352)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4083067643096857809--376824785772422873)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=Corda-Bootcamp, corDappHash=4500A139BD4B262587A4697535FD7F3AE941BFF1758CC2A9DD3AFA76BFC92CE3), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8071846671401046352))]), frozenFiber=6E314C86CEBA84CEAAFC6B59411137B97B17A69694EA2E68A11A33F4D75B71E9), errorState=Errored(errors=[FlowError(errorId=5197758639738046520, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@6615465e, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=14ad8d0d-0691-4364-829e-d65e1f7adb35))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@261dd67a]
    []
isRemoved: 
    false
    true
 {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
[WARN ] 2020-02-03T01:44:58,845Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [8f8a6d37-547b-42a4-8886-4017e0bcad7b] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000012, flow-id=8f8a6d37-547b-42a4-8886-4017e0bcad7b, invocation_id=91154358-b73c-49f7-b50f-9fe01a10261e, invocation_timestamp=2020-02-03T01:44:58.805Z, origin=O=Mock Company 1, L=London, C=GB, session_id=91154358-b73c-49f7-b50f-9fe01a10261e, session_timestamp=2020-02-03T01:44:58.805Z, thread-id=551, tx_id=4B1260C35914105C354F70B017B9AF8595D01F72D3465D019EB2A31857F9E2E1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8071846671401046352) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_242]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-03T01:46:48,842Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T01:46:51,950Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014644.051/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:46:51,953Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014644.051/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:46:51,973Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014644.051/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:46:52,061Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:46:52,555Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:46:52,609Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:46:52,609Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:46:52,610Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:46:52,719Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:46:43.895Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:46:56,294Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:46:56,303Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014644.051/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:46:56,303Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:46:56,304Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:46:56,358Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:46:56,362Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:46:57,964Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:46:58,485Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:46:58,532Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:46:58,546Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:46:58,546Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:46:58,760Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:46:58,770Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:46:58,770Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694418770) {}
[INFO ] 2020-02-03T01:46:58,775Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:46:58,897Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694418770) {}
[INFO ] 2020-02-03T01:46:58,968Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:46:59,007Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694418770) {}
[INFO ] 2020-02-03T01:46:59,052Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:46:59,087Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:46:59,091Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:46:59,093Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:46:59,404Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694418770) {}
[INFO ] 2020-02-03T01:46:59,418Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694418770) {}
[INFO ] 2020-02-03T01:46:59,419Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:46:59,419Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694418770) {}
[INFO ] 2020-02-03T01:46:59,419Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:46:59,422Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014644.051/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:46:59,422Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014644.051/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:46:59,422Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014644.051/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:46:59,444Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:46:59,455Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:46:59,477Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:46:59,477Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:46:59,477Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:46:59,480Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:46:43.895Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:46:59,896Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:46:59,898Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014644.051/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:46:59,898Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:46:59,900Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:46:59,901Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:46:59,902Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:46:59,972Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:46:59,981Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:46:59,982Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:46:59,983Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:46:59,998Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:46:59,998Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:00,123Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:00,127Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:00,127Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694420127) {}
[INFO ] 2020-02-03T01:47:00,129Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:00,135Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694420127) {}
[INFO ] 2020-02-03T01:47:00,145Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:00,155Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694420127) {}
[INFO ] 2020-02-03T01:47:00,171Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:00,195Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:00,201Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694420127) {}
[INFO ] 2020-02-03T01:47:00,207Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694418770) {}
[INFO ] 2020-02-03T01:47:00,208Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:00,219Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694420127) {}
[INFO ] 2020-02-03T01:47:00,221Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:00,229Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694420127) {}
[INFO ] 2020-02-03T01:47:00,229Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:00,229Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694420127) {}
[INFO ] 2020-02-03T01:47:00,229Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:00,231Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014644.051/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:47:00,231Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014644.051/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:00,231Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014644.051/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:00,259Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:00,277Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:00,348Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:00,348Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:00,348Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:00,353Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:46:43.895Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:00,677Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:00,679Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014644.051/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:00,679Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:00,680Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:00,681Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:00,681Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:00,766Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:00,773Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:00,775Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:00,776Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:00,788Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:00,788Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:00,886Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:00,889Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:00,889Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694420889) {}
[INFO ] 2020-02-03T01:47:00,891Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:00,897Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694420889) {}
[INFO ] 2020-02-03T01:47:00,903Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:00,911Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694420889) {}
[INFO ] 2020-02-03T01:47:00,924Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:00,959Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:00,966Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694420889) {}
[INFO ] 2020-02-03T01:47:00,968Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694418770) {}
[INFO ] 2020-02-03T01:47:00,969Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:00,993Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694420889) {}
[INFO ] 2020-02-03T01:47:00,999Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:01,018Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694420127) {}
[INFO ] 2020-02-03T01:47:01,020Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:01,031Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694420889) {}
[INFO ] 2020-02-03T01:47:01,034Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:01,045Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694420889) {}
[INFO ] 2020-02-03T01:47:01,046Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:01,047Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694420889) {}
[INFO ] 2020-02-03T01:47:01,047Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:47:01,254Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec2166be-59de-4203-a4d9-3ec1132bb50b, invocation_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, invocation_timestamp=2020-02-03T01:47:01.074Z, origin=Only For Testing, session_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, session_timestamp=2020-02-03T01:47:01.074Z, thread-id=102}
[WARN ] 2020-02-03T01:47:01,254Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec2166be-59de-4203-a4d9-3ec1132bb50b, invocation_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, invocation_timestamp=2020-02-03T01:47:01.074Z, origin=Only For Testing, session_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, session_timestamp=2020-02-03T01:47:01.074Z, thread-id=102}
[WARN ] 2020-02-03T01:47:02,481Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec2166be-59de-4203-a4d9-3ec1132bb50b, invocation_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, invocation_timestamp=2020-02-03T01:47:01.074Z, origin=Only For Testing, session_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, session_timestamp=2020-02-03T01:47:01.074Z, thread-id=102}
[INFO ] 2020-02-03T01:47:02,655Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=2b67c718-e763-4b4e-a555-dbb4bf11d410, invocation_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, invocation_timestamp=2020-02-03T01:47:02.597Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, session_timestamp=2020-02-03T01:47:02.597Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[WARN ] 2020-02-03T01:47:02,663Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=2b67c718-e763-4b4e-a555-dbb4bf11d410, invocation_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, invocation_timestamp=2020-02-03T01:47:02.597Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, session_timestamp=2020-02-03T01:47:02.597Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,689Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=2b67c718-e763-4b4e-a555-dbb4bf11d410, invocation_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, invocation_timestamp=2020-02-03T01:47:02.597Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, session_timestamp=2020-02-03T01:47:02.597Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[WARN ] 2020-02-03T01:47:02,732Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=2b67c718-e763-4b4e-a555-dbb4bf11d410, invocation_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, invocation_timestamp=2020-02-03T01:47:02.597Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, session_timestamp=2020-02-03T01:47:02.597Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,752Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec2166be-59de-4203-a4d9-3ec1132bb50b, invocation_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, invocation_timestamp=2020-02-03T01:47:01.074Z, origin=Only For Testing, session_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, session_timestamp=2020-02-03T01:47:01.074Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,753Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec2166be-59de-4203-a4d9-3ec1132bb50b, invocation_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, invocation_timestamp=2020-02-03T01:47:01.074Z, origin=Only For Testing, session_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, session_timestamp=2020-02-03T01:47:01.074Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,781Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec2166be-59de-4203-a4d9-3ec1132bb50b, invocation_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, invocation_timestamp=2020-02-03T01:47:01.074Z, origin=Only For Testing, session_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, session_timestamp=2020-02-03T01:47:01.074Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,798Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=2b67c718-e763-4b4e-a555-dbb4bf11d410, invocation_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, invocation_timestamp=2020-02-03T01:47:02.597Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, session_timestamp=2020-02-03T01:47:02.597Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[WARN ] 2020-02-03T01:47:02,798Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=2b67c718-e763-4b4e-a555-dbb4bf11d410, invocation_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, invocation_timestamp=2020-02-03T01:47:02.597Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, session_timestamp=2020-02-03T01:47:02.597Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,802Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=2b67c718-e763-4b4e-a555-dbb4bf11d410, invocation_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, invocation_timestamp=2020-02-03T01:47:02.597Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, session_timestamp=2020-02-03T01:47:02.597Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,807Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=2b67c718-e763-4b4e-a555-dbb4bf11d410, invocation_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, invocation_timestamp=2020-02-03T01:47:02.597Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, session_timestamp=2020-02-03T01:47:02.597Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,811Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=2b67c718-e763-4b4e-a555-dbb4bf11d410, invocation_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, invocation_timestamp=2020-02-03T01:47:02.597Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3aca7da0-b1a3-43a5-80e9-0e5fa979cbe2, session_timestamp=2020-02-03T01:47:02.597Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,836Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec2166be-59de-4203-a4d9-3ec1132bb50b, invocation_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, invocation_timestamp=2020-02-03T01:47:01.074Z, origin=Only For Testing, session_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, session_timestamp=2020-02-03T01:47:01.074Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,836Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec2166be-59de-4203-a4d9-3ec1132bb50b, invocation_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, invocation_timestamp=2020-02-03T01:47:01.074Z, origin=Only For Testing, session_id=dbac6325-5de5-47b5-b092-cdc5bac6d55a, session_timestamp=2020-02-03T01:47:01.074Z, thread-id=102, tx_id=1EA1902C70100DB186010B6EB4E296042A563A3E4B05D1DF8BDDCB8B7280E406}
[INFO ] 2020-02-03T01:47:02,930Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014702.869/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:47:02,932Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014702.869/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:02,932Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014702.869/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:02,952Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:02,956Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:02,958Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:02,959Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:02,959Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:02,963Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:02.869Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:03,265Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:03,266Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014702.869/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:03,266Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:03,267Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:03,269Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:03,269Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:03,325Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:03,332Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:03,352Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:03,357Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:03,358Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:03,449Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:03,453Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:03,453Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694423453) {}
[INFO ] 2020-02-03T01:47:03,455Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:03,468Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694423453) {}
[INFO ] 2020-02-03T01:47:03,475Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:03,490Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694423453) {}
[INFO ] 2020-02-03T01:47:03,496Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:03,521Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:03,522Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:47:03,522Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:47:03,527Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694423453) {}
[INFO ] 2020-02-03T01:47:03,532Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694423453) {}
[INFO ] 2020-02-03T01:47:03,532Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:03,532Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694423453) {}
[INFO ] 2020-02-03T01:47:03,532Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:03,535Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014702.869/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:47:03,535Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014702.869/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:03,535Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014702.869/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:03,567Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:03,573Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:03,590Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:03,590Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:03,590Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:03,592Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:02.869Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:03,870Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:03,872Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014702.869/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:03,872Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:03,872Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:03,874Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:03,874Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:03,929Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:03,937Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:03,941Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:03,942Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:03,954Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:03,954Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:04,040Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:04,045Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:04,045Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694424045) {}
[INFO ] 2020-02-03T01:47:04,047Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:04,053Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694424045) {}
[INFO ] 2020-02-03T01:47:04,060Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:04,071Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694424045) {}
[INFO ] 2020-02-03T01:47:04,089Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:04,108Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:04,114Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694424045) {}
[INFO ] 2020-02-03T01:47:04,117Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694423453) {}
[INFO ] 2020-02-03T01:47:04,118Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:04,125Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694424045) {}
[INFO ] 2020-02-03T01:47:04,126Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:04,133Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694424045) {}
[INFO ] 2020-02-03T01:47:04,133Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:04,133Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694424045) {}
[INFO ] 2020-02-03T01:47:04,133Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:04,135Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014702.869/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:47:04,135Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014702.869/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:04,135Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014702.869/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:04,151Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:04,156Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:04,173Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:04,173Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:04,174Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:04,177Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:02.869Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:04,445Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:04,446Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014702.869/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:04,446Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:04,447Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:04,448Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:04,449Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:04,503Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:04,511Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:04,513Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:04,513Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:04,523Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:04,523Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:04,605Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:04,609Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:04,609Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694424609) {}
[INFO ] 2020-02-03T01:47:04,611Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:04,616Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694424609) {}
[INFO ] 2020-02-03T01:47:04,621Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:04,629Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694424609) {}
[INFO ] 2020-02-03T01:47:04,653Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:04,678Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:04,683Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694424609) {}
[INFO ] 2020-02-03T01:47:04,686Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694423453) {}
[INFO ] 2020-02-03T01:47:04,687Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:04,694Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694424609) {}
[INFO ] 2020-02-03T01:47:04,696Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:04,703Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694424045) {}
[INFO ] 2020-02-03T01:47:04,705Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:04,714Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694424609) {}
[INFO ] 2020-02-03T01:47:04,715Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:04,722Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694424609) {}
[INFO ] 2020-02-03T01:47:04,723Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:04,723Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694424609) {}
[INFO ] 2020-02-03T01:47:04,723Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:47:05,466Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=f7e31d00-2c5e-4717-8091-4cdb20a8b3f0, invocation_id=26e3c637-6a06-4daa-84d3-6d76163c1774, invocation_timestamp=2020-02-03T01:47:04.726Z, origin=Only For Testing, session_id=26e3c637-6a06-4daa-84d3-6d76163c1774, session_timestamp=2020-02-03T01:47:04.726Z, thread-id=195}
[INFO ] 2020-02-03T01:47:05,497Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=b946f398-3f3f-4458-8784-648d8a98f609, invocation_id=32954fac-560f-4b25-ac1a-df97847c197b, invocation_timestamp=2020-02-03T01:47:05.483Z, origin=O=Mock Company 1, L=London, C=GB, session_id=32954fac-560f-4b25-ac1a-df97847c197b, session_timestamp=2020-02-03T01:47:05.483Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[WARN ] 2020-02-03T01:47:05,497Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=b946f398-3f3f-4458-8784-648d8a98f609, invocation_id=32954fac-560f-4b25-ac1a-df97847c197b, invocation_timestamp=2020-02-03T01:47:05.483Z, origin=O=Mock Company 1, L=London, C=GB, session_id=32954fac-560f-4b25-ac1a-df97847c197b, session_timestamp=2020-02-03T01:47:05.483Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,503Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=b946f398-3f3f-4458-8784-648d8a98f609, invocation_id=32954fac-560f-4b25-ac1a-df97847c197b, invocation_timestamp=2020-02-03T01:47:05.483Z, origin=O=Mock Company 1, L=London, C=GB, session_id=32954fac-560f-4b25-ac1a-df97847c197b, session_timestamp=2020-02-03T01:47:05.483Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[WARN ] 2020-02-03T01:47:05,533Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=b946f398-3f3f-4458-8784-648d8a98f609, invocation_id=32954fac-560f-4b25-ac1a-df97847c197b, invocation_timestamp=2020-02-03T01:47:05.483Z, origin=O=Mock Company 1, L=London, C=GB, session_id=32954fac-560f-4b25-ac1a-df97847c197b, session_timestamp=2020-02-03T01:47:05.483Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,544Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=f7e31d00-2c5e-4717-8091-4cdb20a8b3f0, invocation_id=26e3c637-6a06-4daa-84d3-6d76163c1774, invocation_timestamp=2020-02-03T01:47:04.726Z, origin=Only For Testing, session_id=26e3c637-6a06-4daa-84d3-6d76163c1774, session_timestamp=2020-02-03T01:47:04.726Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,545Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=f7e31d00-2c5e-4717-8091-4cdb20a8b3f0, invocation_id=26e3c637-6a06-4daa-84d3-6d76163c1774, invocation_timestamp=2020-02-03T01:47:04.726Z, origin=Only For Testing, session_id=26e3c637-6a06-4daa-84d3-6d76163c1774, session_timestamp=2020-02-03T01:47:04.726Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,555Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=f7e31d00-2c5e-4717-8091-4cdb20a8b3f0, invocation_id=26e3c637-6a06-4daa-84d3-6d76163c1774, invocation_timestamp=2020-02-03T01:47:04.726Z, origin=Only For Testing, session_id=26e3c637-6a06-4daa-84d3-6d76163c1774, session_timestamp=2020-02-03T01:47:04.726Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,562Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=b946f398-3f3f-4458-8784-648d8a98f609, invocation_id=32954fac-560f-4b25-ac1a-df97847c197b, invocation_timestamp=2020-02-03T01:47:05.483Z, origin=O=Mock Company 1, L=London, C=GB, session_id=32954fac-560f-4b25-ac1a-df97847c197b, session_timestamp=2020-02-03T01:47:05.483Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[WARN ] 2020-02-03T01:47:05,562Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=b946f398-3f3f-4458-8784-648d8a98f609, invocation_id=32954fac-560f-4b25-ac1a-df97847c197b, invocation_timestamp=2020-02-03T01:47:05.483Z, origin=O=Mock Company 1, L=London, C=GB, session_id=32954fac-560f-4b25-ac1a-df97847c197b, session_timestamp=2020-02-03T01:47:05.483Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,566Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=b946f398-3f3f-4458-8784-648d8a98f609, invocation_id=32954fac-560f-4b25-ac1a-df97847c197b, invocation_timestamp=2020-02-03T01:47:05.483Z, origin=O=Mock Company 1, L=London, C=GB, session_id=32954fac-560f-4b25-ac1a-df97847c197b, session_timestamp=2020-02-03T01:47:05.483Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,569Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000004, flow-id=b946f398-3f3f-4458-8784-648d8a98f609, invocation_id=32954fac-560f-4b25-ac1a-df97847c197b, invocation_timestamp=2020-02-03T01:47:05.483Z, origin=O=Mock Company 1, L=London, C=GB, session_id=32954fac-560f-4b25-ac1a-df97847c197b, session_timestamp=2020-02-03T01:47:05.483Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,573Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000004, flow-id=b946f398-3f3f-4458-8784-648d8a98f609, invocation_id=32954fac-560f-4b25-ac1a-df97847c197b, invocation_timestamp=2020-02-03T01:47:05.483Z, origin=O=Mock Company 1, L=London, C=GB, session_id=32954fac-560f-4b25-ac1a-df97847c197b, session_timestamp=2020-02-03T01:47:05.483Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,578Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=f7e31d00-2c5e-4717-8091-4cdb20a8b3f0, invocation_id=26e3c637-6a06-4daa-84d3-6d76163c1774, invocation_timestamp=2020-02-03T01:47:04.726Z, origin=Only For Testing, session_id=26e3c637-6a06-4daa-84d3-6d76163c1774, session_timestamp=2020-02-03T01:47:04.726Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,578Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=f7e31d00-2c5e-4717-8091-4cdb20a8b3f0, invocation_id=26e3c637-6a06-4daa-84d3-6d76163c1774, invocation_timestamp=2020-02-03T01:47:04.726Z, origin=Only For Testing, session_id=26e3c637-6a06-4daa-84d3-6d76163c1774, session_timestamp=2020-02-03T01:47:04.726Z, thread-id=195, tx_id=364EC73582F0E01BBB79182BEF52ACA2E4B063BF04E11BEFAA995C11A074C14B}
[INFO ] 2020-02-03T01:47:05,634Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014705.596/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:47:05,634Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014705.596/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:05,634Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014705.596/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:05,659Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:05,664Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:05,667Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:05,668Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:05,669Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:05,673Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:05.596Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:05,946Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:05,947Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014705.596/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:05,947Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:05,948Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:05,949Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:05,949Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:05,999Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:06,005Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:06,021Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:06,026Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:06,026Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:06,108Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:06,111Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:06,111Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694426111) {}
[INFO ] 2020-02-03T01:47:06,112Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:06,124Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694426111) {}
[INFO ] 2020-02-03T01:47:06,131Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:06,143Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694426111) {}
[INFO ] 2020-02-03T01:47:06,147Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:06,183Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:06,184Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:47:06,184Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:47:06,190Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694426111) {}
[INFO ] 2020-02-03T01:47:06,195Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694426111) {}
[INFO ] 2020-02-03T01:47:06,195Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:06,195Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694426111) {}
[INFO ] 2020-02-03T01:47:06,195Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:06,196Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014705.596/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:47:06,197Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014705.596/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:06,197Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014705.596/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:06,218Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:06,223Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:06,237Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:06,237Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:06,237Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:06,240Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:05.596Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:06,481Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:06,482Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014705.596/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:06,482Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:06,483Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:06,484Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:06,485Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:06,534Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:06,541Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:06,542Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:06,542Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:06,553Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:06,553Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:06,629Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:06,632Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:06,633Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694426633) {}
[INFO ] 2020-02-03T01:47:06,634Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:06,638Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694426633) {}
[INFO ] 2020-02-03T01:47:06,643Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:06,648Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694426633) {}
[INFO ] 2020-02-03T01:47:06,653Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:06,680Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:06,686Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694426633) {}
[INFO ] 2020-02-03T01:47:06,688Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694426111) {}
[INFO ] 2020-02-03T01:47:06,689Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:06,697Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694426633) {}
[INFO ] 2020-02-03T01:47:06,698Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:06,704Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694426633) {}
[INFO ] 2020-02-03T01:47:06,705Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:06,705Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694426633) {}
[INFO ] 2020-02-03T01:47:06,705Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:06,707Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014705.596/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:47:06,707Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014705.596/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:06,707Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014705.596/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:06,736Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:06,739Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:06,754Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:06,754Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:06,754Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:06,756Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:05.596Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:07,007Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:07,008Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014705.596/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:07,008Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:07,009Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:07,012Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:07,012Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:07,063Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:07,069Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:07,070Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:07,071Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:07,080Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:07,080Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:07,180Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:07,183Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:07,184Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694427183) {}
[INFO ] 2020-02-03T01:47:07,185Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:07,189Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694427183) {}
[INFO ] 2020-02-03T01:47:07,193Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:07,203Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694427183) {}
[INFO ] 2020-02-03T01:47:07,214Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:07,241Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:07,248Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694427183) {}
[INFO ] 2020-02-03T01:47:07,252Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694426111) {}
[INFO ] 2020-02-03T01:47:07,252Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:07,260Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694427183) {}
[INFO ] 2020-02-03T01:47:07,261Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:07,267Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694426633) {}
[INFO ] 2020-02-03T01:47:07,268Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:07,275Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694427183) {}
[INFO ] 2020-02-03T01:47:07,276Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:07,282Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694427183) {}
[INFO ] 2020-02-03T01:47:07,282Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:07,282Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694427183) {}
[INFO ] 2020-02-03T01:47:07,282Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:47:07,868Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=605bc8f4-cdce-49ca-a0e9-d1c0162461b6, invocation_id=e816cdd2-01f1-4923-9cac-291d065dc09b, invocation_timestamp=2020-02-03T01:47:07.286Z, origin=Only For Testing, session_id=e816cdd2-01f1-4923-9cac-291d065dc09b, session_timestamp=2020-02-03T01:47:07.286Z, thread-id=284}
[INFO ] 2020-02-03T01:47:07,893Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=10ca6b68-2727-440e-ae7d-06bbeeb4ebce, invocation_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, invocation_timestamp=2020-02-03T01:47:07.883Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, session_timestamp=2020-02-03T01:47:07.883Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[WARN ] 2020-02-03T01:47:07,893Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=10ca6b68-2727-440e-ae7d-06bbeeb4ebce, invocation_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, invocation_timestamp=2020-02-03T01:47:07.883Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, session_timestamp=2020-02-03T01:47:07.883Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:07,900Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=10ca6b68-2727-440e-ae7d-06bbeeb4ebce, invocation_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, invocation_timestamp=2020-02-03T01:47:07.883Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, session_timestamp=2020-02-03T01:47:07.883Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[WARN ] 2020-02-03T01:47:07,925Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=10ca6b68-2727-440e-ae7d-06bbeeb4ebce, invocation_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, invocation_timestamp=2020-02-03T01:47:07.883Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, session_timestamp=2020-02-03T01:47:07.883Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:07,935Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=605bc8f4-cdce-49ca-a0e9-d1c0162461b6, invocation_id=e816cdd2-01f1-4923-9cac-291d065dc09b, invocation_timestamp=2020-02-03T01:47:07.286Z, origin=Only For Testing, session_id=e816cdd2-01f1-4923-9cac-291d065dc09b, session_timestamp=2020-02-03T01:47:07.286Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:07,935Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=605bc8f4-cdce-49ca-a0e9-d1c0162461b6, invocation_id=e816cdd2-01f1-4923-9cac-291d065dc09b, invocation_timestamp=2020-02-03T01:47:07.286Z, origin=Only For Testing, session_id=e816cdd2-01f1-4923-9cac-291d065dc09b, session_timestamp=2020-02-03T01:47:07.286Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:07,944Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=605bc8f4-cdce-49ca-a0e9-d1c0162461b6, invocation_id=e816cdd2-01f1-4923-9cac-291d065dc09b, invocation_timestamp=2020-02-03T01:47:07.286Z, origin=Only For Testing, session_id=e816cdd2-01f1-4923-9cac-291d065dc09b, session_timestamp=2020-02-03T01:47:07.286Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:07,954Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=10ca6b68-2727-440e-ae7d-06bbeeb4ebce, invocation_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, invocation_timestamp=2020-02-03T01:47:07.883Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, session_timestamp=2020-02-03T01:47:07.883Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[WARN ] 2020-02-03T01:47:07,955Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=10ca6b68-2727-440e-ae7d-06bbeeb4ebce, invocation_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, invocation_timestamp=2020-02-03T01:47:07.883Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, session_timestamp=2020-02-03T01:47:07.883Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:07,958Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=10ca6b68-2727-440e-ae7d-06bbeeb4ebce, invocation_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, invocation_timestamp=2020-02-03T01:47:07.883Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, session_timestamp=2020-02-03T01:47:07.883Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:07,962Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000006, flow-id=10ca6b68-2727-440e-ae7d-06bbeeb4ebce, invocation_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, invocation_timestamp=2020-02-03T01:47:07.883Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, session_timestamp=2020-02-03T01:47:07.883Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:07,965Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000006, flow-id=10ca6b68-2727-440e-ae7d-06bbeeb4ebce, invocation_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, invocation_timestamp=2020-02-03T01:47:07.883Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7eb2260a-0eaa-4876-8e30-0588984e8e9d, session_timestamp=2020-02-03T01:47:07.883Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:07,971Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=605bc8f4-cdce-49ca-a0e9-d1c0162461b6, invocation_id=e816cdd2-01f1-4923-9cac-291d065dc09b, invocation_timestamp=2020-02-03T01:47:07.286Z, origin=Only For Testing, session_id=e816cdd2-01f1-4923-9cac-291d065dc09b, session_timestamp=2020-02-03T01:47:07.286Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:07,972Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=605bc8f4-cdce-49ca-a0e9-d1c0162461b6, invocation_id=e816cdd2-01f1-4923-9cac-291d065dc09b, invocation_timestamp=2020-02-03T01:47:07.286Z, origin=Only For Testing, session_id=e816cdd2-01f1-4923-9cac-291d065dc09b, session_timestamp=2020-02-03T01:47:07.286Z, thread-id=284, tx_id=19EEC3274BE7607CFB080EA777739AB7ECF9C3141D371DBC9B088B2D4D8DBAB4}
[INFO ] 2020-02-03T01:47:08,034Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014707.994/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:47:08,035Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014707.994/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:08,035Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014707.994/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:08,054Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:08,058Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:08,060Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:08,060Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:08,060Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:08,064Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:07.994Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:08,323Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:08,325Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014707.994/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:08,325Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:08,325Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:08,327Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:08,327Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:08,373Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:08,379Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:08,396Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:08,401Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:08,401Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:08,477Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:08,482Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:08,482Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694428482) {}
[INFO ] 2020-02-03T01:47:08,483Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:08,494Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694428482) {}
[INFO ] 2020-02-03T01:47:08,501Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:08,506Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694428482) {}
[INFO ] 2020-02-03T01:47:08,509Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:08,548Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:08,550Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:47:08,550Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:47:08,558Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694428482) {}
[INFO ] 2020-02-03T01:47:08,565Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694428482) {}
[INFO ] 2020-02-03T01:47:08,565Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:08,565Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694428482) {}
[INFO ] 2020-02-03T01:47:08,565Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:08,566Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014707.994/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:47:08,566Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014707.994/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:08,566Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014707.994/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:08,588Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:08,592Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:08,605Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:08,605Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:08,605Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:08,607Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:07.994Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:08,857Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:08,858Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014707.994/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:08,858Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:08,859Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:08,860Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:08,860Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:08,903Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:08,908Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:08,910Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:08,910Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:08,919Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:08,919Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:08,996Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:08,999Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:08,999Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694428999) {}
[INFO ] 2020-02-03T01:47:09,000Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:09,005Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694428999) {}
[INFO ] 2020-02-03T01:47:09,009Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:09,013Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694428999) {}
[INFO ] 2020-02-03T01:47:09,016Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:09,051Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:09,057Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694428999) {}
[INFO ] 2020-02-03T01:47:09,059Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694428482) {}
[INFO ] 2020-02-03T01:47:09,060Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:09,065Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694428999) {}
[INFO ] 2020-02-03T01:47:09,066Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:09,072Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694428999) {}
[INFO ] 2020-02-03T01:47:09,072Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:09,072Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694428999) {}
[INFO ] 2020-02-03T01:47:09,072Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:09,075Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014707.994/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:47:09,075Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014707.994/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:09,075Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014707.994/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:09,097Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:09,101Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:09,113Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:09,113Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:09,113Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:09,115Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:07.994Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:09,342Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:09,343Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014707.994/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:09,343Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:09,344Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:09,345Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:09,345Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:09,387Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:09,392Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:09,393Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:09,393Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:09,402Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:09,402Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:09,464Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:09,467Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:09,467Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694429467) {}
[INFO ] 2020-02-03T01:47:09,468Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:09,475Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694429467) {}
[INFO ] 2020-02-03T01:47:09,478Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:09,497Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694429467) {}
[INFO ] 2020-02-03T01:47:09,501Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:09,527Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:09,531Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694429467) {}
[INFO ] 2020-02-03T01:47:09,534Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694428482) {}
[INFO ] 2020-02-03T01:47:09,535Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:09,542Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694429467) {}
[INFO ] 2020-02-03T01:47:09,543Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:09,550Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694428999) {}
[INFO ] 2020-02-03T01:47:09,551Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:09,556Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694429467) {}
[INFO ] 2020-02-03T01:47:09,557Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:09,562Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694429467) {}
[INFO ] 2020-02-03T01:47:09,562Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:09,562Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694429467) {}
[INFO ] 2020-02-03T01:47:09,562Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:47:10,183Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6ed23bbf-1ee9-45ac-857b-421fdfb8e338, invocation_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, invocation_timestamp=2020-02-03T01:47:09.564Z, origin=Only For Testing, session_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, session_timestamp=2020-02-03T01:47:09.564Z, thread-id=373}
[INFO ] 2020-02-03T01:47:10,208Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=018dd3cc-d3a8-4934-bb8a-218c46ecb013, invocation_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, invocation_timestamp=2020-02-03T01:47:10.198Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, session_timestamp=2020-02-03T01:47:10.198Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[WARN ] 2020-02-03T01:47:10,208Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=018dd3cc-d3a8-4934-bb8a-218c46ecb013, invocation_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, invocation_timestamp=2020-02-03T01:47:10.198Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, session_timestamp=2020-02-03T01:47:10.198Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,214Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=018dd3cc-d3a8-4934-bb8a-218c46ecb013, invocation_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, invocation_timestamp=2020-02-03T01:47:10.198Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, session_timestamp=2020-02-03T01:47:10.198Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[WARN ] 2020-02-03T01:47:10,235Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=018dd3cc-d3a8-4934-bb8a-218c46ecb013, invocation_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, invocation_timestamp=2020-02-03T01:47:10.198Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, session_timestamp=2020-02-03T01:47:10.198Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,244Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6ed23bbf-1ee9-45ac-857b-421fdfb8e338, invocation_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, invocation_timestamp=2020-02-03T01:47:09.564Z, origin=Only For Testing, session_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, session_timestamp=2020-02-03T01:47:09.564Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,244Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6ed23bbf-1ee9-45ac-857b-421fdfb8e338, invocation_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, invocation_timestamp=2020-02-03T01:47:09.564Z, origin=Only For Testing, session_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, session_timestamp=2020-02-03T01:47:09.564Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,253Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6ed23bbf-1ee9-45ac-857b-421fdfb8e338, invocation_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, invocation_timestamp=2020-02-03T01:47:09.564Z, origin=Only For Testing, session_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, session_timestamp=2020-02-03T01:47:09.564Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,262Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=018dd3cc-d3a8-4934-bb8a-218c46ecb013, invocation_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, invocation_timestamp=2020-02-03T01:47:10.198Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, session_timestamp=2020-02-03T01:47:10.198Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[WARN ] 2020-02-03T01:47:10,262Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=018dd3cc-d3a8-4934-bb8a-218c46ecb013, invocation_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, invocation_timestamp=2020-02-03T01:47:10.198Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, session_timestamp=2020-02-03T01:47:10.198Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,267Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=018dd3cc-d3a8-4934-bb8a-218c46ecb013, invocation_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, invocation_timestamp=2020-02-03T01:47:10.198Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, session_timestamp=2020-02-03T01:47:10.198Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,271Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000008, flow-id=018dd3cc-d3a8-4934-bb8a-218c46ecb013, invocation_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, invocation_timestamp=2020-02-03T01:47:10.198Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, session_timestamp=2020-02-03T01:47:10.198Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,274Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000008, flow-id=018dd3cc-d3a8-4934-bb8a-218c46ecb013, invocation_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, invocation_timestamp=2020-02-03T01:47:10.198Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89616c9e-f79c-4f9a-9422-b18fd5f748f3, session_timestamp=2020-02-03T01:47:10.198Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,280Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6ed23bbf-1ee9-45ac-857b-421fdfb8e338, invocation_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, invocation_timestamp=2020-02-03T01:47:09.564Z, origin=Only For Testing, session_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, session_timestamp=2020-02-03T01:47:09.564Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,280Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=6ed23bbf-1ee9-45ac-857b-421fdfb8e338, invocation_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, invocation_timestamp=2020-02-03T01:47:09.564Z, origin=Only For Testing, session_id=77272cb2-6083-4a37-9a6f-d7fe8633c60b, session_timestamp=2020-02-03T01:47:09.564Z, thread-id=373, tx_id=0FAABB3DF75C6B216E7FEB2EFBA3E4CAEC146B36558B894FD15ED9E35EAC6F19}
[INFO ] 2020-02-03T01:47:10,327Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014710.288/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:47:10,328Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014710.288/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:10,328Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014710.288/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:10,351Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:10,354Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:10,357Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:10,357Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:10,357Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:10,361Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:10.288Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:10,607Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:10,609Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014710.288/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:10,609Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:10,610Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:10,611Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:10,612Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:10,669Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:10,674Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:10,689Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:10,694Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:10,694Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:10,760Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:10,764Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:10,764Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694430764) {}
[INFO ] 2020-02-03T01:47:10,765Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:10,774Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694430764) {}
[INFO ] 2020-02-03T01:47:10,780Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:10,792Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694430764) {}
[INFO ] 2020-02-03T01:47:10,795Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:10,821Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:10,822Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:47:10,822Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:47:10,826Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694430764) {}
[INFO ] 2020-02-03T01:47:10,830Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694430764) {}
[INFO ] 2020-02-03T01:47:10,831Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:10,831Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694430764) {}
[INFO ] 2020-02-03T01:47:10,831Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:10,832Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014710.288/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:47:10,832Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014710.288/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:10,832Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014710.288/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:10,838Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:10,842Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:10,854Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:10,854Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:10,854Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:10,856Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:10.288Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:11,081Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:11,082Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014710.288/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:11,082Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:11,083Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:11,084Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:11,084Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:11,125Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:11,130Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:11,131Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:11,132Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:11,140Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:11,141Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:11,202Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:11,205Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:11,205Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694431205) {}
[INFO ] 2020-02-03T01:47:11,207Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:11,212Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694431205) {}
[INFO ] 2020-02-03T01:47:11,215Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:11,222Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694431205) {}
[INFO ] 2020-02-03T01:47:11,233Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:11,268Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:11,275Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694431205) {}
[INFO ] 2020-02-03T01:47:11,279Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694430764) {}
[INFO ] 2020-02-03T01:47:11,280Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:11,285Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694431205) {}
[INFO ] 2020-02-03T01:47:11,286Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:11,290Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694431205) {}
[INFO ] 2020-02-03T01:47:11,291Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:11,291Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694431205) {}
[INFO ] 2020-02-03T01:47:11,291Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:11,292Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014710.288/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:47:11,292Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014710.288/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:11,292Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014710.288/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:11,311Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:11,314Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:11,326Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:11,326Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:11,326Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:11,328Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:10.288Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:11,540Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:11,542Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014710.288/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:11,542Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:11,543Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:11,544Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:11,544Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:11,585Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:11,590Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:11,591Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:11,591Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:11,600Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:11,600Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:11,658Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:11,662Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:11,662Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694431662) {}
[INFO ] 2020-02-03T01:47:11,664Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:11,668Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694431662) {}
[INFO ] 2020-02-03T01:47:11,671Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:11,682Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694431662) {}
[INFO ] 2020-02-03T01:47:11,685Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:11,711Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:11,715Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694431662) {}
[INFO ] 2020-02-03T01:47:11,717Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694430764) {}
[INFO ] 2020-02-03T01:47:11,718Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:11,724Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694431662) {}
[INFO ] 2020-02-03T01:47:11,725Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:11,734Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694431205) {}
[INFO ] 2020-02-03T01:47:11,734Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:11,740Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694431662) {}
[INFO ] 2020-02-03T01:47:11,741Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:11,746Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694431662) {}
[INFO ] 2020-02-03T01:47:11,746Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:11,746Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694431662) {}
[INFO ] 2020-02-03T01:47:11,746Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:47:12,336Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=18df8c01-3b92-4d92-8021-929bff1a5281, invocation_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, invocation_timestamp=2020-02-03T01:47:11.750Z, origin=Only For Testing, session_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, session_timestamp=2020-02-03T01:47:11.750Z, thread-id=462}
[INFO ] 2020-02-03T01:47:12,358Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=f007fa21-a6d9-44fc-9e34-aa4157513ad0, invocation_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, invocation_timestamp=2020-02-03T01:47:12.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, session_timestamp=2020-02-03T01:47:12.349Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[WARN ] 2020-02-03T01:47:12,358Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=f007fa21-a6d9-44fc-9e34-aa4157513ad0, invocation_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, invocation_timestamp=2020-02-03T01:47:12.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, session_timestamp=2020-02-03T01:47:12.349Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,363Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=f007fa21-a6d9-44fc-9e34-aa4157513ad0, invocation_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, invocation_timestamp=2020-02-03T01:47:12.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, session_timestamp=2020-02-03T01:47:12.349Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[WARN ] 2020-02-03T01:47:12,383Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=f007fa21-a6d9-44fc-9e34-aa4157513ad0, invocation_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, invocation_timestamp=2020-02-03T01:47:12.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, session_timestamp=2020-02-03T01:47:12.349Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,391Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=18df8c01-3b92-4d92-8021-929bff1a5281, invocation_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, invocation_timestamp=2020-02-03T01:47:11.750Z, origin=Only For Testing, session_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, session_timestamp=2020-02-03T01:47:11.750Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,391Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=18df8c01-3b92-4d92-8021-929bff1a5281, invocation_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, invocation_timestamp=2020-02-03T01:47:11.750Z, origin=Only For Testing, session_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, session_timestamp=2020-02-03T01:47:11.750Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,399Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=18df8c01-3b92-4d92-8021-929bff1a5281, invocation_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, invocation_timestamp=2020-02-03T01:47:11.750Z, origin=Only For Testing, session_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, session_timestamp=2020-02-03T01:47:11.750Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,405Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=f007fa21-a6d9-44fc-9e34-aa4157513ad0, invocation_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, invocation_timestamp=2020-02-03T01:47:12.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, session_timestamp=2020-02-03T01:47:12.349Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[WARN ] 2020-02-03T01:47:12,405Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=f007fa21-a6d9-44fc-9e34-aa4157513ad0, invocation_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, invocation_timestamp=2020-02-03T01:47:12.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, session_timestamp=2020-02-03T01:47:12.349Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,408Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=f007fa21-a6d9-44fc-9e34-aa4157513ad0, invocation_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, invocation_timestamp=2020-02-03T01:47:12.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, session_timestamp=2020-02-03T01:47:12.349Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,412Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000010, flow-id=f007fa21-a6d9-44fc-9e34-aa4157513ad0, invocation_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, invocation_timestamp=2020-02-03T01:47:12.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, session_timestamp=2020-02-03T01:47:12.349Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,415Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000010, flow-id=f007fa21-a6d9-44fc-9e34-aa4157513ad0, invocation_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, invocation_timestamp=2020-02-03T01:47:12.349Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79ea6cad-a886-44a0-a45d-3c619531ddc7, session_timestamp=2020-02-03T01:47:12.349Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,420Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=18df8c01-3b92-4d92-8021-929bff1a5281, invocation_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, invocation_timestamp=2020-02-03T01:47:11.750Z, origin=Only For Testing, session_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, session_timestamp=2020-02-03T01:47:11.750Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,421Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=18df8c01-3b92-4d92-8021-929bff1a5281, invocation_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, invocation_timestamp=2020-02-03T01:47:11.750Z, origin=Only For Testing, session_id=d1664d84-ebdf-4689-b3cc-711f0ef0fa67, session_timestamp=2020-02-03T01:47:11.750Z, thread-id=462, tx_id=6E693672271D196E823E3C4E05716CA13859E8D0B8B740F477F605B60E85B811}
[INFO ] 2020-02-03T01:47:12,477Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014712.446/nodes/0/cordapps] {}
[INFO ] 2020-02-03T01:47:12,478Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014712.446/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:12,478Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014712.446/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:12,497Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:12,502Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:12,504Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:12,504Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:12,504Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:12,507Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:12.446Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:12,741Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:12,742Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014712.446/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:12,742Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:12,743Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:12,744Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:12,744Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:12,786Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:12,791Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:12,806Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:12,811Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:12,811Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:12,872Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T01:47:12,875Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:12,875Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694432875) {}
[INFO ] 2020-02-03T01:47:12,876Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:12,885Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694432875) {}
[INFO ] 2020-02-03T01:47:12,890Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:12,898Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694432875) {}
[INFO ] 2020-02-03T01:47:12,907Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:12,940Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:12,941Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T01:47:12,941Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T01:47:12,945Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694432875) {}
[INFO ] 2020-02-03T01:47:12,950Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694432875) {}
[INFO ] 2020-02-03T01:47:12,951Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:12,952Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694432875) {}
[INFO ] 2020-02-03T01:47:12,953Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:12,954Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014712.446/nodes/1/cordapps] {}
[INFO ] 2020-02-03T01:47:12,955Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014712.446/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:12,955Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014712.446/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:12,965Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:12,970Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:12,983Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:12,983Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:12,983Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:12,985Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:12.446Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:13,225Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:13,226Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014712.446/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:13,226Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:13,227Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:13,228Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:13,228Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:13,266Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:13,271Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:13,272Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:13,272Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:13,281Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:13,281Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:13,337Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:13,340Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:13,340Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694433340) {}
[INFO ] 2020-02-03T01:47:13,341Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:13,344Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694433340) {}
[INFO ] 2020-02-03T01:47:13,348Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:13,365Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694433340) {}
[INFO ] 2020-02-03T01:47:13,370Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:13,380Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:13,385Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694433340) {}
[INFO ] 2020-02-03T01:47:13,387Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694432875) {}
[INFO ] 2020-02-03T01:47:13,388Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:13,392Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694433340) {}
[INFO ] 2020-02-03T01:47:13,393Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:13,397Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694433340) {}
[INFO ] 2020-02-03T01:47:13,397Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:13,397Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694433340) {}
[INFO ] 2020-02-03T01:47:13,397Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:13,399Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-014712.446/nodes/2/cordapps] {}
[INFO ] 2020-02-03T01:47:13,399Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014712.446/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T01:47:13,399Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-014712.446/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T01:47:13,413Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T01:47:13,421Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T01:47:13,432Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:13,432Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:13,432Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T01:47:13,434Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T01:47:12.446Z
      epoch=1
  } {}
[INFO ] 2020-02-03T01:47:13,641Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T01:47:13,642Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-014712.446/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T01:47:13,642Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T01:47:13,643Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T01:47:13,644Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:13,644Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:13,682Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T01:47:13,686Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T01:47:13,688Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T01:47:13,688Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T01:47:13,696Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:13,696Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:13,752Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T01:47:13,756Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T01:47:13,756Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694433756) {}
[INFO ] 2020-02-03T01:47:13,757Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:13,760Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694433756) {}
[INFO ] 2020-02-03T01:47:13,764Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T01:47:13,778Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694433756) {}
[INFO ] 2020-02-03T01:47:13,786Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:13,799Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7DB29D32A6FCA5A8BAE15152510F9412FA9229C13FD5D01FBB540A8D5AF955A8 uploader=app filename=null {}
[INFO ] 2020-02-03T01:47:13,803Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694433756) {}
[INFO ] 2020-02-03T01:47:13,805Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580694432875) {}
[INFO ] 2020-02-03T01:47:13,805Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:13,810Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694433756) {}
[INFO ] 2020-02-03T01:47:13,810Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:13,815Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580694433340) {}
[INFO ] 2020-02-03T01:47:13,816Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:13,821Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694433756) {}
[INFO ] 2020-02-03T01:47:13,821Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T01:47:13,826Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694433756) {}
[INFO ] 2020-02-03T01:47:13,826Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T01:47:13,826Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580694433756) {}
[INFO ] 2020-02-03T01:47:13,826Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T01:47:14,421Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=aa40bf94-a5a5-4511-ac6f-2e7e2507804c, invocation_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, invocation_timestamp=2020-02-03T01:47:13.830Z, origin=Only For Testing, session_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, session_timestamp=2020-02-03T01:47:13.830Z, thread-id=551}
[INFO ] 2020-02-03T01:47:14,443Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=33f1adab-48d9-4c11-8c77-2c7a11190c77, invocation_id=d31e04ba-e5ed-466f-a122-c18695777c98, invocation_timestamp=2020-02-03T01:47:14.435Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d31e04ba-e5ed-466f-a122-c18695777c98, session_timestamp=2020-02-03T01:47:14.435Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[WARN ] 2020-02-03T01:47:14,443Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=33f1adab-48d9-4c11-8c77-2c7a11190c77, invocation_id=d31e04ba-e5ed-466f-a122-c18695777c98, invocation_timestamp=2020-02-03T01:47:14.435Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d31e04ba-e5ed-466f-a122-c18695777c98, session_timestamp=2020-02-03T01:47:14.435Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T01:47:14,448Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=33f1adab-48d9-4c11-8c77-2c7a11190c77, invocation_id=d31e04ba-e5ed-466f-a122-c18695777c98, invocation_timestamp=2020-02-03T01:47:14.435Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d31e04ba-e5ed-466f-a122-c18695777c98, session_timestamp=2020-02-03T01:47:14.435Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[WARN ] 2020-02-03T01:47:14,467Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=33f1adab-48d9-4c11-8c77-2c7a11190c77, invocation_id=d31e04ba-e5ed-466f-a122-c18695777c98, invocation_timestamp=2020-02-03T01:47:14.435Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d31e04ba-e5ed-466f-a122-c18695777c98, session_timestamp=2020-02-03T01:47:14.435Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T01:47:14,475Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=aa40bf94-a5a5-4511-ac6f-2e7e2507804c, invocation_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, invocation_timestamp=2020-02-03T01:47:13.830Z, origin=Only For Testing, session_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, session_timestamp=2020-02-03T01:47:13.830Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T01:47:14,475Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=aa40bf94-a5a5-4511-ac6f-2e7e2507804c, invocation_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, invocation_timestamp=2020-02-03T01:47:13.830Z, origin=Only For Testing, session_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, session_timestamp=2020-02-03T01:47:13.830Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T01:47:14,483Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=aa40bf94-a5a5-4511-ac6f-2e7e2507804c, invocation_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, invocation_timestamp=2020-02-03T01:47:13.830Z, origin=Only For Testing, session_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, session_timestamp=2020-02-03T01:47:13.830Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T01:47:14,489Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=33f1adab-48d9-4c11-8c77-2c7a11190c77, invocation_id=d31e04ba-e5ed-466f-a122-c18695777c98, invocation_timestamp=2020-02-03T01:47:14.435Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d31e04ba-e5ed-466f-a122-c18695777c98, session_timestamp=2020-02-03T01:47:14.435Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[WARN ] 2020-02-03T01:47:14,490Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=33f1adab-48d9-4c11-8c77-2c7a11190c77, invocation_id=d31e04ba-e5ed-466f-a122-c18695777c98, invocation_timestamp=2020-02-03T01:47:14.435Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d31e04ba-e5ed-466f-a122-c18695777c98, session_timestamp=2020-02-03T01:47:14.435Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T01:47:14,494Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=33f1adab-48d9-4c11-8c77-2c7a11190c77, invocation_id=d31e04ba-e5ed-466f-a122-c18695777c98, invocation_timestamp=2020-02-03T01:47:14.435Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d31e04ba-e5ed-466f-a122-c18695777c98, session_timestamp=2020-02-03T01:47:14.435Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T01:47:14,497Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000012, flow-id=33f1adab-48d9-4c11-8c77-2c7a11190c77, invocation_id=d31e04ba-e5ed-466f-a122-c18695777c98, invocation_timestamp=2020-02-03T01:47:14.435Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d31e04ba-e5ed-466f-a122-c18695777c98, session_timestamp=2020-02-03T01:47:14.435Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T01:47:14,499Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000012, flow-id=33f1adab-48d9-4c11-8c77-2c7a11190c77, invocation_id=d31e04ba-e5ed-466f-a122-c18695777c98, invocation_timestamp=2020-02-03T01:47:14.435Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d31e04ba-e5ed-466f-a122-c18695777c98, session_timestamp=2020-02-03T01:47:14.435Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T01:47:14,504Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=aa40bf94-a5a5-4511-ac6f-2e7e2507804c, invocation_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, invocation_timestamp=2020-02-03T01:47:13.830Z, origin=Only For Testing, session_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, session_timestamp=2020-02-03T01:47:13.830Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T01:47:14,504Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=aa40bf94-a5a5-4511-ac6f-2e7e2507804c, invocation_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, invocation_timestamp=2020-02-03T01:47:13.830Z, origin=Only For Testing, session_id=c1c85bdf-0601-4a7d-bbc1-13f794dcbe5f, session_timestamp=2020-02-03T01:47:13.830Z, thread-id=551, tx_id=78C1607DF9224339F7BE8E9F3E05E3264BE05C3B99B98F72CEF159523873877C}
[INFO ] 2020-02-03T02:05:59,186Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in /home/illuna/1.Projetos/Corda-Bootcamp ... {}
[INFO ] 2020-02-03T02:06:02,039Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020554.269/nodes/0/cordapps] {}
[INFO ] 2020-02-03T02:06:02,048Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020554.269/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:02,070Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020554.269/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:02,136Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:02,620Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:02,690Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:02,691Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:02,692Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:02,818Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:05:54.092Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:06,503Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:06,507Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020554.269/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:06,507Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:06,508Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:06,581Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:06,585Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:08,373Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:08,926Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:08,978Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:08,995Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:08,995Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:09,233Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:09,244Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:09,244Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695569244) {}
[INFO ] 2020-02-03T02:06:09,248Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:09,380Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695569244) {}
[INFO ] 2020-02-03T02:06:09,435Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:09,453Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695569244) {}
[INFO ] 2020-02-03T02:06:09,490Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:09,534Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:09,537Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T02:06:09,540Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T02:06:09,910Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695569244) {}
[INFO ] 2020-02-03T02:06:09,926Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695569244) {}
[INFO ] 2020-02-03T02:06:09,927Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:09,927Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695569244) {}
[INFO ] 2020-02-03T02:06:09,927Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:09,942Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020554.269/nodes/1/cordapps] {}
[INFO ] 2020-02-03T02:06:09,943Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020554.269/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:09,943Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020554.269/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:09,972Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:09,986Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:10,014Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:10,015Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:10,015Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:10,019Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:05:54.092Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:10,433Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:10,435Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020554.269/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:10,435Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:10,437Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:10,441Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:10,441Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:10,524Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:10,533Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:10,535Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:10,535Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:10,550Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:10,550Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:10,658Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:10,663Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:10,663Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695570663) {}
[INFO ] 2020-02-03T02:06:10,665Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:10,672Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695570663) {}
[INFO ] 2020-02-03T02:06:10,679Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:10,683Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695570663) {}
[INFO ] 2020-02-03T02:06:10,698Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:10,737Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:10,745Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695570663) {}
[INFO ] 2020-02-03T02:06:10,753Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695569244) {}
[INFO ] 2020-02-03T02:06:10,755Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:10,766Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695570663) {}
[INFO ] 2020-02-03T02:06:10,767Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:10,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695570663) {}
[INFO ] 2020-02-03T02:06:10,776Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:10,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695570663) {}
[INFO ] 2020-02-03T02:06:10,776Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:10,778Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020554.269/nodes/2/cordapps] {}
[INFO ] 2020-02-03T02:06:10,778Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020554.269/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:10,779Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020554.269/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:10,802Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:10,809Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:10,832Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:10,832Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:10,832Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:10,836Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:05:54.092Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:11,222Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:11,224Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020554.269/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:11,224Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:11,224Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:11,226Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:11,226Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:11,297Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:11,308Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:11,310Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:11,310Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:11,325Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:11,325Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:11,413Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:11,417Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:11,417Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695571417) {}
[INFO ] 2020-02-03T02:06:11,420Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:11,426Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695571417) {}
[INFO ] 2020-02-03T02:06:11,435Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:11,445Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695571417) {}
[INFO ] 2020-02-03T02:06:11,474Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:11,512Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:11,522Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695571417) {}
[INFO ] 2020-02-03T02:06:11,526Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695569244) {}
[INFO ] 2020-02-03T02:06:11,527Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:11,539Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695571417) {}
[INFO ] 2020-02-03T02:06:11,540Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:11,550Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695570663) {}
[INFO ] 2020-02-03T02:06:11,555Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:11,563Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695571417) {}
[INFO ] 2020-02-03T02:06:11,565Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:11,575Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695571417) {}
[INFO ] 2020-02-03T02:06:11,575Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:11,575Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695571417) {}
[INFO ] 2020-02-03T02:06:11,576Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T02:06:11,796Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=2eed271e-eb77-47a7-8053-0ed4a709212d, invocation_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, invocation_timestamp=2020-02-03T02:06:11.597Z, origin=Only For Testing, session_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, session_timestamp=2020-02-03T02:06:11.597Z, thread-id=103}
[WARN ] 2020-02-03T02:06:11,796Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=2eed271e-eb77-47a7-8053-0ed4a709212d, invocation_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, invocation_timestamp=2020-02-03T02:06:11.597Z, origin=Only For Testing, session_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, session_timestamp=2020-02-03T02:06:11.597Z, thread-id=103}
[WARN ] 2020-02-03T02:06:13,157Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=2eed271e-eb77-47a7-8053-0ed4a709212d, invocation_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, invocation_timestamp=2020-02-03T02:06:11.597Z, origin=Only For Testing, session_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, session_timestamp=2020-02-03T02:06:11.597Z, thread-id=103}
[INFO ] 2020-02-03T02:06:13,314Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=c27e9c4f-d6cb-4958-b198-5330e2e40371, invocation_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, invocation_timestamp=2020-02-03T02:06:13.260Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, session_timestamp=2020-02-03T02:06:13.260Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[WARN ] 2020-02-03T02:06:13,322Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=c27e9c4f-d6cb-4958-b198-5330e2e40371, invocation_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, invocation_timestamp=2020-02-03T02:06:13.260Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, session_timestamp=2020-02-03T02:06:13.260Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,347Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=c27e9c4f-d6cb-4958-b198-5330e2e40371, invocation_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, invocation_timestamp=2020-02-03T02:06:13.260Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, session_timestamp=2020-02-03T02:06:13.260Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[WARN ] 2020-02-03T02:06:13,392Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=c27e9c4f-d6cb-4958-b198-5330e2e40371, invocation_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, invocation_timestamp=2020-02-03T02:06:13.260Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, session_timestamp=2020-02-03T02:06:13.260Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,415Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=2eed271e-eb77-47a7-8053-0ed4a709212d, invocation_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, invocation_timestamp=2020-02-03T02:06:11.597Z, origin=Only For Testing, session_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, session_timestamp=2020-02-03T02:06:11.597Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,416Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=2eed271e-eb77-47a7-8053-0ed4a709212d, invocation_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, invocation_timestamp=2020-02-03T02:06:11.597Z, origin=Only For Testing, session_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, session_timestamp=2020-02-03T02:06:11.597Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,443Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=2eed271e-eb77-47a7-8053-0ed4a709212d, invocation_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, invocation_timestamp=2020-02-03T02:06:11.597Z, origin=Only For Testing, session_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, session_timestamp=2020-02-03T02:06:11.597Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,460Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=c27e9c4f-d6cb-4958-b198-5330e2e40371, invocation_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, invocation_timestamp=2020-02-03T02:06:13.260Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, session_timestamp=2020-02-03T02:06:13.260Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[WARN ] 2020-02-03T02:06:13,460Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=c27e9c4f-d6cb-4958-b198-5330e2e40371, invocation_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, invocation_timestamp=2020-02-03T02:06:13.260Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, session_timestamp=2020-02-03T02:06:13.260Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,465Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=c27e9c4f-d6cb-4958-b198-5330e2e40371, invocation_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, invocation_timestamp=2020-02-03T02:06:13.260Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, session_timestamp=2020-02-03T02:06:13.260Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,470Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=c27e9c4f-d6cb-4958-b198-5330e2e40371, invocation_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, invocation_timestamp=2020-02-03T02:06:13.260Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, session_timestamp=2020-02-03T02:06:13.260Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,474Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=c27e9c4f-d6cb-4958-b198-5330e2e40371, invocation_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, invocation_timestamp=2020-02-03T02:06:13.260Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3eff9517-2ce6-42f7-8606-3d7626a3993d, session_timestamp=2020-02-03T02:06:13.260Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,504Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=2eed271e-eb77-47a7-8053-0ed4a709212d, invocation_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, invocation_timestamp=2020-02-03T02:06:11.597Z, origin=Only For Testing, session_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, session_timestamp=2020-02-03T02:06:11.597Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,504Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=2eed271e-eb77-47a7-8053-0ed4a709212d, invocation_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, invocation_timestamp=2020-02-03T02:06:11.597Z, origin=Only For Testing, session_id=cd89a4d5-62d9-4348-a9be-3e8b1ab9883c, session_timestamp=2020-02-03T02:06:11.597Z, thread-id=103, tx_id=1D4D347064AE919C127BC0C374B98D6AF47CE0E9F97AE91B4FECC8BDE6BDC53C}
[INFO ] 2020-02-03T02:06:13,592Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020613.533/nodes/0/cordapps] {}
[INFO ] 2020-02-03T02:06:13,592Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020613.533/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:13,592Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020613.533/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:13,623Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:13,630Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:13,633Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:13,633Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:13,633Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:13,640Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:13.532Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:13,998Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:14,001Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020613.533/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:14,001Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:14,003Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:14,006Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:14,006Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:14,086Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:14,092Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:14,115Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:14,120Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:14,120Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:14,209Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:14,213Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:14,213Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695574213) {}
[INFO ] 2020-02-03T02:06:14,215Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:14,234Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695574213) {}
[INFO ] 2020-02-03T02:06:14,242Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:14,249Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695574213) {}
[INFO ] 2020-02-03T02:06:14,288Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:14,292Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:14,293Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T02:06:14,293Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T02:06:14,311Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695574213) {}
[INFO ] 2020-02-03T02:06:14,313Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695574213) {}
[INFO ] 2020-02-03T02:06:14,313Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:14,313Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695574213) {}
[INFO ] 2020-02-03T02:06:14,313Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:14,316Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020613.533/nodes/1/cordapps] {}
[INFO ] 2020-02-03T02:06:14,317Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020613.533/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:14,317Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020613.533/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:14,342Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:14,346Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:14,362Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:14,363Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:14,363Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:14,366Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:13.532Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:14,669Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:14,671Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020613.533/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:14,671Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:14,672Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:14,673Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:14,673Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:14,734Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:14,741Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:14,742Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:14,742Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:14,754Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:14,754Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:14,848Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:14,851Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:14,852Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695574852) {}
[INFO ] 2020-02-03T02:06:14,854Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:14,859Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695574852) {}
[INFO ] 2020-02-03T02:06:14,865Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:14,872Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695574852) {}
[INFO ] 2020-02-03T02:06:14,890Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:14,908Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:14,914Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695574852) {}
[INFO ] 2020-02-03T02:06:14,923Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695574213) {}
[INFO ] 2020-02-03T02:06:14,924Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:14,931Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695574852) {}
[INFO ] 2020-02-03T02:06:14,932Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:14,941Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695574852) {}
[INFO ] 2020-02-03T02:06:14,941Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:14,941Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695574852) {}
[INFO ] 2020-02-03T02:06:14,941Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:14,943Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020613.533/nodes/2/cordapps] {}
[INFO ] 2020-02-03T02:06:14,943Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020613.533/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:14,943Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020613.533/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:14,969Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:14,975Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:14,993Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:14,993Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:14,993Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:14,996Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:13.532Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:15,324Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:15,325Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020613.533/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:15,325Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:15,326Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:15,327Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:15,327Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:15,379Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:15,389Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:15,390Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:15,390Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:15,400Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:15,401Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:15,478Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:15,482Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:15,482Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695575482) {}
[INFO ] 2020-02-03T02:06:15,484Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:15,490Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695575482) {}
[INFO ] 2020-02-03T02:06:15,494Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:15,511Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695575482) {}
[INFO ] 2020-02-03T02:06:15,518Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:15,547Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:15,558Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695575482) {}
[INFO ] 2020-02-03T02:06:15,560Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695574213) {}
[INFO ] 2020-02-03T02:06:15,561Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:15,568Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695575482) {}
[INFO ] 2020-02-03T02:06:15,570Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:15,577Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695574852) {}
[INFO ] 2020-02-03T02:06:15,578Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:15,587Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695575482) {}
[INFO ] 2020-02-03T02:06:15,588Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:15,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695575482) {}
[INFO ] 2020-02-03T02:06:15,594Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:15,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695575482) {}
[INFO ] 2020-02-03T02:06:15,594Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T02:06:16,355Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=c2d0c7a6-a6e6-4818-9837-7f53d638ca83, invocation_id=67357099-7beb-4e11-9faa-fa14340adb7a, invocation_timestamp=2020-02-03T02:06:15.598Z, origin=Only For Testing, session_id=67357099-7beb-4e11-9faa-fa14340adb7a, session_timestamp=2020-02-03T02:06:15.598Z, thread-id=195}
[INFO ] 2020-02-03T02:06:16,388Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=3cabb268-64d3-4126-9f5e-88424360c3c5, invocation_id=e1d05244-f619-4434-8ece-9981f99e05ed, invocation_timestamp=2020-02-03T02:06:16.373Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e1d05244-f619-4434-8ece-9981f99e05ed, session_timestamp=2020-02-03T02:06:16.373Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[WARN ] 2020-02-03T02:06:16,388Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=3cabb268-64d3-4126-9f5e-88424360c3c5, invocation_id=e1d05244-f619-4434-8ece-9981f99e05ed, invocation_timestamp=2020-02-03T02:06:16.373Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e1d05244-f619-4434-8ece-9981f99e05ed, session_timestamp=2020-02-03T02:06:16.373Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,396Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=3cabb268-64d3-4126-9f5e-88424360c3c5, invocation_id=e1d05244-f619-4434-8ece-9981f99e05ed, invocation_timestamp=2020-02-03T02:06:16.373Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e1d05244-f619-4434-8ece-9981f99e05ed, session_timestamp=2020-02-03T02:06:16.373Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[WARN ] 2020-02-03T02:06:16,428Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=3cabb268-64d3-4126-9f5e-88424360c3c5, invocation_id=e1d05244-f619-4434-8ece-9981f99e05ed, invocation_timestamp=2020-02-03T02:06:16.373Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e1d05244-f619-4434-8ece-9981f99e05ed, session_timestamp=2020-02-03T02:06:16.373Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,439Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=c2d0c7a6-a6e6-4818-9837-7f53d638ca83, invocation_id=67357099-7beb-4e11-9faa-fa14340adb7a, invocation_timestamp=2020-02-03T02:06:15.598Z, origin=Only For Testing, session_id=67357099-7beb-4e11-9faa-fa14340adb7a, session_timestamp=2020-02-03T02:06:15.598Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,440Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=c2d0c7a6-a6e6-4818-9837-7f53d638ca83, invocation_id=67357099-7beb-4e11-9faa-fa14340adb7a, invocation_timestamp=2020-02-03T02:06:15.598Z, origin=Only For Testing, session_id=67357099-7beb-4e11-9faa-fa14340adb7a, session_timestamp=2020-02-03T02:06:15.598Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,450Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=c2d0c7a6-a6e6-4818-9837-7f53d638ca83, invocation_id=67357099-7beb-4e11-9faa-fa14340adb7a, invocation_timestamp=2020-02-03T02:06:15.598Z, origin=Only For Testing, session_id=67357099-7beb-4e11-9faa-fa14340adb7a, session_timestamp=2020-02-03T02:06:15.598Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,469Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=3cabb268-64d3-4126-9f5e-88424360c3c5, invocation_id=e1d05244-f619-4434-8ece-9981f99e05ed, invocation_timestamp=2020-02-03T02:06:16.373Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e1d05244-f619-4434-8ece-9981f99e05ed, session_timestamp=2020-02-03T02:06:16.373Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[WARN ] 2020-02-03T02:06:16,470Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=3cabb268-64d3-4126-9f5e-88424360c3c5, invocation_id=e1d05244-f619-4434-8ece-9981f99e05ed, invocation_timestamp=2020-02-03T02:06:16.373Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e1d05244-f619-4434-8ece-9981f99e05ed, session_timestamp=2020-02-03T02:06:16.373Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,474Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=3cabb268-64d3-4126-9f5e-88424360c3c5, invocation_id=e1d05244-f619-4434-8ece-9981f99e05ed, invocation_timestamp=2020-02-03T02:06:16.373Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e1d05244-f619-4434-8ece-9981f99e05ed, session_timestamp=2020-02-03T02:06:16.373Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,478Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000004, flow-id=3cabb268-64d3-4126-9f5e-88424360c3c5, invocation_id=e1d05244-f619-4434-8ece-9981f99e05ed, invocation_timestamp=2020-02-03T02:06:16.373Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e1d05244-f619-4434-8ece-9981f99e05ed, session_timestamp=2020-02-03T02:06:16.373Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,482Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000004, flow-id=3cabb268-64d3-4126-9f5e-88424360c3c5, invocation_id=e1d05244-f619-4434-8ece-9981f99e05ed, invocation_timestamp=2020-02-03T02:06:16.373Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e1d05244-f619-4434-8ece-9981f99e05ed, session_timestamp=2020-02-03T02:06:16.373Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,488Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=c2d0c7a6-a6e6-4818-9837-7f53d638ca83, invocation_id=67357099-7beb-4e11-9faa-fa14340adb7a, invocation_timestamp=2020-02-03T02:06:15.598Z, origin=Only For Testing, session_id=67357099-7beb-4e11-9faa-fa14340adb7a, session_timestamp=2020-02-03T02:06:15.598Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,488Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=c2d0c7a6-a6e6-4818-9837-7f53d638ca83, invocation_id=67357099-7beb-4e11-9faa-fa14340adb7a, invocation_timestamp=2020-02-03T02:06:15.598Z, origin=Only For Testing, session_id=67357099-7beb-4e11-9faa-fa14340adb7a, session_timestamp=2020-02-03T02:06:15.598Z, thread-id=195, tx_id=7CA789435A2D02F0A55F6D7DF0DEA04F8CE2FCBCCEEF6677C50A60377D0D58DD}
[INFO ] 2020-02-03T02:06:16,565Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020616.516/nodes/0/cordapps] {}
[INFO ] 2020-02-03T02:06:16,567Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020616.516/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:16,567Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020616.516/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:16,583Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:16,593Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:16,596Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:16,596Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:16,596Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:16,602Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:16.515Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:16,880Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:16,881Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020616.516/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:16,881Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:16,883Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:16,887Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:16,887Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:16,940Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:16,945Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:16,965Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:16,970Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:16,971Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:17,053Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:17,058Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:17,058Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695577058) {}
[INFO ] 2020-02-03T02:06:17,060Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:17,072Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695577058) {}
[INFO ] 2020-02-03T02:06:17,078Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:17,095Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695577058) {}
[INFO ] 2020-02-03T02:06:17,104Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:17,120Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:17,122Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T02:06:17,122Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T02:06:17,126Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695577058) {}
[INFO ] 2020-02-03T02:06:17,131Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695577058) {}
[INFO ] 2020-02-03T02:06:17,131Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:17,131Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695577058) {}
[INFO ] 2020-02-03T02:06:17,131Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:17,132Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020616.516/nodes/1/cordapps] {}
[INFO ] 2020-02-03T02:06:17,133Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020616.516/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:17,133Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020616.516/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:17,152Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:17,157Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:17,172Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:17,173Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:17,225Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:17,227Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:16.515Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:17,498Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:17,501Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020616.516/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:17,501Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:17,502Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:17,503Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:17,504Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:17,560Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:17,567Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:17,568Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:17,569Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:17,578Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:17,578Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:17,654Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:17,657Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:17,657Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695577657) {}
[INFO ] 2020-02-03T02:06:17,659Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:17,663Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695577657) {}
[INFO ] 2020-02-03T02:06:17,669Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:17,674Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695577657) {}
[INFO ] 2020-02-03T02:06:17,680Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:17,711Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:17,720Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695577657) {}
[INFO ] 2020-02-03T02:06:17,723Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695577058) {}
[INFO ] 2020-02-03T02:06:17,724Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:17,730Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695577657) {}
[INFO ] 2020-02-03T02:06:17,731Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:17,738Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695577657) {}
[INFO ] 2020-02-03T02:06:17,739Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:17,739Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695577657) {}
[INFO ] 2020-02-03T02:06:17,739Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:17,740Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020616.516/nodes/2/cordapps] {}
[INFO ] 2020-02-03T02:06:17,741Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020616.516/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:17,741Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020616.516/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:17,774Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:17,778Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:17,795Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:17,796Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:17,796Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:17,800Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:16.515Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:18,071Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:18,072Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020616.516/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:18,072Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:18,072Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:18,074Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:18,074Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:18,122Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:18,127Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:18,129Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:18,129Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:18,139Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:18,139Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:18,213Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:18,217Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:18,217Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695578217) {}
[INFO ] 2020-02-03T02:06:18,218Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:18,223Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695578217) {}
[INFO ] 2020-02-03T02:06:18,228Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:18,236Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695578217) {}
[INFO ] 2020-02-03T02:06:18,245Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:18,279Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:18,285Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695578217) {}
[INFO ] 2020-02-03T02:06:18,291Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695577058) {}
[INFO ] 2020-02-03T02:06:18,292Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:18,300Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695578217) {}
[INFO ] 2020-02-03T02:06:18,303Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:18,309Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695577657) {}
[INFO ] 2020-02-03T02:06:18,310Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:18,317Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695578217) {}
[INFO ] 2020-02-03T02:06:18,319Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:18,325Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695578217) {}
[INFO ] 2020-02-03T02:06:18,325Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:18,325Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695578217) {}
[INFO ] 2020-02-03T02:06:18,326Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T02:06:19,048Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0c13ba5a-81da-49fb-b4a0-ba938f4a5884, invocation_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, invocation_timestamp=2020-02-03T02:06:18.327Z, origin=Only For Testing, session_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, session_timestamp=2020-02-03T02:06:18.327Z, thread-id=284}
[INFO ] 2020-02-03T02:06:19,078Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=7d0c595c-c64d-4f19-9adc-d5ca5823afe7, invocation_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, invocation_timestamp=2020-02-03T02:06:19.067Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, session_timestamp=2020-02-03T02:06:19.067Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[WARN ] 2020-02-03T02:06:19,079Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=7d0c595c-c64d-4f19-9adc-d5ca5823afe7, invocation_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, invocation_timestamp=2020-02-03T02:06:19.067Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, session_timestamp=2020-02-03T02:06:19.067Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,087Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=7d0c595c-c64d-4f19-9adc-d5ca5823afe7, invocation_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, invocation_timestamp=2020-02-03T02:06:19.067Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, session_timestamp=2020-02-03T02:06:19.067Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[WARN ] 2020-02-03T02:06:19,114Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=7d0c595c-c64d-4f19-9adc-d5ca5823afe7, invocation_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, invocation_timestamp=2020-02-03T02:06:19.067Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, session_timestamp=2020-02-03T02:06:19.067Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,125Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0c13ba5a-81da-49fb-b4a0-ba938f4a5884, invocation_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, invocation_timestamp=2020-02-03T02:06:18.327Z, origin=Only For Testing, session_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, session_timestamp=2020-02-03T02:06:18.327Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,126Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0c13ba5a-81da-49fb-b4a0-ba938f4a5884, invocation_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, invocation_timestamp=2020-02-03T02:06:18.327Z, origin=Only For Testing, session_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, session_timestamp=2020-02-03T02:06:18.327Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,136Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0c13ba5a-81da-49fb-b4a0-ba938f4a5884, invocation_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, invocation_timestamp=2020-02-03T02:06:18.327Z, origin=Only For Testing, session_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, session_timestamp=2020-02-03T02:06:18.327Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,143Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=7d0c595c-c64d-4f19-9adc-d5ca5823afe7, invocation_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, invocation_timestamp=2020-02-03T02:06:19.067Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, session_timestamp=2020-02-03T02:06:19.067Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[WARN ] 2020-02-03T02:06:19,143Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=7d0c595c-c64d-4f19-9adc-d5ca5823afe7, invocation_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, invocation_timestamp=2020-02-03T02:06:19.067Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, session_timestamp=2020-02-03T02:06:19.067Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,148Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=7d0c595c-c64d-4f19-9adc-d5ca5823afe7, invocation_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, invocation_timestamp=2020-02-03T02:06:19.067Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, session_timestamp=2020-02-03T02:06:19.067Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,154Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000006, flow-id=7d0c595c-c64d-4f19-9adc-d5ca5823afe7, invocation_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, invocation_timestamp=2020-02-03T02:06:19.067Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, session_timestamp=2020-02-03T02:06:19.067Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,157Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000006, flow-id=7d0c595c-c64d-4f19-9adc-d5ca5823afe7, invocation_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, invocation_timestamp=2020-02-03T02:06:19.067Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0cac2e00-949e-4f9d-ae87-aecdca864b3b, session_timestamp=2020-02-03T02:06:19.067Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,164Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0c13ba5a-81da-49fb-b4a0-ba938f4a5884, invocation_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, invocation_timestamp=2020-02-03T02:06:18.327Z, origin=Only For Testing, session_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, session_timestamp=2020-02-03T02:06:18.327Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,164Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=0c13ba5a-81da-49fb-b4a0-ba938f4a5884, invocation_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, invocation_timestamp=2020-02-03T02:06:18.327Z, origin=Only For Testing, session_id=77bdbd51-cd43-49e4-84bc-8ba883e546c8, session_timestamp=2020-02-03T02:06:18.327Z, thread-id=284, tx_id=9B91C548A43087AF547521FB5EFED673718712CD2CFC3168B43397F8C98825D5}
[INFO ] 2020-02-03T02:06:19,225Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020619.185/nodes/0/cordapps] {}
[INFO ] 2020-02-03T02:06:19,226Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020619.185/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:19,226Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020619.185/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:19,251Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:19,256Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:19,258Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:19,258Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:19,258Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:19,261Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:19.185Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:19,536Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:19,538Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020619.185/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:19,538Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:19,540Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:19,542Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:19,543Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:19,590Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:19,595Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:19,610Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:19,615Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:19,615Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:19,686Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:19,689Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:19,689Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695579689) {}
[INFO ] 2020-02-03T02:06:19,691Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:19,700Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695579689) {}
[INFO ] 2020-02-03T02:06:19,706Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:19,709Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695579689) {}
[INFO ] 2020-02-03T02:06:19,712Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:19,740Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:19,742Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T02:06:19,742Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T02:06:19,746Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695579689) {}
[INFO ] 2020-02-03T02:06:19,757Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695579689) {}
[INFO ] 2020-02-03T02:06:19,757Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:19,757Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695579689) {}
[INFO ] 2020-02-03T02:06:19,757Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:19,758Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020619.185/nodes/1/cordapps] {}
[INFO ] 2020-02-03T02:06:19,758Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020619.185/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:19,758Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020619.185/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:19,784Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:19,801Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:19,862Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:19,865Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:19,868Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:19,875Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:19.185Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:20,162Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:20,163Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020619.185/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:20,163Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:20,164Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:20,166Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:20,166Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:20,211Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:20,217Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:20,218Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:20,219Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:20,228Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:20,228Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:20,295Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:20,299Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:20,300Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695580300) {}
[INFO ] 2020-02-03T02:06:20,302Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:20,307Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695580300) {}
[INFO ] 2020-02-03T02:06:20,311Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:20,322Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695580300) {}
[INFO ] 2020-02-03T02:06:20,327Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:20,376Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:20,382Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695580300) {}
[INFO ] 2020-02-03T02:06:20,384Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695579689) {}
[INFO ] 2020-02-03T02:06:20,385Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:20,391Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695580300) {}
[INFO ] 2020-02-03T02:06:20,391Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:20,398Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695580300) {}
[INFO ] 2020-02-03T02:06:20,398Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:20,399Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695580300) {}
[INFO ] 2020-02-03T02:06:20,399Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:20,401Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020619.185/nodes/2/cordapps] {}
[INFO ] 2020-02-03T02:06:20,402Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020619.185/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:20,403Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020619.185/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:20,426Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:20,429Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:20,446Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:20,447Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:20,447Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:20,452Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:19.185Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:20,689Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:20,690Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020619.185/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:20,690Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:20,691Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:20,692Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:20,692Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:20,744Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:20,749Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:20,750Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:20,751Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:20,760Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:20,760Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:20,826Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:20,830Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:20,830Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695580830) {}
[INFO ] 2020-02-03T02:06:20,831Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:20,836Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695580830) {}
[INFO ] 2020-02-03T02:06:20,839Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:20,845Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695580830) {}
[INFO ] 2020-02-03T02:06:20,855Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:20,895Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:20,899Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695580830) {}
[INFO ] 2020-02-03T02:06:20,903Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695579689) {}
[INFO ] 2020-02-03T02:06:20,904Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:20,910Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695580830) {}
[INFO ] 2020-02-03T02:06:20,911Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:20,917Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695580300) {}
[INFO ] 2020-02-03T02:06:20,919Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:20,924Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695580830) {}
[INFO ] 2020-02-03T02:06:20,925Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:20,930Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695580830) {}
[INFO ] 2020-02-03T02:06:20,930Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:20,930Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695580830) {}
[INFO ] 2020-02-03T02:06:20,930Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T02:06:21,966Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=daea1887-a819-450d-8884-290c86f9c2f9, invocation_id=7703e818-f606-4d18-a098-c86964434b98, invocation_timestamp=2020-02-03T02:06:20.934Z, origin=Only For Testing, session_id=7703e818-f606-4d18-a098-c86964434b98, session_timestamp=2020-02-03T02:06:20.934Z, thread-id=373}
[INFO ] 2020-02-03T02:06:21,994Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=a6be44b0-42eb-4b74-9ca6-f3d54a450336, invocation_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, invocation_timestamp=2020-02-03T02:06:21.982Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, session_timestamp=2020-02-03T02:06:21.982Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[WARN ] 2020-02-03T02:06:21,995Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=a6be44b0-42eb-4b74-9ca6-f3d54a450336, invocation_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, invocation_timestamp=2020-02-03T02:06:21.982Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, session_timestamp=2020-02-03T02:06:21.982Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,002Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=a6be44b0-42eb-4b74-9ca6-f3d54a450336, invocation_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, invocation_timestamp=2020-02-03T02:06:21.982Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, session_timestamp=2020-02-03T02:06:21.982Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[WARN ] 2020-02-03T02:06:22,029Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=a6be44b0-42eb-4b74-9ca6-f3d54a450336, invocation_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, invocation_timestamp=2020-02-03T02:06:21.982Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, session_timestamp=2020-02-03T02:06:21.982Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,040Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=daea1887-a819-450d-8884-290c86f9c2f9, invocation_id=7703e818-f606-4d18-a098-c86964434b98, invocation_timestamp=2020-02-03T02:06:20.934Z, origin=Only For Testing, session_id=7703e818-f606-4d18-a098-c86964434b98, session_timestamp=2020-02-03T02:06:20.934Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,041Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=daea1887-a819-450d-8884-290c86f9c2f9, invocation_id=7703e818-f606-4d18-a098-c86964434b98, invocation_timestamp=2020-02-03T02:06:20.934Z, origin=Only For Testing, session_id=7703e818-f606-4d18-a098-c86964434b98, session_timestamp=2020-02-03T02:06:20.934Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,050Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=daea1887-a819-450d-8884-290c86f9c2f9, invocation_id=7703e818-f606-4d18-a098-c86964434b98, invocation_timestamp=2020-02-03T02:06:20.934Z, origin=Only For Testing, session_id=7703e818-f606-4d18-a098-c86964434b98, session_timestamp=2020-02-03T02:06:20.934Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,059Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=a6be44b0-42eb-4b74-9ca6-f3d54a450336, invocation_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, invocation_timestamp=2020-02-03T02:06:21.982Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, session_timestamp=2020-02-03T02:06:21.982Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[WARN ] 2020-02-03T02:06:22,059Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=a6be44b0-42eb-4b74-9ca6-f3d54a450336, invocation_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, invocation_timestamp=2020-02-03T02:06:21.982Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, session_timestamp=2020-02-03T02:06:21.982Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,063Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=a6be44b0-42eb-4b74-9ca6-f3d54a450336, invocation_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, invocation_timestamp=2020-02-03T02:06:21.982Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, session_timestamp=2020-02-03T02:06:21.982Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,068Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000008, flow-id=a6be44b0-42eb-4b74-9ca6-f3d54a450336, invocation_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, invocation_timestamp=2020-02-03T02:06:21.982Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, session_timestamp=2020-02-03T02:06:21.982Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,072Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000008, flow-id=a6be44b0-42eb-4b74-9ca6-f3d54a450336, invocation_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, invocation_timestamp=2020-02-03T02:06:21.982Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eb815f6-79d5-4779-b778-9eebd0ed535f, session_timestamp=2020-02-03T02:06:21.982Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,077Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=daea1887-a819-450d-8884-290c86f9c2f9, invocation_id=7703e818-f606-4d18-a098-c86964434b98, invocation_timestamp=2020-02-03T02:06:20.934Z, origin=Only For Testing, session_id=7703e818-f606-4d18-a098-c86964434b98, session_timestamp=2020-02-03T02:06:20.934Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,077Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=daea1887-a819-450d-8884-290c86f9c2f9, invocation_id=7703e818-f606-4d18-a098-c86964434b98, invocation_timestamp=2020-02-03T02:06:20.934Z, origin=Only For Testing, session_id=7703e818-f606-4d18-a098-c86964434b98, session_timestamp=2020-02-03T02:06:20.934Z, thread-id=373, tx_id=F495C6EF48D3E4D543D949ECEFE9242453FA3ABFBCB4D860F7086B588F564BD9}
[INFO ] 2020-02-03T02:06:22,123Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020622.087/nodes/0/cordapps] {}
[INFO ] 2020-02-03T02:06:22,124Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020622.087/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:22,125Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020622.087/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:22,150Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:22,154Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:22,156Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:22,156Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:22,156Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:22,160Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:22.087Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:22,419Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:22,420Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020622.087/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:22,420Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:22,421Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:22,422Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:22,423Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:22,470Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:22,475Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:22,490Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:22,494Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:22,495Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:22,568Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:22,571Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:22,571Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695582571) {}
[INFO ] 2020-02-03T02:06:22,572Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:22,582Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695582571) {}
[INFO ] 2020-02-03T02:06:22,588Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:22,594Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695582571) {}
[INFO ] 2020-02-03T02:06:22,604Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:22,639Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:22,640Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T02:06:22,640Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T02:06:22,644Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695582571) {}
[INFO ] 2020-02-03T02:06:22,645Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695582571) {}
[INFO ] 2020-02-03T02:06:22,645Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:22,645Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695582571) {}
[INFO ] 2020-02-03T02:06:22,645Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:22,647Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020622.087/nodes/1/cordapps] {}
[INFO ] 2020-02-03T02:06:22,647Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020622.087/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:22,647Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020622.087/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:22,668Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:22,672Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:22,685Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:22,685Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:22,685Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:22,686Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:22.087Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:22,910Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:22,910Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020622.087/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:22,911Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:22,911Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:22,912Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:22,913Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:22,962Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:22,968Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:22,969Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:22,969Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:22,978Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:22,978Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:23,043Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:23,047Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:23,047Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695583047) {}
[INFO ] 2020-02-03T02:06:23,048Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:23,053Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695583047) {}
[INFO ] 2020-02-03T02:06:23,056Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:23,063Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695583047) {}
[INFO ] 2020-02-03T02:06:23,067Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:23,093Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:23,098Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695583047) {}
[INFO ] 2020-02-03T02:06:23,100Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695582571) {}
[INFO ] 2020-02-03T02:06:23,101Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:23,105Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695583047) {}
[INFO ] 2020-02-03T02:06:23,106Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:23,111Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695583047) {}
[INFO ] 2020-02-03T02:06:23,111Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:23,111Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695583047) {}
[INFO ] 2020-02-03T02:06:23,111Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:23,112Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020622.087/nodes/2/cordapps] {}
[INFO ] 2020-02-03T02:06:23,112Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020622.087/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:23,112Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020622.087/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:23,133Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:23,138Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:23,152Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:23,152Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:23,153Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:23,154Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:22.087Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:23,390Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:23,391Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020622.087/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:23,391Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:23,392Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:23,393Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:23,393Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:23,438Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:23,442Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:23,444Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:23,444Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:23,453Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:23,453Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:23,519Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:23,522Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:23,523Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695583522) {}
[INFO ] 2020-02-03T02:06:23,524Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:23,528Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695583522) {}
[INFO ] 2020-02-03T02:06:23,533Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:23,540Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695583522) {}
[INFO ] 2020-02-03T02:06:23,544Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:23,577Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:23,584Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695583522) {}
[INFO ] 2020-02-03T02:06:23,585Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695582571) {}
[INFO ] 2020-02-03T02:06:23,586Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:23,591Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695583522) {}
[INFO ] 2020-02-03T02:06:23,592Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:23,599Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695583047) {}
[INFO ] 2020-02-03T02:06:23,601Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:23,606Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695583522) {}
[INFO ] 2020-02-03T02:06:23,607Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:23,612Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695583522) {}
[INFO ] 2020-02-03T02:06:23,612Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:23,612Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695583522) {}
[INFO ] 2020-02-03T02:06:23,612Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T02:06:24,227Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=efe67206-08ad-4ee9-ab00-258af1416025, invocation_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, invocation_timestamp=2020-02-03T02:06:23.618Z, origin=Only For Testing, session_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, session_timestamp=2020-02-03T02:06:23.618Z, thread-id=462}
[INFO ] 2020-02-03T02:06:24,252Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=913df6a0-0293-4c72-963d-a6720bfad970, invocation_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, invocation_timestamp=2020-02-03T02:06:24.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, session_timestamp=2020-02-03T02:06:24.242Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[WARN ] 2020-02-03T02:06:24,252Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=913df6a0-0293-4c72-963d-a6720bfad970, invocation_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, invocation_timestamp=2020-02-03T02:06:24.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, session_timestamp=2020-02-03T02:06:24.242Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,257Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=913df6a0-0293-4c72-963d-a6720bfad970, invocation_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, invocation_timestamp=2020-02-03T02:06:24.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, session_timestamp=2020-02-03T02:06:24.242Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[WARN ] 2020-02-03T02:06:24,276Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=913df6a0-0293-4c72-963d-a6720bfad970, invocation_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, invocation_timestamp=2020-02-03T02:06:24.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, session_timestamp=2020-02-03T02:06:24.242Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,287Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=efe67206-08ad-4ee9-ab00-258af1416025, invocation_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, invocation_timestamp=2020-02-03T02:06:23.618Z, origin=Only For Testing, session_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, session_timestamp=2020-02-03T02:06:23.618Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,287Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=efe67206-08ad-4ee9-ab00-258af1416025, invocation_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, invocation_timestamp=2020-02-03T02:06:23.618Z, origin=Only For Testing, session_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, session_timestamp=2020-02-03T02:06:23.618Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,295Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=efe67206-08ad-4ee9-ab00-258af1416025, invocation_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, invocation_timestamp=2020-02-03T02:06:23.618Z, origin=Only For Testing, session_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, session_timestamp=2020-02-03T02:06:23.618Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,303Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=913df6a0-0293-4c72-963d-a6720bfad970, invocation_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, invocation_timestamp=2020-02-03T02:06:24.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, session_timestamp=2020-02-03T02:06:24.242Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[WARN ] 2020-02-03T02:06:24,303Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=913df6a0-0293-4c72-963d-a6720bfad970, invocation_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, invocation_timestamp=2020-02-03T02:06:24.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, session_timestamp=2020-02-03T02:06:24.242Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,308Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=913df6a0-0293-4c72-963d-a6720bfad970, invocation_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, invocation_timestamp=2020-02-03T02:06:24.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, session_timestamp=2020-02-03T02:06:24.242Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,311Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000010, flow-id=913df6a0-0293-4c72-963d-a6720bfad970, invocation_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, invocation_timestamp=2020-02-03T02:06:24.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, session_timestamp=2020-02-03T02:06:24.242Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,313Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000010, flow-id=913df6a0-0293-4c72-963d-a6720bfad970, invocation_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, invocation_timestamp=2020-02-03T02:06:24.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=13f61b2e-e15b-48c3-b4df-55bceeb7cbd7, session_timestamp=2020-02-03T02:06:24.242Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,319Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=efe67206-08ad-4ee9-ab00-258af1416025, invocation_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, invocation_timestamp=2020-02-03T02:06:23.618Z, origin=Only For Testing, session_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, session_timestamp=2020-02-03T02:06:23.618Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,319Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=efe67206-08ad-4ee9-ab00-258af1416025, invocation_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, invocation_timestamp=2020-02-03T02:06:23.618Z, origin=Only For Testing, session_id=bf4e1a22-3d83-45f6-a126-33349f265dd8, session_timestamp=2020-02-03T02:06:23.618Z, thread-id=462, tx_id=C5F36E75452A0E984581C0F01070CAC087B8D9BAE37865CFD289F256DFD5AD24}
[INFO ] 2020-02-03T02:06:24,375Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020624.335/nodes/0/cordapps] {}
[INFO ] 2020-02-03T02:06:24,376Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020624.335/nodes/0/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:24,376Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020624.335/nodes/0/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:24,394Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:24,402Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:24,404Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:24,404Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:24,404Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:24,408Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:24.334Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:24,655Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:24,656Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020624.335/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:24,656Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:24,657Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:24,658Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:24,658Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:24,709Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:24,715Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:24,731Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:24,736Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:24,736Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:24,813Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-03T02:06:24,818Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:24,819Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695584819) {}
[INFO ] 2020-02-03T02:06:24,821Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:24,831Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695584819) {}
[INFO ] 2020-02-03T02:06:24,837Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:24,851Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695584819) {}
[INFO ] 2020-02-03T02:06:24,854Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:24,880Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:24,883Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-03T02:06:24,883Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-03T02:06:24,888Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695584819) {}
[INFO ] 2020-02-03T02:06:24,895Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695584819) {}
[INFO ] 2020-02-03T02:06:24,895Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:24,895Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695584819) {}
[INFO ] 2020-02-03T02:06:24,895Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:24,896Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020624.335/nodes/1/cordapps] {}
[INFO ] 2020-02-03T02:06:24,897Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020624.335/nodes/1/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:24,897Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020624.335/nodes/1/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:24,918Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:24,925Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:24,936Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:24,936Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:24,936Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:24,938Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:24.334Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:25,168Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:25,169Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020624.335/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:25,169Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:25,169Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:25,171Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:25,171Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:25,211Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:25,217Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:25,218Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:25,218Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:25,227Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:25,227Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:25,287Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:25,290Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:25,290Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695585290) {}
[INFO ] 2020-02-03T02:06:25,291Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:25,294Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695585290) {}
[INFO ] 2020-02-03T02:06:25,299Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:25,312Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695585290) {}
[INFO ] 2020-02-03T02:06:25,319Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:25,337Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:25,341Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695585290) {}
[INFO ] 2020-02-03T02:06:25,344Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695584819) {}
[INFO ] 2020-02-03T02:06:25,345Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:25,350Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695585290) {}
[INFO ] 2020-02-03T02:06:25,352Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:25,357Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695585290) {}
[INFO ] 2020-02-03T02:06:25,357Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:25,358Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695585290) {}
[INFO ] 2020-02-03T02:06:25,358Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:25,360Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20200203-020624.335/nodes/2/cordapps] {}
[INFO ] 2020-02-03T02:06:25,361Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020624.335/nodes/2/cordapps/Corda-Bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-02-03T02:06:25,361Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/home/illuna/1.Projetos/Corda-Bootcamp/build/mock-network/20200203-020624.335/nodes/2/cordapps/Corda-Bootcamp.jar {}
[INFO ] 2020-02-03T02:06:25,390Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-03T02:06:25,394Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-03T02:06:25,406Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:25,406Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:25,406Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-03T02:06:25,408Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-03T02:06:24.334Z
      epoch=1
  } {}
[INFO ] 2020-02-03T02:06:25,640Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-03T02:06:25,641Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200203-020624.335/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-03T02:06:25,641Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-03T02:06:25,642Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-03T02:06:25,643Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:25,643Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:25,689Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-03T02:06:25,694Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-03T02:06:25,695Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-03T02:06:25,695Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-03T02:06:25,704Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:25,704Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:25,772Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-03T02:06:25,776Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-03T02:06:25,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695585776) {}
[INFO ] 2020-02-03T02:06:25,778Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:25,784Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695585776) {}
[INFO ] 2020-02-03T02:06:25,787Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-03T02:06:25,791Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695585776) {}
[INFO ] 2020-02-03T02:06:25,798Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:25,818Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=78D369F7571B4BC340B5C84EE0C9CB3D7A76F5F5DF8D15B0A7455B5120B87E06 uploader=app filename=null {}
[INFO ] 2020-02-03T02:06:25,822Z [main] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695585776) {}
[INFO ] 2020-02-03T02:06:25,825Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1580695584819) {}
[INFO ] 2020-02-03T02:06:25,826Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:25,834Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695585776) {}
[INFO ] 2020-02-03T02:06:25,835Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:25,840Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1580695585290) {}
[INFO ] 2020-02-03T02:06:25,841Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:25,845Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695585776) {}
[INFO ] 2020-02-03T02:06:25,846Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-03T02:06:25,851Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695585776) {}
[INFO ] 2020-02-03T02:06:25,851Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-03T02:06:25,851Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1580695585776) {}
[INFO ] 2020-02-03T02:06:25,851Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-03T02:06:26,481Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=ba038697-7e9b-4672-abc5-800916251578, invocation_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, invocation_timestamp=2020-02-03T02:06:25.852Z, origin=Only For Testing, session_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, session_timestamp=2020-02-03T02:06:25.852Z, thread-id=551}
[INFO ] 2020-02-03T02:06:26,506Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=d5d2390a-e9fc-4f3f-8e40-42bdb2046bf9, invocation_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, invocation_timestamp=2020-02-03T02:06:26.496Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, session_timestamp=2020-02-03T02:06:26.496Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[WARN ] 2020-02-03T02:06:26,506Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=d5d2390a-e9fc-4f3f-8e40-42bdb2046bf9, invocation_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, invocation_timestamp=2020-02-03T02:06:26.496Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, session_timestamp=2020-02-03T02:06:26.496Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[INFO ] 2020-02-03T02:06:26,511Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=d5d2390a-e9fc-4f3f-8e40-42bdb2046bf9, invocation_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, invocation_timestamp=2020-02-03T02:06:26.496Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, session_timestamp=2020-02-03T02:06:26.496Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[WARN ] 2020-02-03T02:06:26,533Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=d5d2390a-e9fc-4f3f-8e40-42bdb2046bf9, invocation_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, invocation_timestamp=2020-02-03T02:06:26.496Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, session_timestamp=2020-02-03T02:06:26.496Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[INFO ] 2020-02-03T02:06:26,542Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=ba038697-7e9b-4672-abc5-800916251578, invocation_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, invocation_timestamp=2020-02-03T02:06:25.852Z, origin=Only For Testing, session_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, session_timestamp=2020-02-03T02:06:25.852Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[INFO ] 2020-02-03T02:06:26,542Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=ba038697-7e9b-4672-abc5-800916251578, invocation_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, invocation_timestamp=2020-02-03T02:06:25.852Z, origin=Only For Testing, session_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, session_timestamp=2020-02-03T02:06:25.852Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[INFO ] 2020-02-03T02:06:26,550Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=ba038697-7e9b-4672-abc5-800916251578, invocation_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, invocation_timestamp=2020-02-03T02:06:25.852Z, origin=Only For Testing, session_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, session_timestamp=2020-02-03T02:06:25.852Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[INFO ] 2020-02-03T02:06:26,557Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=d5d2390a-e9fc-4f3f-8e40-42bdb2046bf9, invocation_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, invocation_timestamp=2020-02-03T02:06:26.496Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, session_timestamp=2020-02-03T02:06:26.496Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[WARN ] 2020-02-03T02:06:26,557Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=d5d2390a-e9fc-4f3f-8e40-42bdb2046bf9, invocation_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, invocation_timestamp=2020-02-03T02:06:26.496Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, session_timestamp=2020-02-03T02:06:26.496Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[INFO ] 2020-02-03T02:06:26,561Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=d5d2390a-e9fc-4f3f-8e40-42bdb2046bf9, invocation_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, invocation_timestamp=2020-02-03T02:06:26.496Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, session_timestamp=2020-02-03T02:06:26.496Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[INFO ] 2020-02-03T02:06:26,565Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000012, flow-id=d5d2390a-e9fc-4f3f-8e40-42bdb2046bf9, invocation_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, invocation_timestamp=2020-02-03T02:06:26.496Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, session_timestamp=2020-02-03T02:06:26.496Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[INFO ] 2020-02-03T02:06:26,568Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000012, flow-id=d5d2390a-e9fc-4f3f-8e40-42bdb2046bf9, invocation_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, invocation_timestamp=2020-02-03T02:06:26.496Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d0dcf375-fe3c-4d76-aec7-605b89a4d428, session_timestamp=2020-02-03T02:06:26.496Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[INFO ] 2020-02-03T02:06:26,574Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=ba038697-7e9b-4672-abc5-800916251578, invocation_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, invocation_timestamp=2020-02-03T02:06:25.852Z, origin=Only For Testing, session_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, session_timestamp=2020-02-03T02:06:25.852Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
[INFO ] 2020-02-03T02:06:26,574Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=ba038697-7e9b-4672-abc5-800916251578, invocation_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, invocation_timestamp=2020-02-03T02:06:25.852Z, origin=Only For Testing, session_id=b1d61e59-ca25-4eb9-9b36-93f5319857b5, session_timestamp=2020-02-03T02:06:25.852Z, thread-id=551, tx_id=81E44F246EA03C562A8C5FE0D1825279CD52C3867D8D5372EB51A7EBC98A51B2}
